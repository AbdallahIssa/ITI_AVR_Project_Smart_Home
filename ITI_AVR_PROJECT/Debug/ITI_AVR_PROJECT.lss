
ITI_AVR_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003914  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018e  00800060  00003914  000039a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  008001ee  008001ee  00003b36  2**0
                  ALLOC
  3 .stab         00003678  00000000  00000000  00003b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017ee  00000000  00000000  000071b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000899e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f5  00000000  00000000  00008b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002216  00000000  00000000  00008d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012b8  00000000  00000000  0000af49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001136  00000000  00000000  0000c201  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d338  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d2  00000000  00000000  0000d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000095a  00000000  00000000  0000d7ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e124  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__vector_1>
       8:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__vector_2>
       c:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__vector_7>
      20:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__vector_8>
      24:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__vector_9>
      28:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__vector_10>
      2c:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 30       	cpi	r26, 0x00	; 0
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 76 1b 	call	0x36ec	; 0x36ec <main>
      8a:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ed       	ldi	r26, 0xD6	; 214
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 79 1c 	jmp	0x38f2	; 0x38f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 79 1c 	jmp	0x38f2	; 0x38f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ed       	ldi	r24, 0xD6	; 214
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 79 1c 	jmp	0x38f2	; 0x38f2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 79 1c 	jmp	0x38f2	; 0x38f2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 79 1c 	jmp	0x38f2	; 0x38f2 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5a 1c 	jmp	0x38b4	; 0x38b4 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 76 1c 	jmp	0x38ec	; 0x38ec <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <__epilogue_restores__+0x20>

000008b6 <__floatunsisf>:
     8b6:	a8 e0       	ldi	r26, 0x08	; 8
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e6       	ldi	r30, 0x61	; 97
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__prologue_saves__+0x10>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	61 15       	cp	r22, r1
     8c8:	71 05       	cpc	r23, r1
     8ca:	81 05       	cpc	r24, r1
     8cc:	91 05       	cpc	r25, r1
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <__floatunsisf+0x20>
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	60 c0       	rjmp	.+192    	; 0x996 <__floatunsisf+0xe0>
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	8e e1       	ldi	r24, 0x1E	; 30
     8dc:	c8 2e       	mov	r12, r24
     8de:	d1 2c       	mov	r13, r1
     8e0:	dc 82       	std	Y+4, r13	; 0x04
     8e2:	cb 82       	std	Y+3, r12	; 0x03
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 01       	movw	r24, r16
     8ee:	b7 01       	movw	r22, r14
     8f0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     8f4:	fc 01       	movw	r30, r24
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	f7 ff       	sbrs	r31, 7
     8fa:	3b c0       	rjmp	.+118    	; 0x972 <__floatunsisf+0xbc>
     8fc:	22 27       	eor	r18, r18
     8fe:	33 27       	eor	r19, r19
     900:	2e 1b       	sub	r18, r30
     902:	3f 0b       	sbc	r19, r31
     904:	57 01       	movw	r10, r14
     906:	68 01       	movw	r12, r16
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__floatunsisf+0x5e>
     90c:	d6 94       	lsr	r13
     90e:	c7 94       	ror	r12
     910:	b7 94       	ror	r11
     912:	a7 94       	ror	r10
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__floatunsisf+0x56>
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	04 c0       	rjmp	.+8      	; 0x932 <__floatunsisf+0x7c>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	aa 1f       	adc	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	2a 95       	dec	r18
     934:	d2 f7       	brpl	.-12     	; 0x92a <__floatunsisf+0x74>
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	a1 09       	sbc	r26, r1
     93a:	b1 09       	sbc	r27, r1
     93c:	8e 21       	and	r24, r14
     93e:	9f 21       	and	r25, r15
     940:	a0 23       	and	r26, r16
     942:	b1 23       	and	r27, r17
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	a1 05       	cpc	r26, r1
     948:	b1 05       	cpc	r27, r1
     94a:	21 f0       	breq	.+8      	; 0x954 <__floatunsisf+0x9e>
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	4a 29       	or	r20, r10
     956:	5b 29       	or	r21, r11
     958:	6c 29       	or	r22, r12
     95a:	7d 29       	or	r23, r13
     95c:	4d 83       	std	Y+5, r20	; 0x05
     95e:	5e 83       	std	Y+6, r21	; 0x06
     960:	6f 83       	std	Y+7, r22	; 0x07
     962:	78 87       	std	Y+8, r23	; 0x08
     964:	8e e1       	ldi	r24, 0x1E	; 30
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	8e 1b       	sub	r24, r30
     96a:	9f 0b       	sbc	r25, r31
     96c:	9c 83       	std	Y+4, r25	; 0x04
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	12 c0       	rjmp	.+36     	; 0x996 <__floatunsisf+0xe0>
     972:	30 97       	sbiw	r30, 0x00	; 0
     974:	81 f0       	breq	.+32     	; 0x996 <__floatunsisf+0xe0>
     976:	0e 2e       	mov	r0, r30
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0xcc>
     97a:	ee 0c       	add	r14, r14
     97c:	ff 1c       	adc	r15, r15
     97e:	00 1f       	adc	r16, r16
     980:	11 1f       	adc	r17, r17
     982:	0a 94       	dec	r0
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0xc4>
     986:	ed 82       	std	Y+5, r14	; 0x05
     988:	fe 82       	std	Y+6, r15	; 0x06
     98a:	0f 83       	std	Y+7, r16	; 0x07
     98c:	18 87       	std	Y+8, r17	; 0x08
     98e:	ce 1a       	sub	r12, r30
     990:	df 0a       	sbc	r13, r31
     992:	dc 82       	std	Y+4, r13	; 0x04
     994:	cb 82       	std	Y+3, r12	; 0x03
     996:	1a 82       	std	Y+2, r1	; 0x02
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     9a0:	28 96       	adiw	r28, 0x08	; 8
     9a2:	ea e0       	ldi	r30, 0x0A	; 10
     9a4:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <__epilogue_restores__+0x10>

000009a8 <__clzsi2>:
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	7b 01       	movw	r14, r22
     9b2:	8c 01       	movw	r16, r24
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	e8 16       	cp	r14, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	f8 06       	cpc	r15, r24
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 07       	cpc	r16, r24
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	18 07       	cpc	r17, r24
     9c4:	88 f4       	brcc	.+34     	; 0x9e8 <__clzsi2+0x40>
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	e8 16       	cp	r14, r24
     9ca:	f1 04       	cpc	r15, r1
     9cc:	01 05       	cpc	r16, r1
     9ce:	11 05       	cpc	r17, r1
     9d0:	31 f0       	breq	.+12     	; 0x9de <__clzsi2+0x36>
     9d2:	28 f0       	brcs	.+10     	; 0x9de <__clzsi2+0x36>
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	17 c0       	rjmp	.+46     	; 0xa0c <__clzsi2+0x64>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	12 c0       	rjmp	.+36     	; 0xa0c <__clzsi2+0x64>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	e8 16       	cp	r14, r24
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	f8 06       	cpc	r15, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 07       	cpc	r16, r24
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	18 07       	cpc	r17, r24
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__clzsi2+0x5c>
     9fa:	88 e1       	ldi	r24, 0x18	; 24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__clzsi2+0x64>
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	20 e2       	ldi	r18, 0x20	; 32
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	28 1b       	sub	r18, r24
     a16:	39 0b       	sbc	r19, r25
     a18:	4a 0b       	sbc	r20, r26
     a1a:	5b 0b       	sbc	r21, r27
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__clzsi2+0x7e>
     a1e:	16 95       	lsr	r17
     a20:	07 95       	ror	r16
     a22:	f7 94       	ror	r15
     a24:	e7 94       	ror	r14
     a26:	8a 95       	dec	r24
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__clzsi2+0x76>
     a2a:	f7 01       	movw	r30, r14
     a2c:	e2 52       	subi	r30, 0x22	; 34
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	80 81       	ld	r24, Z
     a32:	28 1b       	sub	r18, r24
     a34:	31 09       	sbc	r19, r1
     a36:	41 09       	sbc	r20, r1
     a38:	51 09       	sbc	r21, r1
     a3a:	c9 01       	movw	r24, r18
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <__pack_f>:
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	fc 01       	movw	r30, r24
     a52:	e4 80       	ldd	r14, Z+4	; 0x04
     a54:	f5 80       	ldd	r15, Z+5	; 0x05
     a56:	06 81       	ldd	r16, Z+6	; 0x06
     a58:	17 81       	ldd	r17, Z+7	; 0x07
     a5a:	d1 80       	ldd	r13, Z+1	; 0x01
     a5c:	80 81       	ld	r24, Z
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	48 f4       	brcc	.+18     	; 0xa74 <__pack_f+0x2e>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a0 e1       	ldi	r26, 0x10	; 16
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e8 2a       	or	r14, r24
     a6c:	f9 2a       	or	r15, r25
     a6e:	0a 2b       	or	r16, r26
     a70:	1b 2b       	or	r17, r27
     a72:	a5 c0       	rjmp	.+330    	; 0xbbe <__pack_f+0x178>
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	09 f4       	brne	.+2      	; 0xa7a <__pack_f+0x34>
     a78:	9f c0       	rjmp	.+318    	; 0xbb8 <__pack_f+0x172>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	21 f4       	brne	.+8      	; 0xa86 <__pack_f+0x40>
     a7e:	ee 24       	eor	r14, r14
     a80:	ff 24       	eor	r15, r15
     a82:	87 01       	movw	r16, r14
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <__pack_f+0x4a>
     a86:	e1 14       	cp	r14, r1
     a88:	f1 04       	cpc	r15, r1
     a8a:	01 05       	cpc	r16, r1
     a8c:	11 05       	cpc	r17, r1
     a8e:	19 f4       	brne	.+6      	; 0xa96 <__pack_f+0x50>
     a90:	e0 e0       	ldi	r30, 0x00	; 0
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	96 c0       	rjmp	.+300    	; 0xbc2 <__pack_f+0x17c>
     a96:	62 81       	ldd	r22, Z+2	; 0x02
     a98:	73 81       	ldd	r23, Z+3	; 0x03
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	62 38       	cpi	r22, 0x82	; 130
     a9e:	79 07       	cpc	r23, r25
     aa0:	0c f0       	brlt	.+2      	; 0xaa4 <__pack_f+0x5e>
     aa2:	5b c0       	rjmp	.+182    	; 0xb5a <__pack_f+0x114>
     aa4:	22 e8       	ldi	r18, 0x82	; 130
     aa6:	3f ef       	ldi	r19, 0xFF	; 255
     aa8:	26 1b       	sub	r18, r22
     aaa:	37 0b       	sbc	r19, r23
     aac:	2a 31       	cpi	r18, 0x1A	; 26
     aae:	31 05       	cpc	r19, r1
     ab0:	2c f0       	brlt	.+10     	; 0xabc <__pack_f+0x76>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	2a c0       	rjmp	.+84     	; 0xb10 <__pack_f+0xca>
     abc:	b8 01       	movw	r22, r16
     abe:	a7 01       	movw	r20, r14
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__pack_f+0x86>
     ac4:	76 95       	lsr	r23
     ac6:	67 95       	ror	r22
     ac8:	57 95       	ror	r21
     aca:	47 95       	ror	r20
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__pack_f+0x7e>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0x9c>
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	aa 1f       	adc	r26, r26
     ae0:	bb 1f       	adc	r27, r27
     ae2:	2a 95       	dec	r18
     ae4:	d2 f7       	brpl	.-12     	; 0xada <__pack_f+0x94>
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	a1 09       	sbc	r26, r1
     aea:	b1 09       	sbc	r27, r1
     aec:	8e 21       	and	r24, r14
     aee:	9f 21       	and	r25, r15
     af0:	a0 23       	and	r26, r16
     af2:	b1 23       	and	r27, r17
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	a1 05       	cpc	r26, r1
     af8:	b1 05       	cpc	r27, r1
     afa:	21 f0       	breq	.+8      	; 0xb04 <__pack_f+0xbe>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	9a 01       	movw	r18, r20
     b06:	ab 01       	movw	r20, r22
     b08:	28 2b       	or	r18, r24
     b0a:	39 2b       	or	r19, r25
     b0c:	4a 2b       	or	r20, r26
     b0e:	5b 2b       	or	r21, r27
     b10:	da 01       	movw	r26, r20
     b12:	c9 01       	movw	r24, r18
     b14:	8f 77       	andi	r24, 0x7F	; 127
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	a0 70       	andi	r26, 0x00	; 0
     b1a:	b0 70       	andi	r27, 0x00	; 0
     b1c:	80 34       	cpi	r24, 0x40	; 64
     b1e:	91 05       	cpc	r25, r1
     b20:	a1 05       	cpc	r26, r1
     b22:	b1 05       	cpc	r27, r1
     b24:	39 f4       	brne	.+14     	; 0xb34 <__pack_f+0xee>
     b26:	27 ff       	sbrs	r18, 7
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <__pack_f+0xf6>
     b2a:	20 5c       	subi	r18, 0xC0	; 192
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	4f 4f       	sbci	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__pack_f+0xf6>
     b34:	21 5c       	subi	r18, 0xC1	; 193
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	4f 4f       	sbci	r20, 0xFF	; 255
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	e0 e0       	ldi	r30, 0x00	; 0
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	20 30       	cpi	r18, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	3a 07       	cpc	r19, r26
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	4a 07       	cpc	r20, r26
     b4a:	a0 e4       	ldi	r26, 0x40	; 64
     b4c:	5a 07       	cpc	r21, r26
     b4e:	10 f0       	brcs	.+4      	; 0xb54 <__pack_f+0x10e>
     b50:	e1 e0       	ldi	r30, 0x01	; 1
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	79 01       	movw	r14, r18
     b56:	8a 01       	movw	r16, r20
     b58:	27 c0       	rjmp	.+78     	; 0xba8 <__pack_f+0x162>
     b5a:	60 38       	cpi	r22, 0x80	; 128
     b5c:	71 05       	cpc	r23, r1
     b5e:	64 f5       	brge	.+88     	; 0xbb8 <__pack_f+0x172>
     b60:	fb 01       	movw	r30, r22
     b62:	e1 58       	subi	r30, 0x81	; 129
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	d8 01       	movw	r26, r16
     b68:	c7 01       	movw	r24, r14
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0x144>
     b7c:	e7 fe       	sbrs	r14, 7
     b7e:	0d c0       	rjmp	.+26     	; 0xb9a <__pack_f+0x154>
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x14c>
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e8 0e       	add	r14, r24
     b94:	f9 1e       	adc	r15, r25
     b96:	0a 1f       	adc	r16, r26
     b98:	1b 1f       	adc	r17, r27
     b9a:	17 ff       	sbrs	r17, 7
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__pack_f+0x162>
     b9e:	16 95       	lsr	r17
     ba0:	07 95       	ror	r16
     ba2:	f7 94       	ror	r15
     ba4:	e7 94       	ror	r14
     ba6:	31 96       	adiw	r30, 0x01	; 1
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	16 95       	lsr	r17
     bac:	07 95       	ror	r16
     bae:	f7 94       	ror	r15
     bb0:	e7 94       	ror	r14
     bb2:	8a 95       	dec	r24
     bb4:	d1 f7       	brne	.-12     	; 0xbaa <__pack_f+0x164>
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__pack_f+0x17c>
     bb8:	ee 24       	eor	r14, r14
     bba:	ff 24       	eor	r15, r15
     bbc:	87 01       	movw	r16, r14
     bbe:	ef ef       	ldi	r30, 0xFF	; 255
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	6e 2f       	mov	r22, r30
     bc4:	67 95       	ror	r22
     bc6:	66 27       	eor	r22, r22
     bc8:	67 95       	ror	r22
     bca:	90 2f       	mov	r25, r16
     bcc:	9f 77       	andi	r25, 0x7F	; 127
     bce:	d7 94       	ror	r13
     bd0:	dd 24       	eor	r13, r13
     bd2:	d7 94       	ror	r13
     bd4:	8e 2f       	mov	r24, r30
     bd6:	86 95       	lsr	r24
     bd8:	49 2f       	mov	r20, r25
     bda:	46 2b       	or	r20, r22
     bdc:	58 2f       	mov	r21, r24
     bde:	5d 29       	or	r21, r13
     be0:	b7 01       	movw	r22, r14
     be2:	ca 01       	movw	r24, r20
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	08 95       	ret

00000bf0 <__unpack_f>:
     bf0:	fc 01       	movw	r30, r24
     bf2:	db 01       	movw	r26, r22
     bf4:	40 81       	ld	r20, Z
     bf6:	51 81       	ldd	r21, Z+1	; 0x01
     bf8:	22 81       	ldd	r18, Z+2	; 0x02
     bfa:	62 2f       	mov	r22, r18
     bfc:	6f 77       	andi	r22, 0x7F	; 127
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	22 1f       	adc	r18, r18
     c02:	22 27       	eor	r18, r18
     c04:	22 1f       	adc	r18, r18
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	89 2f       	mov	r24, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	82 2b       	or	r24, r18
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	99 1f       	adc	r25, r25
     c14:	99 27       	eor	r25, r25
     c16:	99 1f       	adc	r25, r25
     c18:	11 96       	adiw	r26, 0x01	; 1
     c1a:	9c 93       	st	X, r25
     c1c:	11 97       	sbiw	r26, 0x01	; 1
     c1e:	21 15       	cp	r18, r1
     c20:	31 05       	cpc	r19, r1
     c22:	a9 f5       	brne	.+106    	; 0xc8e <__unpack_f+0x9e>
     c24:	41 15       	cp	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	61 05       	cpc	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	11 f4       	brne	.+4      	; 0xc32 <__unpack_f+0x42>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	37 c0       	rjmp	.+110    	; 0xca0 <__unpack_f+0xb0>
     c32:	82 e8       	ldi	r24, 0x82	; 130
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
     c3c:	12 97       	sbiw	r26, 0x02	; 2
     c3e:	9a 01       	movw	r18, r20
     c40:	ab 01       	movw	r20, r22
     c42:	67 e0       	ldi	r22, 0x07	; 7
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	44 1f       	adc	r20, r20
     c4a:	55 1f       	adc	r21, r21
     c4c:	6a 95       	dec	r22
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <__unpack_f+0x54>
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	8c 93       	st	X, r24
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <__unpack_f+0x80>
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	44 1f       	adc	r20, r20
     c5c:	55 1f       	adc	r21, r21
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	13 97       	sbiw	r26, 0x03	; 3
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	13 96       	adiw	r26, 0x03	; 3
     c6a:	9c 93       	st	X, r25
     c6c:	8e 93       	st	-X, r24
     c6e:	12 97       	sbiw	r26, 0x02	; 2
     c70:	20 30       	cpi	r18, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	38 07       	cpc	r19, r24
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	48 07       	cpc	r20, r24
     c7a:	80 e4       	ldi	r24, 0x40	; 64
     c7c:	58 07       	cpc	r21, r24
     c7e:	58 f3       	brcs	.-42     	; 0xc56 <__unpack_f+0x66>
     c80:	14 96       	adiw	r26, 0x04	; 4
     c82:	2d 93       	st	X+, r18
     c84:	3d 93       	st	X+, r19
     c86:	4d 93       	st	X+, r20
     c88:	5c 93       	st	X, r21
     c8a:	17 97       	sbiw	r26, 0x07	; 7
     c8c:	08 95       	ret
     c8e:	2f 3f       	cpi	r18, 0xFF	; 255
     c90:	31 05       	cpc	r19, r1
     c92:	79 f4       	brne	.+30     	; 0xcb2 <__unpack_f+0xc2>
     c94:	41 15       	cp	r20, r1
     c96:	51 05       	cpc	r21, r1
     c98:	61 05       	cpc	r22, r1
     c9a:	71 05       	cpc	r23, r1
     c9c:	19 f4       	brne	.+6      	; 0xca4 <__unpack_f+0xb4>
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	8c 93       	st	X, r24
     ca2:	08 95       	ret
     ca4:	64 ff       	sbrs	r22, 4
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <__unpack_f+0xbe>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8c 93       	st	X, r24
     cac:	12 c0       	rjmp	.+36     	; 0xcd2 <__unpack_f+0xe2>
     cae:	1c 92       	st	X, r1
     cb0:	10 c0       	rjmp	.+32     	; 0xcd2 <__unpack_f+0xe2>
     cb2:	2f 57       	subi	r18, 0x7F	; 127
     cb4:	30 40       	sbci	r19, 0x00	; 0
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	3c 93       	st	X, r19
     cba:	2e 93       	st	-X, r18
     cbc:	12 97       	sbiw	r26, 0x02	; 2
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	8c 93       	st	X, r24
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	44 0f       	add	r20, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	66 1f       	adc	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	8a 95       	dec	r24
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <__unpack_f+0xd4>
     cd0:	70 64       	ori	r23, 0x40	; 64
     cd2:	14 96       	adiw	r26, 0x04	; 4
     cd4:	4d 93       	st	X+, r20
     cd6:	5d 93       	st	X+, r21
     cd8:	6d 93       	st	X+, r22
     cda:	7c 93       	st	X, r23
     cdc:	17 97       	sbiw	r26, 0x07	; 7
     cde:	08 95       	ret

00000ce0 <__fpcmp_parts_f>:
     ce0:	1f 93       	push	r17
     ce2:	dc 01       	movw	r26, r24
     ce4:	fb 01       	movw	r30, r22
     ce6:	9c 91       	ld	r25, X
     ce8:	92 30       	cpi	r25, 0x02	; 2
     cea:	08 f4       	brcc	.+2      	; 0xcee <__fpcmp_parts_f+0xe>
     cec:	47 c0       	rjmp	.+142    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cee:	80 81       	ld	r24, Z
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <__fpcmp_parts_f+0x16>
     cf4:	43 c0       	rjmp	.+134    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cf6:	94 30       	cpi	r25, 0x04	; 4
     cf8:	51 f4       	brne	.+20     	; 0xd0e <__fpcmp_parts_f+0x2e>
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	1c 91       	ld	r17, X
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	99 f5       	brne	.+102    	; 0xd68 <__fpcmp_parts_f+0x88>
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	68 2f       	mov	r22, r24
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	61 1b       	sub	r22, r17
     d0a:	71 09       	sbc	r23, r1
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <__fpcmp_parts_f+0xac>
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	21 f0       	breq	.+8      	; 0xd1a <__fpcmp_parts_f+0x3a>
     d12:	92 30       	cpi	r25, 0x02	; 2
     d14:	31 f4       	brne	.+12     	; 0xd22 <__fpcmp_parts_f+0x42>
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	b9 f1       	breq	.+110    	; 0xd88 <__fpcmp_parts_f+0xa8>
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	88 23       	and	r24, r24
     d1e:	89 f1       	breq	.+98     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d20:	2d c0       	rjmp	.+90     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	1c 91       	ld	r17, X
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	f1 f0       	breq	.+60     	; 0xd68 <__fpcmp_parts_f+0x88>
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	18 17       	cp	r17, r24
     d30:	d9 f4       	brne	.+54     	; 0xd68 <__fpcmp_parts_f+0x88>
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	2d 91       	ld	r18, X+
     d36:	3c 91       	ld	r19, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	82 17       	cp	r24, r18
     d40:	93 07       	cpc	r25, r19
     d42:	94 f0       	brlt	.+36     	; 0xd68 <__fpcmp_parts_f+0x88>
     d44:	28 17       	cp	r18, r24
     d46:	39 07       	cpc	r19, r25
     d48:	bc f0       	brlt	.+46     	; 0xd78 <__fpcmp_parts_f+0x98>
     d4a:	14 96       	adiw	r26, 0x04	; 4
     d4c:	8d 91       	ld	r24, X+
     d4e:	9d 91       	ld	r25, X+
     d50:	0d 90       	ld	r0, X+
     d52:	bc 91       	ld	r27, X
     d54:	a0 2d       	mov	r26, r0
     d56:	24 81       	ldd	r18, Z+4	; 0x04
     d58:	35 81       	ldd	r19, Z+5	; 0x05
     d5a:	46 81       	ldd	r20, Z+6	; 0x06
     d5c:	57 81       	ldd	r21, Z+7	; 0x07
     d5e:	28 17       	cp	r18, r24
     d60:	39 07       	cpc	r19, r25
     d62:	4a 07       	cpc	r20, r26
     d64:	5b 07       	cpc	r21, r27
     d66:	18 f4       	brcc	.+6      	; 0xd6e <__fpcmp_parts_f+0x8e>
     d68:	11 23       	and	r17, r17
     d6a:	41 f0       	breq	.+16     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d6c:	0a c0       	rjmp	.+20     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	a4 07       	cpc	r26, r20
     d74:	b5 07       	cpc	r27, r21
     d76:	40 f4       	brcc	.+16     	; 0xd88 <__fpcmp_parts_f+0xa8>
     d78:	11 23       	and	r17, r17
     d7a:	19 f0       	breq	.+6      	; 0xd82 <__fpcmp_parts_f+0xa2>
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <__fpcmp_parts_f+0xac>
     d82:	6f ef       	ldi	r22, 0xFF	; 255
     d84:	7f ef       	ldi	r23, 0xFF	; 255
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <__fpcmp_parts_f+0xac>
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	cb 01       	movw	r24, r22
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <TIMERS_vInit>:
#include "TIMERS_interface.h"
#include "TIMERS_private.h"
#include "TIMERS_config.h"

void TIMERS_vInit(void)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62


	#if TIMER1_ENABLE == ENABLED
		#if TIMER1_MODE == TIMER1_NORMAL
				//1- Waveform Generation Mode
				CLEAR_BIT(TCCR1A, TCCR1A_WGM10);
     d9a:	af e4       	ldi	r26, 0x4F	; 79
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ef e4       	ldi	r30, 0x4F	; 79
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	8e 7f       	andi	r24, 0xFE	; 254
     da6:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, TCCR1A_WGM11);
     da8:	af e4       	ldi	r26, 0x4F	; 79
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ef e4       	ldi	r30, 0x4F	; 79
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8d 7f       	andi	r24, 0xFD	; 253
     db4:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B, TCCR1B_WGM12);
     db6:	ae e4       	ldi	r26, 0x4E	; 78
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	ee e4       	ldi	r30, 0x4E	; 78
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	87 7f       	andi	r24, 0xF7	; 247
     dc2:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B, TCCR1B_WGM13);
     dc4:	ae e4       	ldi	r26, 0x4E	; 78
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	ee e4       	ldi	r30, 0x4E	; 78
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	8f 7e       	andi	r24, 0xEF	; 239
     dd0:	8c 93       	st	X, r24
				 * 	TCCR1A &=~(0b00000011);
				 * 	TCCR1B &=~(0b00011000);
				 */

				//2- Compare Output Mode : No compare Output mode in normal mode
				CLEAR_BIT(TCCR1A, TCCR1A_COM1A0);
     dd2:	af e4       	ldi	r26, 0x4F	; 79
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	ef e4       	ldi	r30, 0x4F	; 79
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	8f 7b       	andi	r24, 0xBF	; 191
     dde:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, TCCR1A_COM1A1);
     de0:	af e4       	ldi	r26, 0x4F	; 79
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	ef e4       	ldi	r30, 0x4F	; 79
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	8f 77       	andi	r24, 0x7F	; 127
     dec:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, TCCR1A_COM1B0);
     dee:	af e4       	ldi	r26, 0x4F	; 79
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	ef e4       	ldi	r30, 0x4F	; 79
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8f 7e       	andi	r24, 0xEF	; 239
     dfa:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A, TCCR1A_COM1B1);
     dfc:	af e4       	ldi	r26, 0x4F	; 79
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	ef e4       	ldi	r30, 0x4F	; 79
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	8f 7d       	andi	r24, 0xDF	; 223
     e08:	8c 93       	st	X, r24
				// OR By masking: TCCR1A &=~(0b11110000);

				//3- Preload
				TCNT1 = TIMER1_PRELOAD;
     e0a:	ec e4       	ldi	r30, 0x4C	; 76
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	11 82       	std	Z+1, r1	; 0x01
     e10:	10 82       	st	Z, r1
				//4- Interrupt Enable/Disable
				#if TIMER1_INTERRUPT_ENABLE == ENABLED
					SET_BIT(TIMSK, TIMSK_TOIE1);
				#elif TIMER1_INTERRUPT_ENABLE == DISABLED
					CLEAR_BIT(TIMSK, TIMSK_TOIE1);
     e12:	a9 e5       	ldi	r26, 0x59	; 89
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e9 e5       	ldi	r30, 0x59	; 89
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	8b 7f       	andi	r24, 0xFB	; 251
     e1e:	8c 93       	st	X, r24
				//TODO
			#endif

	#endif

}
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <TIMERS_vSetBusyWait_sync>:

void TIMERS_vSetBusyWait_sync(TIMER_TYPE_t TimerId, u32 Copy_u32Ticks)
{
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <TIMERS_vSetBusyWait_sync+0x6>
     e2c:	0f 92       	push	r0
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	89 83       	std	Y+1, r24	; 0x01
     e34:	7b 83       	std	Y+3, r23	; 0x03
     e36:	6a 83       	std	Y+2, r22	; 0x02
	//polling
}
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <TIMERS_vStartTimer>:

void TIMERS_vStartTimer(TIMER_TYPE_t TimerId)
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	0f 92       	push	r0
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	89 83       	std	Y+1, r24	; 0x01
	switch (TimerId)
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	71 f4       	brne	.+28     	; 0xe76 <TIMERS_vStartTimer+0x32>
	{
		case TIMER0:
			TCCR0 &= ~(0b111);
     e5a:	a3 e5       	ldi	r26, 0x53	; 83
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e3 e5       	ldi	r30, 0x53	; 83
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	88 7f       	andi	r24, 0xF8	; 248
     e66:	8c 93       	st	X, r24
			TCCR0 |= TIMER0_PRESCALER;
     e68:	a3 e5       	ldi	r26, 0x53	; 83
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e3 e5       	ldi	r30, 0x53	; 83
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	82 60       	ori	r24, 0x02	; 2
     e74:	8c 93       	st	X, r24
			break;
		default:
			/*  Error : Invalid TIMER_TYPE_t */
			break;
	}
}
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <TIMERS_vStopTimer>:

void TIMERS_vStopTimer(TIMER_TYPE_t TimerId)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	0f 92       	push	r0
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	89 83       	std	Y+1, r24	; 0x01
	switch (TimerId)
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	88 2f       	mov	r24, r24
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	69 f4       	brne	.+26     	; 0xeae <TIMERS_vStopTimer+0x30>
	{
		case TIMER0:
			TCCR0 &= ~(0b111);
     e94:	a3 e5       	ldi	r26, 0x53	; 83
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e3 e5       	ldi	r30, 0x53	; 83
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	88 7f       	andi	r24, 0xF8	; 248
     ea0:	8c 93       	st	X, r24
			TCCR0 |= PS_NOCLK;
     ea2:	a3 e5       	ldi	r26, 0x53	; 83
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e3 e5       	ldi	r30, 0x53	; 83
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8c 93       	st	X, r24
			break;
	}



}
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <TIMERS_vSetCallback>:
static void (*G_TIMER1_OVF_CallBack)(void);
static void (*G_TIMER1_COMA_CallBack)(void);
static void (*G_TIMER1_COMB_CallBack)(void);

void TIMERS_vSetCallback(TIMER_TYPE_t TimerId,void (*Copy_Fptr)(void))
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	00 d0       	rcall	.+0      	; 0xebc <TIMERS_vSetCallback+0x6>
     ebc:	0f 92       	push	r0
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	7b 83       	std	Y+3, r23	; 0x03
     ec6:	6a 83       	std	Y+2, r22	; 0x02
	switch (TimerId)
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	88 2f       	mov	r24, r24
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	49 f4       	brne	.+18     	; 0xee4 <TIMERS_vSetCallback+0x2e>
	{
		case TIMER0:
			if(TimerId == TIMER0)
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	31 f4       	brne	.+12     	; 0xee4 <TIMERS_vSetCallback+0x2e>
			{
				#if TIMER0_MODE == TIMER0_NORMAL
					G_TIMER0_OVF_CallBack = Copy_Fptr;
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	9b 81       	ldd	r25, Y+3	; 0x03
     edc:	90 93 ef 01 	sts	0x01EF, r25
     ee0:	80 93 ee 01 	sts	0x01EE, r24
			break;
		default:
			/*  Error : Invalid TIMER_TYPE_t */
			break;
		}
}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <TIMERS_vSetPreloadValue>:


void TIMERS_vSetPreloadValue(TIMER_TYPE_t TimerId, u16 Copy_u16Preload)
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <TIMERS_vSetPreloadValue+0x6>
     ef6:	0f 92       	push	r0
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	89 83       	std	Y+1, r24	; 0x01
     efe:	7b 83       	std	Y+3, r23	; 0x03
     f00:	6a 83       	std	Y+2, r22	; 0x02
	switch (TimerId)
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	88 2f       	mov	r24, r24
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	21 f4       	brne	.+8      	; 0xf14 <TIMERS_vSetPreloadValue+0x24>
	{
		case TIMER0:
			TCNT0 = Copy_u16Preload;
     f0c:	e2 e5       	ldi	r30, 0x52	; 82
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	80 83       	st	Z, r24
			break;
		default:
			/*  Error : Invalid TIMER_TYPE_t */
			break;
	}
}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <TIMERS_vSetCompareMatchValue>:

void TIMERS_vSetCompareMatchValue(TIMER_TYPE_t TimerId, TIMER1_Channel_t Copy_u16OcrChannel, u16 Copy_u16OcrVal)
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	28 97       	sbiw	r28, 0x08	; 8
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	6a 83       	std	Y+2, r22	; 0x02
     f38:	5c 83       	std	Y+4, r21	; 0x04
     f3a:	4b 83       	std	Y+3, r20	; 0x03
	switch (TimerId)
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	38 87       	std	Y+8, r19	; 0x08
     f44:	2f 83       	std	Y+7, r18	; 0x07
     f46:	8f 81       	ldd	r24, Y+7	; 0x07
     f48:	98 85       	ldd	r25, Y+8	; 0x08
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	31 f0       	breq	.+12     	; 0xf5a <TIMERS_vSetCompareMatchValue+0x3a>
     f4e:	2f 81       	ldd	r18, Y+7	; 0x07
     f50:	38 85       	ldd	r19, Y+8	; 0x08
     f52:	21 30       	cpi	r18, 0x01	; 1
     f54:	31 05       	cpc	r19, r1
     f56:	31 f0       	breq	.+12     	; 0xf64 <TIMERS_vSetCompareMatchValue+0x44>
     f58:	21 c0       	rjmp	.+66     	; 0xf9c <TIMERS_vSetCompareMatchValue+0x7c>
	{
		case TIMER0:
			OCR0 = Copy_u16OcrVal;
     f5a:	ec e5       	ldi	r30, 0x5C	; 92
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	80 83       	st	Z, r24
     f62:	1c c0       	rjmp	.+56     	; 0xf9c <TIMERS_vSetCompareMatchValue+0x7c>
			break;

		case TIMER1:
			switch (Copy_u16OcrChannel)
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	3e 83       	std	Y+6, r19	; 0x06
     f6c:	2d 83       	std	Y+5, r18	; 0x05
     f6e:	8d 81       	ldd	r24, Y+5	; 0x05
     f70:	9e 81       	ldd	r25, Y+6	; 0x06
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	31 f0       	breq	.+12     	; 0xf82 <TIMERS_vSetCompareMatchValue+0x62>
     f76:	2d 81       	ldd	r18, Y+5	; 0x05
     f78:	3e 81       	ldd	r19, Y+6	; 0x06
     f7a:	21 30       	cpi	r18, 0x01	; 1
     f7c:	31 05       	cpc	r19, r1
     f7e:	41 f0       	breq	.+16     	; 0xf90 <TIMERS_vSetCompareMatchValue+0x70>
     f80:	0d c0       	rjmp	.+26     	; 0xf9c <TIMERS_vSetCompareMatchValue+0x7c>
			{
				case Channel_A:
					OCR1A = Copy_u16OcrVal;
     f82:	ea e4       	ldi	r30, 0x4A	; 74
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	9c 81       	ldd	r25, Y+4	; 0x04
     f8a:	91 83       	std	Z+1, r25	; 0x01
     f8c:	80 83       	st	Z, r24
     f8e:	06 c0       	rjmp	.+12     	; 0xf9c <TIMERS_vSetCompareMatchValue+0x7c>
					break;
				case Channel_B:
					OCR1B = Copy_u16OcrVal;
     f90:	e8 e4       	ldi	r30, 0x48	; 72
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	9c 81       	ldd	r25, Y+4	; 0x04
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24
			break;
		default:
			/*  Error : Invalid TIMER_TYPE_t */
			break;
	}
}
     f9c:	28 96       	adiw	r28, 0x08	; 8
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <__vector_7>:
void __vector_10(void) __attribute__((signal)); // TIMER0 COMP
void __vector_11(void) __attribute__((signal)); // TIMER0 OVF


void __vector_7(void)
{
     fae:	1f 92       	push	r1
     fb0:	0f 92       	push	r0
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	0f 92       	push	r0
     fb6:	11 24       	eor	r1, r1
     fb8:	2f 93       	push	r18
     fba:	3f 93       	push	r19
     fbc:	4f 93       	push	r20
     fbe:	5f 93       	push	r21
     fc0:	6f 93       	push	r22
     fc2:	7f 93       	push	r23
     fc4:	8f 93       	push	r24
     fc6:	9f 93       	push	r25
     fc8:	af 93       	push	r26
     fca:	bf 93       	push	r27
     fcc:	ef 93       	push	r30
     fce:	ff 93       	push	r31
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
	if(G_TIMER1_COMA_CallBack != NULL)
     fd8:	80 91 f4 01 	lds	r24, 0x01F4
     fdc:	90 91 f5 01 	lds	r25, 0x01F5
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	29 f0       	breq	.+10     	; 0xfee <__vector_7+0x40>
	{
		G_TIMER1_COMA_CallBack();
     fe4:	e0 91 f4 01 	lds	r30, 0x01F4
     fe8:	f0 91 f5 01 	lds	r31, 0x01F5
     fec:	09 95       	icall
	}
}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	ff 91       	pop	r31
     ff4:	ef 91       	pop	r30
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	7f 91       	pop	r23
    1000:	6f 91       	pop	r22
    1002:	5f 91       	pop	r21
    1004:	4f 91       	pop	r20
    1006:	3f 91       	pop	r19
    1008:	2f 91       	pop	r18
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	0f 90       	pop	r0
    1010:	1f 90       	pop	r1
    1012:	18 95       	reti

00001014 <__vector_8>:

void __vector_8(void)
{
    1014:	1f 92       	push	r1
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	0f 92       	push	r0
    101c:	11 24       	eor	r1, r1
    101e:	2f 93       	push	r18
    1020:	3f 93       	push	r19
    1022:	4f 93       	push	r20
    1024:	5f 93       	push	r21
    1026:	6f 93       	push	r22
    1028:	7f 93       	push	r23
    102a:	8f 93       	push	r24
    102c:	9f 93       	push	r25
    102e:	af 93       	push	r26
    1030:	bf 93       	push	r27
    1032:	ef 93       	push	r30
    1034:	ff 93       	push	r31
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
	if(G_TIMER1_COMB_CallBack != NULL)
    103e:	80 91 f6 01 	lds	r24, 0x01F6
    1042:	90 91 f7 01 	lds	r25, 0x01F7
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	29 f0       	breq	.+10     	; 0x1054 <__vector_8+0x40>
	{
		G_TIMER1_COMB_CallBack();
    104a:	e0 91 f6 01 	lds	r30, 0x01F6
    104e:	f0 91 f7 01 	lds	r31, 0x01F7
    1052:	09 95       	icall
	}
}
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	ff 91       	pop	r31
    105a:	ef 91       	pop	r30
    105c:	bf 91       	pop	r27
    105e:	af 91       	pop	r26
    1060:	9f 91       	pop	r25
    1062:	8f 91       	pop	r24
    1064:	7f 91       	pop	r23
    1066:	6f 91       	pop	r22
    1068:	5f 91       	pop	r21
    106a:	4f 91       	pop	r20
    106c:	3f 91       	pop	r19
    106e:	2f 91       	pop	r18
    1070:	0f 90       	pop	r0
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	0f 90       	pop	r0
    1076:	1f 90       	pop	r1
    1078:	18 95       	reti

0000107a <__vector_9>:

void __vector_9(void)
{
    107a:	1f 92       	push	r1
    107c:	0f 92       	push	r0
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	0f 92       	push	r0
    1082:	11 24       	eor	r1, r1
    1084:	2f 93       	push	r18
    1086:	3f 93       	push	r19
    1088:	4f 93       	push	r20
    108a:	5f 93       	push	r21
    108c:	6f 93       	push	r22
    108e:	7f 93       	push	r23
    1090:	8f 93       	push	r24
    1092:	9f 93       	push	r25
    1094:	af 93       	push	r26
    1096:	bf 93       	push	r27
    1098:	ef 93       	push	r30
    109a:	ff 93       	push	r31
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	if(G_TIMER1_OVF_CallBack != NULL)
    10a4:	80 91 f2 01 	lds	r24, 0x01F2
    10a8:	90 91 f3 01 	lds	r25, 0x01F3
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	29 f0       	breq	.+10     	; 0x10ba <__vector_9+0x40>
	{
		G_TIMER1_OVF_CallBack();
    10b0:	e0 91 f2 01 	lds	r30, 0x01F2
    10b4:	f0 91 f3 01 	lds	r31, 0x01F3
    10b8:	09 95       	icall
	}
}
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	ff 91       	pop	r31
    10c0:	ef 91       	pop	r30
    10c2:	bf 91       	pop	r27
    10c4:	af 91       	pop	r26
    10c6:	9f 91       	pop	r25
    10c8:	8f 91       	pop	r24
    10ca:	7f 91       	pop	r23
    10cc:	6f 91       	pop	r22
    10ce:	5f 91       	pop	r21
    10d0:	4f 91       	pop	r20
    10d2:	3f 91       	pop	r19
    10d4:	2f 91       	pop	r18
    10d6:	0f 90       	pop	r0
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	0f 90       	pop	r0
    10dc:	1f 90       	pop	r1
    10de:	18 95       	reti

000010e0 <__vector_10>:

void __vector_10(void)
{
    10e0:	1f 92       	push	r1
    10e2:	0f 92       	push	r0
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	0f 92       	push	r0
    10e8:	11 24       	eor	r1, r1
    10ea:	2f 93       	push	r18
    10ec:	3f 93       	push	r19
    10ee:	4f 93       	push	r20
    10f0:	5f 93       	push	r21
    10f2:	6f 93       	push	r22
    10f4:	7f 93       	push	r23
    10f6:	8f 93       	push	r24
    10f8:	9f 93       	push	r25
    10fa:	af 93       	push	r26
    10fc:	bf 93       	push	r27
    10fe:	ef 93       	push	r30
    1100:	ff 93       	push	r31
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
	if(G_TIMER0_COM_CallBack != NULL)
    110a:	80 91 f0 01 	lds	r24, 0x01F0
    110e:	90 91 f1 01 	lds	r25, 0x01F1
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	29 f0       	breq	.+10     	; 0x1120 <__vector_10+0x40>
	{
		G_TIMER0_COM_CallBack();
    1116:	e0 91 f0 01 	lds	r30, 0x01F0
    111a:	f0 91 f1 01 	lds	r31, 0x01F1
    111e:	09 95       	icall
	}
}
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	ff 91       	pop	r31
    1126:	ef 91       	pop	r30
    1128:	bf 91       	pop	r27
    112a:	af 91       	pop	r26
    112c:	9f 91       	pop	r25
    112e:	8f 91       	pop	r24
    1130:	7f 91       	pop	r23
    1132:	6f 91       	pop	r22
    1134:	5f 91       	pop	r21
    1136:	4f 91       	pop	r20
    1138:	3f 91       	pop	r19
    113a:	2f 91       	pop	r18
    113c:	0f 90       	pop	r0
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	0f 90       	pop	r0
    1142:	1f 90       	pop	r1
    1144:	18 95       	reti

00001146 <__vector_11>:

void __vector_11(void)
{
    1146:	1f 92       	push	r1
    1148:	0f 92       	push	r0
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	0f 92       	push	r0
    114e:	11 24       	eor	r1, r1
    1150:	2f 93       	push	r18
    1152:	3f 93       	push	r19
    1154:	4f 93       	push	r20
    1156:	5f 93       	push	r21
    1158:	6f 93       	push	r22
    115a:	7f 93       	push	r23
    115c:	8f 93       	push	r24
    115e:	9f 93       	push	r25
    1160:	af 93       	push	r26
    1162:	bf 93       	push	r27
    1164:	ef 93       	push	r30
    1166:	ff 93       	push	r31
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
	if(G_TIMER0_OVF_CallBack != NULL)
    1170:	80 91 ee 01 	lds	r24, 0x01EE
    1174:	90 91 ef 01 	lds	r25, 0x01EF
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	29 f0       	breq	.+10     	; 0x1186 <__vector_11+0x40>
	{
		G_TIMER0_OVF_CallBack();
    117c:	e0 91 ee 01 	lds	r30, 0x01EE
    1180:	f0 91 ef 01 	lds	r31, 0x01EF
    1184:	09 95       	icall
	}
}
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	ff 91       	pop	r31
    118c:	ef 91       	pop	r30
    118e:	bf 91       	pop	r27
    1190:	af 91       	pop	r26
    1192:	9f 91       	pop	r25
    1194:	8f 91       	pop	r24
    1196:	7f 91       	pop	r23
    1198:	6f 91       	pop	r22
    119a:	5f 91       	pop	r21
    119c:	4f 91       	pop	r20
    119e:	3f 91       	pop	r19
    11a0:	2f 91       	pop	r18
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <GPIO_vSetPortDirection>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"


void GPIO_vSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <GPIO_vSetPortDirection+0x6>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <GPIO_vSetPortDirection+0x8>
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	3c 83       	std	Y+4, r19	; 0x04
    11c4:	2b 83       	std	Y+3, r18	; 0x03
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	82 30       	cpi	r24, 0x02	; 2
    11cc:	91 05       	cpc	r25, r1
    11ce:	d9 f0       	breq	.+54     	; 0x1206 <GPIO_vSetPortDirection+0x5a>
    11d0:	2b 81       	ldd	r18, Y+3	; 0x03
    11d2:	3c 81       	ldd	r19, Y+4	; 0x04
    11d4:	23 30       	cpi	r18, 0x03	; 3
    11d6:	31 05       	cpc	r19, r1
    11d8:	34 f4       	brge	.+12     	; 0x11e6 <GPIO_vSetPortDirection+0x3a>
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	91 05       	cpc	r25, r1
    11e2:	61 f0       	breq	.+24     	; 0x11fc <GPIO_vSetPortDirection+0x50>
    11e4:	1e c0       	rjmp	.+60     	; 0x1222 <GPIO_vSetPortDirection+0x76>
    11e6:	2b 81       	ldd	r18, Y+3	; 0x03
    11e8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ea:	23 30       	cpi	r18, 0x03	; 3
    11ec:	31 05       	cpc	r19, r1
    11ee:	81 f0       	breq	.+32     	; 0x1210 <GPIO_vSetPortDirection+0x64>
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	84 30       	cpi	r24, 0x04	; 4
    11f6:	91 05       	cpc	r25, r1
    11f8:	81 f0       	breq	.+32     	; 0x121a <GPIO_vSetPortDirection+0x6e>
    11fa:	13 c0       	rjmp	.+38     	; 0x1222 <GPIO_vSetPortDirection+0x76>
	{
	case GPIO_PORTA:
		DDRA = Copy_u8Direction;
    11fc:	ea e3       	ldi	r30, 0x3A	; 58
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	80 83       	st	Z, r24
    1204:	0e c0       	rjmp	.+28     	; 0x1222 <GPIO_vSetPortDirection+0x76>
		break;
	case GPIO_PORTB:
		DDRB = Copy_u8Direction;
    1206:	e7 e3       	ldi	r30, 0x37	; 55
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	80 83       	st	Z, r24
    120e:	09 c0       	rjmp	.+18     	; 0x1222 <GPIO_vSetPortDirection+0x76>
		break;
	case GPIO_PORTC:
		DDRC = Copy_u8Direction;
    1210:	e4 e3       	ldi	r30, 0x34	; 52
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	80 83       	st	Z, r24
    1218:	04 c0       	rjmp	.+8      	; 0x1222 <GPIO_vSetPortDirection+0x76>
		break;
	case GPIO_PORTD:
		DDRD = Copy_u8Direction;
    121a:	e1 e3       	ldi	r30, 0x31	; 49
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	80 83       	st	Z, r24
		break;
	default:
		/* Wrong GPIO port */
		break;
	}
}
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <GPIO_vSetPinDirection>:

void GPIO_vSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	27 97       	sbiw	r28, 0x07	; 7
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	6a 83       	std	Y+2, r22	; 0x02
    1248:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin <= PIN7)
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	88 30       	cpi	r24, 0x08	; 8
    124e:	08 f0       	brcs	.+2      	; 0x1252 <GPIO_vSetPinDirection+0x22>
    1250:	ec c0       	rjmp	.+472    	; 0x142a <GPIO_vSetPinDirection+0x1fa>
	{
		if(Copy_u8Direction == OUTPUT_PIN)
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	09 f0       	breq	.+2      	; 0x125a <GPIO_vSetPinDirection+0x2a>
    1258:	70 c0       	rjmp	.+224    	; 0x133a <GPIO_vSetPinDirection+0x10a>
		{
			switch(Copy_u8Port)
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	3f 83       	std	Y+7, r19	; 0x07
    1262:	2e 83       	std	Y+6, r18	; 0x06
    1264:	8e 81       	ldd	r24, Y+6	; 0x06
    1266:	9f 81       	ldd	r25, Y+7	; 0x07
    1268:	82 30       	cpi	r24, 0x02	; 2
    126a:	91 05       	cpc	r25, r1
    126c:	51 f1       	breq	.+84     	; 0x12c2 <GPIO_vSetPinDirection+0x92>
    126e:	2e 81       	ldd	r18, Y+6	; 0x06
    1270:	3f 81       	ldd	r19, Y+7	; 0x07
    1272:	23 30       	cpi	r18, 0x03	; 3
    1274:	31 05       	cpc	r19, r1
    1276:	34 f4       	brge	.+12     	; 0x1284 <GPIO_vSetPinDirection+0x54>
    1278:	8e 81       	ldd	r24, Y+6	; 0x06
    127a:	9f 81       	ldd	r25, Y+7	; 0x07
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	91 05       	cpc	r25, r1
    1280:	61 f0       	breq	.+24     	; 0x129a <GPIO_vSetPinDirection+0x6a>
    1282:	d3 c0       	rjmp	.+422    	; 0x142a <GPIO_vSetPinDirection+0x1fa>
    1284:	2e 81       	ldd	r18, Y+6	; 0x06
    1286:	3f 81       	ldd	r19, Y+7	; 0x07
    1288:	23 30       	cpi	r18, 0x03	; 3
    128a:	31 05       	cpc	r19, r1
    128c:	71 f1       	breq	.+92     	; 0x12ea <GPIO_vSetPinDirection+0xba>
    128e:	8e 81       	ldd	r24, Y+6	; 0x06
    1290:	9f 81       	ldd	r25, Y+7	; 0x07
    1292:	84 30       	cpi	r24, 0x04	; 4
    1294:	91 05       	cpc	r25, r1
    1296:	e9 f1       	breq	.+122    	; 0x1312 <GPIO_vSetPinDirection+0xe2>
    1298:	c8 c0       	rjmp	.+400    	; 0x142a <GPIO_vSetPinDirection+0x1fa>
			{
			case GPIO_PORTA:
				SET_BIT(DDRA, Copy_u8Pin);
    129a:	aa e3       	ldi	r26, 0x3A	; 58
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	ea e3       	ldi	r30, 0x3A	; 58
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <GPIO_vSetPinDirection+0x88>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <GPIO_vSetPinDirection+0x84>
    12bc:	84 2b       	or	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	b4 c0       	rjmp	.+360    	; 0x142a <GPIO_vSetPinDirection+0x1fa>
				break;
			case GPIO_PORTB:
				SET_BIT(DDRB, Copy_u8Pin);
    12c2:	a7 e3       	ldi	r26, 0x37	; 55
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e7 e3       	ldi	r30, 0x37	; 55
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <GPIO_vSetPinDirection+0xb0>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <GPIO_vSetPinDirection+0xac>
    12e4:	84 2b       	or	r24, r20
    12e6:	8c 93       	st	X, r24
    12e8:	a0 c0       	rjmp	.+320    	; 0x142a <GPIO_vSetPinDirection+0x1fa>
				break;
			case GPIO_PORTC:
				SET_BIT(DDRC, Copy_u8Pin);
    12ea:	a4 e3       	ldi	r26, 0x34	; 52
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e4 e3       	ldi	r30, 0x34	; 52
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <GPIO_vSetPinDirection+0xd8>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <GPIO_vSetPinDirection+0xd4>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	8c c0       	rjmp	.+280    	; 0x142a <GPIO_vSetPinDirection+0x1fa>
				break;
			case GPIO_PORTD:
				SET_BIT(DDRD, Copy_u8Pin);
    1312:	a1 e3       	ldi	r26, 0x31	; 49
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e1 e3       	ldi	r30, 0x31	; 49
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <GPIO_vSetPinDirection+0x100>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <GPIO_vSetPinDirection+0xfc>
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	78 c0       	rjmp	.+240    	; 0x142a <GPIO_vSetPinDirection+0x1fa>
			default:
				/* Wrong GPIO port */
				break;
			}
		}
		else if(Copy_u8Direction == INPUT_PIN)
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	88 23       	and	r24, r24
    133e:	09 f0       	breq	.+2      	; 0x1342 <GPIO_vSetPinDirection+0x112>
    1340:	74 c0       	rjmp	.+232    	; 0x142a <GPIO_vSetPinDirection+0x1fa>
		{
			switch(Copy_u8Port)
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	3d 83       	std	Y+5, r19	; 0x05
    134a:	2c 83       	std	Y+4, r18	; 0x04
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9d 81       	ldd	r25, Y+5	; 0x05
    1350:	82 30       	cpi	r24, 0x02	; 2
    1352:	91 05       	cpc	r25, r1
    1354:	61 f1       	breq	.+88     	; 0x13ae <GPIO_vSetPinDirection+0x17e>
    1356:	2c 81       	ldd	r18, Y+4	; 0x04
    1358:	3d 81       	ldd	r19, Y+5	; 0x05
    135a:	23 30       	cpi	r18, 0x03	; 3
    135c:	31 05       	cpc	r19, r1
    135e:	34 f4       	brge	.+12     	; 0x136c <GPIO_vSetPinDirection+0x13c>
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	9d 81       	ldd	r25, Y+5	; 0x05
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	91 05       	cpc	r25, r1
    1368:	69 f0       	breq	.+26     	; 0x1384 <GPIO_vSetPinDirection+0x154>
    136a:	5f c0       	rjmp	.+190    	; 0x142a <GPIO_vSetPinDirection+0x1fa>
    136c:	2c 81       	ldd	r18, Y+4	; 0x04
    136e:	3d 81       	ldd	r19, Y+5	; 0x05
    1370:	23 30       	cpi	r18, 0x03	; 3
    1372:	31 05       	cpc	r19, r1
    1374:	89 f1       	breq	.+98     	; 0x13d8 <GPIO_vSetPinDirection+0x1a8>
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	9d 81       	ldd	r25, Y+5	; 0x05
    137a:	84 30       	cpi	r24, 0x04	; 4
    137c:	91 05       	cpc	r25, r1
    137e:	09 f4       	brne	.+2      	; 0x1382 <GPIO_vSetPinDirection+0x152>
    1380:	40 c0       	rjmp	.+128    	; 0x1402 <GPIO_vSetPinDirection+0x1d2>
    1382:	53 c0       	rjmp	.+166    	; 0x142a <GPIO_vSetPinDirection+0x1fa>
			{
			case GPIO_PORTA:
				CLEAR_BIT(DDRA, Copy_u8Pin);
    1384:	aa e3       	ldi	r26, 0x3A	; 58
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	ea e3       	ldi	r30, 0x3A	; 58
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <GPIO_vSetPinDirection+0x172>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <GPIO_vSetPinDirection+0x16e>
    13a6:	80 95       	com	r24
    13a8:	84 23       	and	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	3e c0       	rjmp	.+124    	; 0x142a <GPIO_vSetPinDirection+0x1fa>
				break;
			case GPIO_PORTB:
				CLEAR_BIT(DDRB, Copy_u8Pin);
    13ae:	a7 e3       	ldi	r26, 0x37	; 55
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e7 e3       	ldi	r30, 0x37	; 55
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <GPIO_vSetPinDirection+0x19c>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <GPIO_vSetPinDirection+0x198>
    13d0:	80 95       	com	r24
    13d2:	84 23       	and	r24, r20
    13d4:	8c 93       	st	X, r24
    13d6:	29 c0       	rjmp	.+82     	; 0x142a <GPIO_vSetPinDirection+0x1fa>
				break;
			case GPIO_PORTC:
				CLEAR_BIT(DDRC, Copy_u8Pin);
    13d8:	a4 e3       	ldi	r26, 0x34	; 52
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e4 e3       	ldi	r30, 0x34	; 52
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	48 2f       	mov	r20, r24
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 2e       	mov	r0, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <GPIO_vSetPinDirection+0x1c6>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	0a 94       	dec	r0
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <GPIO_vSetPinDirection+0x1c2>
    13fa:	80 95       	com	r24
    13fc:	84 23       	and	r24, r20
    13fe:	8c 93       	st	X, r24
    1400:	14 c0       	rjmp	.+40     	; 0x142a <GPIO_vSetPinDirection+0x1fa>
				break;
			case GPIO_PORTD:
				CLEAR_BIT(DDRD, Copy_u8Pin);
    1402:	a1 e3       	ldi	r26, 0x31	; 49
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e1 e3       	ldi	r30, 0x31	; 49
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <GPIO_vSetPinDirection+0x1f0>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <GPIO_vSetPinDirection+0x1ec>
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	8c 93       	st	X, r24
	else
	{
		/* You Enter Wrong PIN */
	}

}
    142a:	27 96       	adiw	r28, 0x07	; 7
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <GPIO_vSetPortValue>:


void GPIO_vSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <GPIO_vSetPortValue+0x6>
    1442:	00 d0       	rcall	.+0      	; 0x1444 <GPIO_vSetPortValue+0x8>
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	3c 83       	std	Y+4, r19	; 0x04
    1454:	2b 83       	std	Y+3, r18	; 0x03
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	9c 81       	ldd	r25, Y+4	; 0x04
    145a:	82 30       	cpi	r24, 0x02	; 2
    145c:	91 05       	cpc	r25, r1
    145e:	d9 f0       	breq	.+54     	; 0x1496 <GPIO_vSetPortValue+0x5a>
    1460:	2b 81       	ldd	r18, Y+3	; 0x03
    1462:	3c 81       	ldd	r19, Y+4	; 0x04
    1464:	23 30       	cpi	r18, 0x03	; 3
    1466:	31 05       	cpc	r19, r1
    1468:	34 f4       	brge	.+12     	; 0x1476 <GPIO_vSetPortValue+0x3a>
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	91 05       	cpc	r25, r1
    1472:	61 f0       	breq	.+24     	; 0x148c <GPIO_vSetPortValue+0x50>
    1474:	1e c0       	rjmp	.+60     	; 0x14b2 <GPIO_vSetPortValue+0x76>
    1476:	2b 81       	ldd	r18, Y+3	; 0x03
    1478:	3c 81       	ldd	r19, Y+4	; 0x04
    147a:	23 30       	cpi	r18, 0x03	; 3
    147c:	31 05       	cpc	r19, r1
    147e:	81 f0       	breq	.+32     	; 0x14a0 <GPIO_vSetPortValue+0x64>
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	84 30       	cpi	r24, 0x04	; 4
    1486:	91 05       	cpc	r25, r1
    1488:	81 f0       	breq	.+32     	; 0x14aa <GPIO_vSetPortValue+0x6e>
    148a:	13 c0       	rjmp	.+38     	; 0x14b2 <GPIO_vSetPortValue+0x76>
	{
		case GPIO_PORTA:
			PORTA = Copy_u8Value;
    148c:	eb e3       	ldi	r30, 0x3B	; 59
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	80 83       	st	Z, r24
    1494:	0e c0       	rjmp	.+28     	; 0x14b2 <GPIO_vSetPortValue+0x76>
			break;
		case GPIO_PORTB:
			PORTB = Copy_u8Value;
    1496:	e8 e3       	ldi	r30, 0x38	; 56
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	80 83       	st	Z, r24
    149e:	09 c0       	rjmp	.+18     	; 0x14b2 <GPIO_vSetPortValue+0x76>
			break;
		case GPIO_PORTC:
			PORTC = Copy_u8Value;
    14a0:	e5 e3       	ldi	r30, 0x35	; 53
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	80 83       	st	Z, r24
    14a8:	04 c0       	rjmp	.+8      	; 0x14b2 <GPIO_vSetPortValue+0x76>
			break;
		case GPIO_PORTD:
			PORTD = Copy_u8Value;
    14aa:	e2 e3       	ldi	r30, 0x32	; 50
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	80 83       	st	Z, r24
			break;
		default:
			/* Wrong GPIO port */
			break;
	}
}
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <GPIO_vSetPinValue>:

void GPIO_vSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	27 97       	sbiw	r28, 0x07	; 7
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	6a 83       	std	Y+2, r22	; 0x02
    14d8:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin <= PIN7)
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	88 30       	cpi	r24, 0x08	; 8
    14de:	08 f0       	brcs	.+2      	; 0x14e2 <GPIO_vSetPinValue+0x22>
    14e0:	ec c0       	rjmp	.+472    	; 0x16ba <GPIO_vSetPinValue+0x1fa>
	{
		if(Copy_u8Value == HIGH)
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	09 f0       	breq	.+2      	; 0x14ea <GPIO_vSetPinValue+0x2a>
    14e8:	70 c0       	rjmp	.+224    	; 0x15ca <GPIO_vSetPinValue+0x10a>
		{
			switch(Copy_u8Port)
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	3f 83       	std	Y+7, r19	; 0x07
    14f2:	2e 83       	std	Y+6, r18	; 0x06
    14f4:	8e 81       	ldd	r24, Y+6	; 0x06
    14f6:	9f 81       	ldd	r25, Y+7	; 0x07
    14f8:	82 30       	cpi	r24, 0x02	; 2
    14fa:	91 05       	cpc	r25, r1
    14fc:	51 f1       	breq	.+84     	; 0x1552 <GPIO_vSetPinValue+0x92>
    14fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1500:	3f 81       	ldd	r19, Y+7	; 0x07
    1502:	23 30       	cpi	r18, 0x03	; 3
    1504:	31 05       	cpc	r19, r1
    1506:	34 f4       	brge	.+12     	; 0x1514 <GPIO_vSetPinValue+0x54>
    1508:	8e 81       	ldd	r24, Y+6	; 0x06
    150a:	9f 81       	ldd	r25, Y+7	; 0x07
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	91 05       	cpc	r25, r1
    1510:	61 f0       	breq	.+24     	; 0x152a <GPIO_vSetPinValue+0x6a>
    1512:	d3 c0       	rjmp	.+422    	; 0x16ba <GPIO_vSetPinValue+0x1fa>
    1514:	2e 81       	ldd	r18, Y+6	; 0x06
    1516:	3f 81       	ldd	r19, Y+7	; 0x07
    1518:	23 30       	cpi	r18, 0x03	; 3
    151a:	31 05       	cpc	r19, r1
    151c:	71 f1       	breq	.+92     	; 0x157a <GPIO_vSetPinValue+0xba>
    151e:	8e 81       	ldd	r24, Y+6	; 0x06
    1520:	9f 81       	ldd	r25, Y+7	; 0x07
    1522:	84 30       	cpi	r24, 0x04	; 4
    1524:	91 05       	cpc	r25, r1
    1526:	e9 f1       	breq	.+122    	; 0x15a2 <GPIO_vSetPinValue+0xe2>
    1528:	c8 c0       	rjmp	.+400    	; 0x16ba <GPIO_vSetPinValue+0x1fa>
			{
			case GPIO_PORTA:
				SET_BIT(PORTA, Copy_u8Pin);
    152a:	ab e3       	ldi	r26, 0x3B	; 59
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	eb e3       	ldi	r30, 0x3B	; 59
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <GPIO_vSetPinValue+0x88>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <GPIO_vSetPinValue+0x84>
    154c:	84 2b       	or	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	b4 c0       	rjmp	.+360    	; 0x16ba <GPIO_vSetPinValue+0x1fa>
				break;
			case GPIO_PORTB:
				SET_BIT(PORTB, Copy_u8Pin);
    1552:	a8 e3       	ldi	r26, 0x38	; 56
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e8 e3       	ldi	r30, 0x38	; 56
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <GPIO_vSetPinValue+0xb0>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <GPIO_vSetPinValue+0xac>
    1574:	84 2b       	or	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	a0 c0       	rjmp	.+320    	; 0x16ba <GPIO_vSetPinValue+0x1fa>
				break;
			case GPIO_PORTC:
				SET_BIT(PORTC, Copy_u8Pin);
    157a:	a5 e3       	ldi	r26, 0x35	; 53
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e5 e3       	ldi	r30, 0x35	; 53
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <GPIO_vSetPinValue+0xd8>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <GPIO_vSetPinValue+0xd4>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	8c c0       	rjmp	.+280    	; 0x16ba <GPIO_vSetPinValue+0x1fa>
				break;
			case GPIO_PORTD:
				SET_BIT(PORTD, Copy_u8Pin);
    15a2:	a2 e3       	ldi	r26, 0x32	; 50
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e2 e3       	ldi	r30, 0x32	; 50
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <GPIO_vSetPinValue+0x100>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <GPIO_vSetPinValue+0xfc>
    15c4:	84 2b       	or	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	78 c0       	rjmp	.+240    	; 0x16ba <GPIO_vSetPinValue+0x1fa>
			default:
				/* You Enter Wrong GPIO port */
				break;
			}
		}
		else if(Copy_u8Value == LOW)
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	88 23       	and	r24, r24
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <GPIO_vSetPinValue+0x112>
    15d0:	74 c0       	rjmp	.+232    	; 0x16ba <GPIO_vSetPinValue+0x1fa>
		{
			switch(Copy_u8Port)
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	3d 83       	std	Y+5, r19	; 0x05
    15da:	2c 83       	std	Y+4, r18	; 0x04
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	9d 81       	ldd	r25, Y+5	; 0x05
    15e0:	82 30       	cpi	r24, 0x02	; 2
    15e2:	91 05       	cpc	r25, r1
    15e4:	61 f1       	breq	.+88     	; 0x163e <GPIO_vSetPinValue+0x17e>
    15e6:	2c 81       	ldd	r18, Y+4	; 0x04
    15e8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ea:	23 30       	cpi	r18, 0x03	; 3
    15ec:	31 05       	cpc	r19, r1
    15ee:	34 f4       	brge	.+12     	; 0x15fc <GPIO_vSetPinValue+0x13c>
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	9d 81       	ldd	r25, Y+5	; 0x05
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	91 05       	cpc	r25, r1
    15f8:	69 f0       	breq	.+26     	; 0x1614 <GPIO_vSetPinValue+0x154>
    15fa:	5f c0       	rjmp	.+190    	; 0x16ba <GPIO_vSetPinValue+0x1fa>
    15fc:	2c 81       	ldd	r18, Y+4	; 0x04
    15fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1600:	23 30       	cpi	r18, 0x03	; 3
    1602:	31 05       	cpc	r19, r1
    1604:	89 f1       	breq	.+98     	; 0x1668 <GPIO_vSetPinValue+0x1a8>
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	9d 81       	ldd	r25, Y+5	; 0x05
    160a:	84 30       	cpi	r24, 0x04	; 4
    160c:	91 05       	cpc	r25, r1
    160e:	09 f4       	brne	.+2      	; 0x1612 <GPIO_vSetPinValue+0x152>
    1610:	40 c0       	rjmp	.+128    	; 0x1692 <GPIO_vSetPinValue+0x1d2>
    1612:	53 c0       	rjmp	.+166    	; 0x16ba <GPIO_vSetPinValue+0x1fa>
			{
			case GPIO_PORTA:
				CLEAR_BIT(PORTA, Copy_u8Pin);
    1614:	ab e3       	ldi	r26, 0x3B	; 59
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	eb e3       	ldi	r30, 0x3B	; 59
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	48 2f       	mov	r20, r24
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 2e       	mov	r0, r18
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <GPIO_vSetPinValue+0x172>
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	0a 94       	dec	r0
    1634:	e2 f7       	brpl	.-8      	; 0x162e <GPIO_vSetPinValue+0x16e>
    1636:	80 95       	com	r24
    1638:	84 23       	and	r24, r20
    163a:	8c 93       	st	X, r24
    163c:	3e c0       	rjmp	.+124    	; 0x16ba <GPIO_vSetPinValue+0x1fa>
				break;
			case GPIO_PORTB:
				CLEAR_BIT(PORTB, Copy_u8Pin);
    163e:	a8 e3       	ldi	r26, 0x38	; 56
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e8 e3       	ldi	r30, 0x38	; 56
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	48 2f       	mov	r20, r24
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 2e       	mov	r0, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <GPIO_vSetPinValue+0x19c>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <GPIO_vSetPinValue+0x198>
    1660:	80 95       	com	r24
    1662:	84 23       	and	r24, r20
    1664:	8c 93       	st	X, r24
    1666:	29 c0       	rjmp	.+82     	; 0x16ba <GPIO_vSetPinValue+0x1fa>
				break;
			case GPIO_PORTC:
				CLEAR_BIT(PORTC, Copy_u8Pin);
    1668:	a5 e3       	ldi	r26, 0x35	; 53
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e5 e3       	ldi	r30, 0x35	; 53
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <GPIO_vSetPinValue+0x1c6>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <GPIO_vSetPinValue+0x1c2>
    168a:	80 95       	com	r24
    168c:	84 23       	and	r24, r20
    168e:	8c 93       	st	X, r24
    1690:	14 c0       	rjmp	.+40     	; 0x16ba <GPIO_vSetPinValue+0x1fa>
				break;
			case GPIO_PORTD:
				CLEAR_BIT(PORTD, Copy_u8Pin);
    1692:	a2 e3       	ldi	r26, 0x32	; 50
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e2 e3       	ldi	r30, 0x32	; 50
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <GPIO_vSetPinValue+0x1f0>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <GPIO_vSetPinValue+0x1ec>
    16b4:	80 95       	com	r24
    16b6:	84 23       	and	r24, r20
    16b8:	8c 93       	st	X, r24
	}
	else
	{
		/* You Enter Wrong PIN */
	}
}
    16ba:	27 96       	adiw	r28, 0x07	; 7
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <GPIO_u8GetPortValue>:


u8 GPIO_u8GetPortValue(u8 Copy_u8Port)
{
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <GPIO_u8GetPortValue+0x6>
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <GPIO_u8GetPortValue+0x8>
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Result = 0;
    16da:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	3c 83       	std	Y+4, r19	; 0x04
    16e4:	2b 83       	std	Y+3, r18	; 0x03
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	91 05       	cpc	r25, r1
    16ee:	d9 f0       	breq	.+54     	; 0x1726 <GPIO_u8GetPortValue+0x5a>
    16f0:	2b 81       	ldd	r18, Y+3	; 0x03
    16f2:	3c 81       	ldd	r19, Y+4	; 0x04
    16f4:	23 30       	cpi	r18, 0x03	; 3
    16f6:	31 05       	cpc	r19, r1
    16f8:	34 f4       	brge	.+12     	; 0x1706 <GPIO_u8GetPortValue+0x3a>
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	9c 81       	ldd	r25, Y+4	; 0x04
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	91 05       	cpc	r25, r1
    1702:	61 f0       	breq	.+24     	; 0x171c <GPIO_u8GetPortValue+0x50>
    1704:	1e c0       	rjmp	.+60     	; 0x1742 <GPIO_u8GetPortValue+0x76>
    1706:	2b 81       	ldd	r18, Y+3	; 0x03
    1708:	3c 81       	ldd	r19, Y+4	; 0x04
    170a:	23 30       	cpi	r18, 0x03	; 3
    170c:	31 05       	cpc	r19, r1
    170e:	81 f0       	breq	.+32     	; 0x1730 <GPIO_u8GetPortValue+0x64>
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	84 30       	cpi	r24, 0x04	; 4
    1716:	91 05       	cpc	r25, r1
    1718:	81 f0       	breq	.+32     	; 0x173a <GPIO_u8GetPortValue+0x6e>
    171a:	13 c0       	rjmp	.+38     	; 0x1742 <GPIO_u8GetPortValue+0x76>
	{
	case GPIO_PORTA:
		Local_u8Result = PINA;
    171c:	e9 e3       	ldi	r30, 0x39	; 57
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	0e c0       	rjmp	.+28     	; 0x1742 <GPIO_u8GetPortValue+0x76>
		break;
	case GPIO_PORTB:
		Local_u8Result = PINB;
    1726:	e6 e3       	ldi	r30, 0x36	; 54
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	09 c0       	rjmp	.+18     	; 0x1742 <GPIO_u8GetPortValue+0x76>
		break;
	case GPIO_PORTC:
		Local_u8Result = PINC;
    1730:	e3 e3       	ldi	r30, 0x33	; 51
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <GPIO_u8GetPortValue+0x76>
		break;
	case GPIO_PORTD:
		Local_u8Result = PIND;
    173a:	e0 e3       	ldi	r30, 0x30	; 48
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		/* You Enter Wrong GPIO port */
		break;
	}
	return Local_u8Result;
    1742:	89 81       	ldd	r24, Y+1	; 0x01
}
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <GPIO_u8GetPinValue>:


u8 GPIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	00 d0       	rcall	.+0      	; 0x1758 <GPIO_u8GetPinValue+0x6>
    1758:	00 d0       	rcall	.+0      	; 0x175a <GPIO_u8GetPinValue+0x8>
    175a:	0f 92       	push	r0
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	8a 83       	std	Y+2, r24	; 0x02
    1762:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
    1764:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= PIN7)
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	88 30       	cpi	r24, 0x08	; 8
    176a:	08 f0       	brcs	.+2      	; 0x176e <GPIO_u8GetPinValue+0x1c>
    176c:	67 c0       	rjmp	.+206    	; 0x183c <GPIO_u8GetPinValue+0xea>
	{
		switch (Copy_u8Port)
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	3d 83       	std	Y+5, r19	; 0x05
    1776:	2c 83       	std	Y+4, r18	; 0x04
    1778:	4c 81       	ldd	r20, Y+4	; 0x04
    177a:	5d 81       	ldd	r21, Y+5	; 0x05
    177c:	42 30       	cpi	r20, 0x02	; 2
    177e:	51 05       	cpc	r21, r1
    1780:	41 f1       	breq	.+80     	; 0x17d2 <GPIO_u8GetPinValue+0x80>
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	9d 81       	ldd	r25, Y+5	; 0x05
    1786:	83 30       	cpi	r24, 0x03	; 3
    1788:	91 05       	cpc	r25, r1
    178a:	34 f4       	brge	.+12     	; 0x1798 <GPIO_u8GetPinValue+0x46>
    178c:	2c 81       	ldd	r18, Y+4	; 0x04
    178e:	3d 81       	ldd	r19, Y+5	; 0x05
    1790:	21 30       	cpi	r18, 0x01	; 1
    1792:	31 05       	cpc	r19, r1
    1794:	61 f0       	breq	.+24     	; 0x17ae <GPIO_u8GetPinValue+0x5c>
    1796:	52 c0       	rjmp	.+164    	; 0x183c <GPIO_u8GetPinValue+0xea>
    1798:	4c 81       	ldd	r20, Y+4	; 0x04
    179a:	5d 81       	ldd	r21, Y+5	; 0x05
    179c:	43 30       	cpi	r20, 0x03	; 3
    179e:	51 05       	cpc	r21, r1
    17a0:	51 f1       	breq	.+84     	; 0x17f6 <GPIO_u8GetPinValue+0xa4>
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	9d 81       	ldd	r25, Y+5	; 0x05
    17a6:	84 30       	cpi	r24, 0x04	; 4
    17a8:	91 05       	cpc	r25, r1
    17aa:	b9 f1       	breq	.+110    	; 0x181a <GPIO_u8GetPinValue+0xc8>
    17ac:	47 c0       	rjmp	.+142    	; 0x183c <GPIO_u8GetPinValue+0xea>
		{
		case GPIO_PORTA:
			Local_u8Result = GET_BIT(PINA, Copy_u8Pin);
    17ae:	e9 e3       	ldi	r30, 0x39	; 57
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	88 2f       	mov	r24, r24
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a9 01       	movw	r20, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <GPIO_u8GetPinValue+0x74>
    17c2:	55 95       	asr	r21
    17c4:	47 95       	ror	r20
    17c6:	8a 95       	dec	r24
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <GPIO_u8GetPinValue+0x70>
    17ca:	ca 01       	movw	r24, r20
    17cc:	81 70       	andi	r24, 0x01	; 1
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	35 c0       	rjmp	.+106    	; 0x183c <GPIO_u8GetPinValue+0xea>
			break;
		case GPIO_PORTB:
			Local_u8Result = GET_BIT(PINB, Copy_u8Pin);
    17d2:	e6 e3       	ldi	r30, 0x36	; 54
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	88 2f       	mov	r24, r24
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	a9 01       	movw	r20, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <GPIO_u8GetPinValue+0x98>
    17e6:	55 95       	asr	r21
    17e8:	47 95       	ror	r20
    17ea:	8a 95       	dec	r24
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <GPIO_u8GetPinValue+0x94>
    17ee:	ca 01       	movw	r24, r20
    17f0:	81 70       	andi	r24, 0x01	; 1
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	23 c0       	rjmp	.+70     	; 0x183c <GPIO_u8GetPinValue+0xea>
			break;
		case GPIO_PORTC:
			Local_u8Result = GET_BIT(PINC, Copy_u8Pin);
    17f6:	e3 e3       	ldi	r30, 0x33	; 51
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	88 2f       	mov	r24, r24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a9 01       	movw	r20, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <GPIO_u8GetPinValue+0xbc>
    180a:	55 95       	asr	r21
    180c:	47 95       	ror	r20
    180e:	8a 95       	dec	r24
    1810:	e2 f7       	brpl	.-8      	; 0x180a <GPIO_u8GetPinValue+0xb8>
    1812:	ca 01       	movw	r24, r20
    1814:	81 70       	andi	r24, 0x01	; 1
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	11 c0       	rjmp	.+34     	; 0x183c <GPIO_u8GetPinValue+0xea>
			break;
		case GPIO_PORTD:
			Local_u8Result = GET_BIT(PIND, Copy_u8Pin);
    181a:	e0 e3       	ldi	r30, 0x30	; 48
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	88 2f       	mov	r24, r24
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	a9 01       	movw	r20, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <GPIO_u8GetPinValue+0xe0>
    182e:	55 95       	asr	r21
    1830:	47 95       	ror	r20
    1832:	8a 95       	dec	r24
    1834:	e2 f7       	brpl	.-8      	; 0x182e <GPIO_u8GetPinValue+0xdc>
    1836:	ca 01       	movw	r24, r20
    1838:	81 70       	andi	r24, 0x01	; 1
    183a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* You Enter Wrong PIN */
	}
	return Local_u8Result;
    183c:	89 81       	ldd	r24, Y+1	; 0x01
}
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <GIE_vEnableGIE>:
#include "../../LIB/BIT_MATH.h"

#include "GIE_private.h"

void GIE_vEnableGIE(void)
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_BIT_I);
    1856:	af e5       	ldi	r26, 0x5F	; 95
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	ef e5       	ldi	r30, 0x5F	; 95
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	80 68       	ori	r24, 0x80	; 128
    1862:	8c 93       	st	X, r24
}
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <GIE_vDisableGIE>:

void GIE_vDisableGIE(void)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG, SREG_BIT_I);
    1872:	af e5       	ldi	r26, 0x5F	; 95
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	ef e5       	ldi	r30, 0x5F	; 95
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	8f 77       	andi	r24, 0x7F	; 127
    187e:	8c 93       	st	X, r24
}
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <EXTI_vEnable>:
#include "../EXTI/EXTI_private.h"
#include "../EXTI/EXTI_config.h"


void EXTI_vEnable(EXTI_Source_t Copy_u8ExtIntNum, EXTI_Edge_Interrupt_Source_t Copy_u8EdgeIntSource)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	00 d0       	rcall	.+0      	; 0x188c <EXTI_vEnable+0x6>
    188c:	00 d0       	rcall	.+0      	; 0x188e <EXTI_vEnable+0x8>
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8ExtIntNum)
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	3c 83       	std	Y+4, r19	; 0x04
    189e:	2b 83       	std	Y+3, r18	; 0x03
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	9c 81       	ldd	r25, Y+4	; 0x04
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	91 05       	cpc	r25, r1
    18a8:	d1 f0       	breq	.+52     	; 0x18de <EXTI_vEnable+0x58>
    18aa:	2b 81       	ldd	r18, Y+3	; 0x03
    18ac:	3c 81       	ldd	r19, Y+4	; 0x04
    18ae:	22 30       	cpi	r18, 0x02	; 2
    18b0:	31 05       	cpc	r19, r1
    18b2:	31 f1       	breq	.+76     	; 0x1900 <EXTI_vEnable+0x7a>
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	91 f5       	brne	.+100    	; 0x1920 <EXTI_vEnable+0x9a>
	{
	case EXTI_INT0:
		//Input Direction
		GPIO_vSetPinDirection(GPIO_PORTD, PIN2, INPUT_PIN);
    18bc:	84 e0       	ldi	r24, 0x04	; 4
    18be:	62 e0       	ldi	r22, 0x02	; 2
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	0e 94 18 09 	call	0x1230	; 0x1230 <GPIO_vSetPinDirection>
		//Set the sense control
		EXTI_vSetSenseCtrl(EXTI_INT0, Copy_u8EdgeIntSource);
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	6a 81       	ldd	r22, Y+2	; 0x02
    18ca:	0e 94 ce 0c 	call	0x199c	; 0x199c <EXTI_vSetSenseCtrl>
		//Enable Interrupt
		SET_BIT(GICR, GICR_INT0);
    18ce:	ab e5       	ldi	r26, 0x5B	; 91
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	eb e5       	ldi	r30, 0x5B	; 91
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	80 64       	ori	r24, 0x40	; 64
    18da:	8c 93       	st	X, r24
    18dc:	21 c0       	rjmp	.+66     	; 0x1920 <EXTI_vEnable+0x9a>
		break;
	case EXTI_INT1:
		//Input Direction
		GPIO_vSetPinDirection(GPIO_PORTD, PIN3, INPUT_PIN);
    18de:	84 e0       	ldi	r24, 0x04	; 4
    18e0:	63 e0       	ldi	r22, 0x03	; 3
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	0e 94 18 09 	call	0x1230	; 0x1230 <GPIO_vSetPinDirection>
		//Set the sense control
		EXTI_vSetSenseCtrl(EXTI_INT1, Copy_u8EdgeIntSource);
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	6a 81       	ldd	r22, Y+2	; 0x02
    18ec:	0e 94 ce 0c 	call	0x199c	; 0x199c <EXTI_vSetSenseCtrl>
		//Enable Interrupt
		SET_BIT(GICR, GICR_INT1);
    18f0:	ab e5       	ldi	r26, 0x5B	; 91
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	eb e5       	ldi	r30, 0x5B	; 91
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	80 68       	ori	r24, 0x80	; 128
    18fc:	8c 93       	st	X, r24
    18fe:	10 c0       	rjmp	.+32     	; 0x1920 <EXTI_vEnable+0x9a>
		break;
	case EXTI_INT2:
		//Input Direction
		GPIO_vSetPinDirection(GPIO_PORTB, PIN2, INPUT_PIN);
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	62 e0       	ldi	r22, 0x02	; 2
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	0e 94 18 09 	call	0x1230	; 0x1230 <GPIO_vSetPinDirection>
		//Set the sense control
		EXTI_vSetSenseCtrl(EXTI_INT2, Copy_u8EdgeIntSource);
    190a:	82 e0       	ldi	r24, 0x02	; 2
    190c:	6a 81       	ldd	r22, Y+2	; 0x02
    190e:	0e 94 ce 0c 	call	0x199c	; 0x199c <EXTI_vSetSenseCtrl>
		//Enable Interrupt
		SET_BIT(GICR, GICR_INT2);
    1912:	ab e5       	ldi	r26, 0x5B	; 91
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	eb e5       	ldi	r30, 0x5B	; 91
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	80 62       	ori	r24, 0x20	; 32
    191e:	8c 93       	st	X, r24
		break;
	default:
		/* Error Invalid EXTI number */
		break;
	}
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <EXTI_vDisable>:

void EXTI_vDisable(EXTI_Source_t Copy_u8ExtIntNum)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <EXTI_vDisable+0x6>
    1934:	0f 92       	push	r0
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8ExtIntNum)
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	3b 83       	std	Y+3, r19	; 0x03
    1944:	2a 83       	std	Y+2, r18	; 0x02
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	9b 81       	ldd	r25, Y+3	; 0x03
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	91 05       	cpc	r25, r1
    194e:	89 f0       	breq	.+34     	; 0x1972 <EXTI_vDisable+0x44>
    1950:	2a 81       	ldd	r18, Y+2	; 0x02
    1952:	3b 81       	ldd	r19, Y+3	; 0x03
    1954:	22 30       	cpi	r18, 0x02	; 2
    1956:	31 05       	cpc	r19, r1
    1958:	a1 f0       	breq	.+40     	; 0x1982 <EXTI_vDisable+0x54>
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	9b 81       	ldd	r25, Y+3	; 0x03
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	b9 f4       	brne	.+46     	; 0x1990 <EXTI_vDisable+0x62>
	{
		case EXTI_INT0:
			CLEAR_BIT(GICR, GICR_INT0);
    1962:	ab e5       	ldi	r26, 0x5B	; 91
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	eb e5       	ldi	r30, 0x5B	; 91
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	8f 7b       	andi	r24, 0xBF	; 191
    196e:	8c 93       	st	X, r24
    1970:	0f c0       	rjmp	.+30     	; 0x1990 <EXTI_vDisable+0x62>
			break;
		case EXTI_INT1:
			CLEAR_BIT(GICR, GICR_INT1);
    1972:	ab e5       	ldi	r26, 0x5B	; 91
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	eb e5       	ldi	r30, 0x5B	; 91
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	8f 77       	andi	r24, 0x7F	; 127
    197e:	8c 93       	st	X, r24
    1980:	07 c0       	rjmp	.+14     	; 0x1990 <EXTI_vDisable+0x62>
			break;
		case EXTI_INT2:
			CLEAR_BIT(GICR, GICR_INT2);
    1982:	ab e5       	ldi	r26, 0x5B	; 91
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	eb e5       	ldi	r30, 0x5B	; 91
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	8f 7d       	andi	r24, 0xDF	; 223
    198e:	8c 93       	st	X, r24
			break;
		default:
			/* Error Invalid EXTI number */
			break;
	}
}
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <EXTI_vSetSenseCtrl>:




void EXTI_vSetSenseCtrl(EXTI_Source_t Copy_u8ExtIntNum, EXTI_Edge_Interrupt_Source_t Copy_u8EdgeIntSource)
{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	2a 97       	sbiw	r28, 0x0a	; 10
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8ExtIntNum)
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	3a 87       	std	Y+10, r19	; 0x0a
    19bc:	29 87       	std	Y+9, r18	; 0x09
    19be:	89 85       	ldd	r24, Y+9	; 0x09
    19c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	91 05       	cpc	r25, r1
    19c6:	09 f4       	brne	.+2      	; 0x19ca <EXTI_vSetSenseCtrl+0x2e>
    19c8:	66 c0       	rjmp	.+204    	; 0x1a96 <EXTI_vSetSenseCtrl+0xfa>
    19ca:	29 85       	ldd	r18, Y+9	; 0x09
    19cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    19ce:	22 30       	cpi	r18, 0x02	; 2
    19d0:	31 05       	cpc	r19, r1
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <EXTI_vSetSenseCtrl+0x3a>
    19d4:	bb c0       	rjmp	.+374    	; 0x1b4c <EXTI_vSetSenseCtrl+0x1b0>
    19d6:	89 85       	ldd	r24, Y+9	; 0x09
    19d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <EXTI_vSetSenseCtrl+0x44>
    19de:	d5 c0       	rjmp	.+426    	; 0x1b8a <EXTI_vSetSenseCtrl+0x1ee>
	{
	case EXTI_INT0:
		switch(Copy_u8EdgeIntSource)
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	38 87       	std	Y+8, r19	; 0x08
    19e8:	2f 83       	std	Y+7, r18	; 0x07
    19ea:	8f 81       	ldd	r24, Y+7	; 0x07
    19ec:	98 85       	ldd	r25, Y+8	; 0x08
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	91 05       	cpc	r25, r1
    19f2:	a9 f0       	breq	.+42     	; 0x1a1e <EXTI_vSetSenseCtrl+0x82>
    19f4:	2f 81       	ldd	r18, Y+7	; 0x07
    19f6:	38 85       	ldd	r19, Y+8	; 0x08
    19f8:	22 30       	cpi	r18, 0x02	; 2
    19fa:	31 05       	cpc	r19, r1
    19fc:	2c f4       	brge	.+10     	; 0x1a08 <EXTI_vSetSenseCtrl+0x6c>
    19fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1a00:	98 85       	ldd	r25, Y+8	; 0x08
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	c9 f1       	breq	.+114    	; 0x1a78 <EXTI_vSetSenseCtrl+0xdc>
    1a06:	c1 c0       	rjmp	.+386    	; 0x1b8a <EXTI_vSetSenseCtrl+0x1ee>
    1a08:	2f 81       	ldd	r18, Y+7	; 0x07
    1a0a:	38 85       	ldd	r19, Y+8	; 0x08
    1a0c:	22 30       	cpi	r18, 0x02	; 2
    1a0e:	31 05       	cpc	r19, r1
    1a10:	a9 f0       	breq	.+42     	; 0x1a3c <EXTI_vSetSenseCtrl+0xa0>
    1a12:	8f 81       	ldd	r24, Y+7	; 0x07
    1a14:	98 85       	ldd	r25, Y+8	; 0x08
    1a16:	83 30       	cpi	r24, 0x03	; 3
    1a18:	91 05       	cpc	r25, r1
    1a1a:	f9 f0       	breq	.+62     	; 0x1a5a <EXTI_vSetSenseCtrl+0xbe>
    1a1c:	b6 c0       	rjmp	.+364    	; 0x1b8a <EXTI_vSetSenseCtrl+0x1ee>
		{
		case EXTI_ON_CHANGE:
			CLEAR_BIT(MCUCR,MCUCR_ISC01);
    1a1e:	a5 e5       	ldi	r26, 0x55	; 85
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e5 e5       	ldi	r30, 0x55	; 85
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	8d 7f       	andi	r24, 0xFD	; 253
    1a2a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC00);
    1a2c:	a5 e5       	ldi	r26, 0x55	; 85
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e5 e5       	ldi	r30, 0x55	; 85
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	81 60       	ori	r24, 0x01	; 1
    1a38:	8c 93       	st	X, r24
    1a3a:	a7 c0       	rjmp	.+334    	; 0x1b8a <EXTI_vSetSenseCtrl+0x1ee>
			break;
		case EXTI_FALLING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC01);
    1a3c:	a5 e5       	ldi	r26, 0x55	; 85
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e5 e5       	ldi	r30, 0x55	; 85
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	82 60       	ori	r24, 0x02	; 2
    1a48:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,MCUCR_ISC00);
    1a4a:	a5 e5       	ldi	r26, 0x55	; 85
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e5 e5       	ldi	r30, 0x55	; 85
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	8e 7f       	andi	r24, 0xFE	; 254
    1a56:	8c 93       	st	X, r24
    1a58:	98 c0       	rjmp	.+304    	; 0x1b8a <EXTI_vSetSenseCtrl+0x1ee>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC01);
    1a5a:	a5 e5       	ldi	r26, 0x55	; 85
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e5 e5       	ldi	r30, 0x55	; 85
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	82 60       	ori	r24, 0x02	; 2
    1a66:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC00);
    1a68:	a5 e5       	ldi	r26, 0x55	; 85
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e5 e5       	ldi	r30, 0x55	; 85
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	81 60       	ori	r24, 0x01	; 1
    1a74:	8c 93       	st	X, r24
    1a76:	89 c0       	rjmp	.+274    	; 0x1b8a <EXTI_vSetSenseCtrl+0x1ee>
			break;
		case EXTI_LOW_LEVEL:
			CLEAR_BIT(MCUCR,MCUCR_ISC01);
    1a78:	a5 e5       	ldi	r26, 0x55	; 85
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e5 e5       	ldi	r30, 0x55	; 85
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	8d 7f       	andi	r24, 0xFD	; 253
    1a84:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,MCUCR_ISC00);
    1a86:	a5 e5       	ldi	r26, 0x55	; 85
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e5 e5       	ldi	r30, 0x55	; 85
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8e 7f       	andi	r24, 0xFE	; 254
    1a92:	8c 93       	st	X, r24
    1a94:	7a c0       	rjmp	.+244    	; 0x1b8a <EXTI_vSetSenseCtrl+0x1ee>
			/* Error Invalid EdgeIntSource */
			break;
		}
		break;
	case EXTI_INT1:
		switch(Copy_u8EdgeIntSource)
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	3e 83       	std	Y+6, r19	; 0x06
    1a9e:	2d 83       	std	Y+5, r18	; 0x05
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	a9 f0       	breq	.+42     	; 0x1ad4 <EXTI_vSetSenseCtrl+0x138>
    1aaa:	2d 81       	ldd	r18, Y+5	; 0x05
    1aac:	3e 81       	ldd	r19, Y+6	; 0x06
    1aae:	22 30       	cpi	r18, 0x02	; 2
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <EXTI_vSetSenseCtrl+0x122>
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	c9 f1       	breq	.+114    	; 0x1b2e <EXTI_vSetSenseCtrl+0x192>
    1abc:	66 c0       	rjmp	.+204    	; 0x1b8a <EXTI_vSetSenseCtrl+0x1ee>
    1abe:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac2:	22 30       	cpi	r18, 0x02	; 2
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	a9 f0       	breq	.+42     	; 0x1af2 <EXTI_vSetSenseCtrl+0x156>
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	9e 81       	ldd	r25, Y+6	; 0x06
    1acc:	83 30       	cpi	r24, 0x03	; 3
    1ace:	91 05       	cpc	r25, r1
    1ad0:	f9 f0       	breq	.+62     	; 0x1b10 <EXTI_vSetSenseCtrl+0x174>
    1ad2:	5b c0       	rjmp	.+182    	; 0x1b8a <EXTI_vSetSenseCtrl+0x1ee>
		{
		case EXTI_ON_CHANGE:
			CLEAR_BIT(MCUCR,MCUCR_ISC11);
    1ad4:	a5 e5       	ldi	r26, 0x55	; 85
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e5 e5       	ldi	r30, 0x55	; 85
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	87 7f       	andi	r24, 0xF7	; 247
    1ae0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC10);
    1ae2:	a5 e5       	ldi	r26, 0x55	; 85
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e5 e5       	ldi	r30, 0x55	; 85
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	84 60       	ori	r24, 0x04	; 4
    1aee:	8c 93       	st	X, r24
    1af0:	4c c0       	rjmp	.+152    	; 0x1b8a <EXTI_vSetSenseCtrl+0x1ee>

			break;
		case EXTI_FALLING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC11);
    1af2:	a5 e5       	ldi	r26, 0x55	; 85
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e5 e5       	ldi	r30, 0x55	; 85
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	88 60       	ori	r24, 0x08	; 8
    1afe:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,MCUCR_ISC10);
    1b00:	a5 e5       	ldi	r26, 0x55	; 85
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e5 e5       	ldi	r30, 0x55	; 85
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	8b 7f       	andi	r24, 0xFB	; 251
    1b0c:	8c 93       	st	X, r24
    1b0e:	3d c0       	rjmp	.+122    	; 0x1b8a <EXTI_vSetSenseCtrl+0x1ee>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC11);
    1b10:	a5 e5       	ldi	r26, 0x55	; 85
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e5 e5       	ldi	r30, 0x55	; 85
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	88 60       	ori	r24, 0x08	; 8
    1b1c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC10);
    1b1e:	a5 e5       	ldi	r26, 0x55	; 85
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e5 e5       	ldi	r30, 0x55	; 85
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	84 60       	ori	r24, 0x04	; 4
    1b2a:	8c 93       	st	X, r24
    1b2c:	2e c0       	rjmp	.+92     	; 0x1b8a <EXTI_vSetSenseCtrl+0x1ee>
			break;
		case EXTI_LOW_LEVEL:
			CLEAR_BIT(MCUCR,MCUCR_ISC11);
    1b2e:	a5 e5       	ldi	r26, 0x55	; 85
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e5 e5       	ldi	r30, 0x55	; 85
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	87 7f       	andi	r24, 0xF7	; 247
    1b3a:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,MCUCR_ISC10);
    1b3c:	a5 e5       	ldi	r26, 0x55	; 85
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e5 e5       	ldi	r30, 0x55	; 85
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	8b 7f       	andi	r24, 0xFB	; 251
    1b48:	8c 93       	st	X, r24
    1b4a:	1f c0       	rjmp	.+62     	; 0x1b8a <EXTI_vSetSenseCtrl+0x1ee>
			/* Error Invalid EdgeIntSource */
			break;
		}
		break;
	case EXTI_INT2:
		switch(Copy_u8EdgeIntSource)
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	3c 83       	std	Y+4, r19	; 0x04
    1b54:	2b 83       	std	Y+3, r18	; 0x03
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5a:	82 30       	cpi	r24, 0x02	; 2
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	31 f0       	breq	.+12     	; 0x1b6c <EXTI_vSetSenseCtrl+0x1d0>
    1b60:	2b 81       	ldd	r18, Y+3	; 0x03
    1b62:	3c 81       	ldd	r19, Y+4	; 0x04
    1b64:	23 30       	cpi	r18, 0x03	; 3
    1b66:	31 05       	cpc	r19, r1
    1b68:	49 f0       	breq	.+18     	; 0x1b7c <EXTI_vSetSenseCtrl+0x1e0>
    1b6a:	0f c0       	rjmp	.+30     	; 0x1b8a <EXTI_vSetSenseCtrl+0x1ee>
		{
		case EXTI_FALLING_EDGE:
			CLEAR_BIT(MCUCSR,MCUCSR_ISC2);
    1b6c:	a4 e5       	ldi	r26, 0x54	; 84
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e4 e5       	ldi	r30, 0x54	; 84
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	8f 7b       	andi	r24, 0xBF	; 191
    1b78:	8c 93       	st	X, r24
    1b7a:	07 c0       	rjmp	.+14     	; 0x1b8a <EXTI_vSetSenseCtrl+0x1ee>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCSR,MCUCSR_ISC2);
    1b7c:	a4 e5       	ldi	r26, 0x54	; 84
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e4 e5       	ldi	r30, 0x54	; 84
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	80 64       	ori	r24, 0x40	; 64
    1b88:	8c 93       	st	X, r24
		break;
	default:
		/* Error Invalid EXTI number */
		break;
	}
}
    1b8a:	2a 96       	adiw	r28, 0x0a	; 10
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <__vector_1>:
static void (*G_EXTI0_Callback)(void);
static void (*G_EXTI1_Callback)(void);
static void (*G_EXTI2_Callback)(void);

void __vector_1(void)
{
    1b9c:	1f 92       	push	r1
    1b9e:	0f 92       	push	r0
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	0f 92       	push	r0
    1ba4:	11 24       	eor	r1, r1
    1ba6:	2f 93       	push	r18
    1ba8:	3f 93       	push	r19
    1baa:	4f 93       	push	r20
    1bac:	5f 93       	push	r21
    1bae:	6f 93       	push	r22
    1bb0:	7f 93       	push	r23
    1bb2:	8f 93       	push	r24
    1bb4:	9f 93       	push	r25
    1bb6:	af 93       	push	r26
    1bb8:	bf 93       	push	r27
    1bba:	ef 93       	push	r30
    1bbc:	ff 93       	push	r31
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
	if(G_EXTI0_Callback != NULL)
    1bc6:	80 91 f8 01 	lds	r24, 0x01F8
    1bca:	90 91 f9 01 	lds	r25, 0x01F9
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	29 f0       	breq	.+10     	; 0x1bdc <__vector_1+0x40>
	{
		G_EXTI0_Callback();
    1bd2:	e0 91 f8 01 	lds	r30, 0x01F8
    1bd6:	f0 91 f9 01 	lds	r31, 0x01F9
    1bda:	09 95       	icall
	}
}
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	bf 91       	pop	r27
    1be6:	af 91       	pop	r26
    1be8:	9f 91       	pop	r25
    1bea:	8f 91       	pop	r24
    1bec:	7f 91       	pop	r23
    1bee:	6f 91       	pop	r22
    1bf0:	5f 91       	pop	r21
    1bf2:	4f 91       	pop	r20
    1bf4:	3f 91       	pop	r19
    1bf6:	2f 91       	pop	r18
    1bf8:	0f 90       	pop	r0
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	0f 90       	pop	r0
    1bfe:	1f 90       	pop	r1
    1c00:	18 95       	reti

00001c02 <__vector_2>:

void __vector_2(void)
{
    1c02:	1f 92       	push	r1
    1c04:	0f 92       	push	r0
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	0f 92       	push	r0
    1c0a:	11 24       	eor	r1, r1
    1c0c:	2f 93       	push	r18
    1c0e:	3f 93       	push	r19
    1c10:	4f 93       	push	r20
    1c12:	5f 93       	push	r21
    1c14:	6f 93       	push	r22
    1c16:	7f 93       	push	r23
    1c18:	8f 93       	push	r24
    1c1a:	9f 93       	push	r25
    1c1c:	af 93       	push	r26
    1c1e:	bf 93       	push	r27
    1c20:	ef 93       	push	r30
    1c22:	ff 93       	push	r31
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
	if(G_EXTI1_Callback != NULL)
    1c2c:	80 91 fa 01 	lds	r24, 0x01FA
    1c30:	90 91 fb 01 	lds	r25, 0x01FB
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	29 f0       	breq	.+10     	; 0x1c42 <__vector_2+0x40>
	{
		G_EXTI1_Callback();
    1c38:	e0 91 fa 01 	lds	r30, 0x01FA
    1c3c:	f0 91 fb 01 	lds	r31, 0x01FB
    1c40:	09 95       	icall
	}
}
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	ff 91       	pop	r31
    1c48:	ef 91       	pop	r30
    1c4a:	bf 91       	pop	r27
    1c4c:	af 91       	pop	r26
    1c4e:	9f 91       	pop	r25
    1c50:	8f 91       	pop	r24
    1c52:	7f 91       	pop	r23
    1c54:	6f 91       	pop	r22
    1c56:	5f 91       	pop	r21
    1c58:	4f 91       	pop	r20
    1c5a:	3f 91       	pop	r19
    1c5c:	2f 91       	pop	r18
    1c5e:	0f 90       	pop	r0
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	0f 90       	pop	r0
    1c64:	1f 90       	pop	r1
    1c66:	18 95       	reti

00001c68 <__vector_3>:

void __vector_3(void)
{
    1c68:	1f 92       	push	r1
    1c6a:	0f 92       	push	r0
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	0f 92       	push	r0
    1c70:	11 24       	eor	r1, r1
    1c72:	2f 93       	push	r18
    1c74:	3f 93       	push	r19
    1c76:	4f 93       	push	r20
    1c78:	5f 93       	push	r21
    1c7a:	6f 93       	push	r22
    1c7c:	7f 93       	push	r23
    1c7e:	8f 93       	push	r24
    1c80:	9f 93       	push	r25
    1c82:	af 93       	push	r26
    1c84:	bf 93       	push	r27
    1c86:	ef 93       	push	r30
    1c88:	ff 93       	push	r31
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
	if(G_EXTI2_Callback != NULL)
    1c92:	80 91 fc 01 	lds	r24, 0x01FC
    1c96:	90 91 fd 01 	lds	r25, 0x01FD
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	29 f0       	breq	.+10     	; 0x1ca8 <__vector_3+0x40>
	{
		G_EXTI2_Callback();
    1c9e:	e0 91 fc 01 	lds	r30, 0x01FC
    1ca2:	f0 91 fd 01 	lds	r31, 0x01FD
    1ca6:	09 95       	icall
	}
}
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	ff 91       	pop	r31
    1cae:	ef 91       	pop	r30
    1cb0:	bf 91       	pop	r27
    1cb2:	af 91       	pop	r26
    1cb4:	9f 91       	pop	r25
    1cb6:	8f 91       	pop	r24
    1cb8:	7f 91       	pop	r23
    1cba:	6f 91       	pop	r22
    1cbc:	5f 91       	pop	r21
    1cbe:	4f 91       	pop	r20
    1cc0:	3f 91       	pop	r19
    1cc2:	2f 91       	pop	r18
    1cc4:	0f 90       	pop	r0
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	0f 90       	pop	r0
    1cca:	1f 90       	pop	r1
    1ccc:	18 95       	reti

00001cce <EXTI_vSetCallBack>:

void EXTI_vSetCallBack(EXTI_Source_t Copy_u8ExtIntNum, void(*Copy_pfun)(void))
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <EXTI_vSetCallBack+0x6>
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <EXTI_vSetCallBack+0x8>
    1cd6:	0f 92       	push	r0
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	7b 83       	std	Y+3, r23	; 0x03
    1ce0:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8ExtIntNum) {
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	3d 83       	std	Y+5, r19	; 0x05
    1cea:	2c 83       	std	Y+4, r18	; 0x04
    1cec:	8c 81       	ldd	r24, Y+4	; 0x04
    1cee:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf0:	81 30       	cpi	r24, 0x01	; 1
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	81 f0       	breq	.+32     	; 0x1d16 <EXTI_vSetCallBack+0x48>
    1cf6:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf8:	3d 81       	ldd	r19, Y+5	; 0x05
    1cfa:	22 30       	cpi	r18, 0x02	; 2
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	91 f0       	breq	.+36     	; 0x1d24 <EXTI_vSetCallBack+0x56>
    1d00:	8c 81       	ldd	r24, Y+4	; 0x04
    1d02:	9d 81       	ldd	r25, Y+5	; 0x05
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	a1 f4       	brne	.+40     	; 0x1d30 <EXTI_vSetCallBack+0x62>
		case EXTI_INT0:
			G_EXTI0_Callback = Copy_pfun;
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0c:	90 93 f9 01 	sts	0x01F9, r25
    1d10:	80 93 f8 01 	sts	0x01F8, r24
    1d14:	0d c0       	rjmp	.+26     	; 0x1d30 <EXTI_vSetCallBack+0x62>
			break;
		case EXTI_INT1:
			G_EXTI1_Callback = Copy_pfun;
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1a:	90 93 fb 01 	sts	0x01FB, r25
    1d1e:	80 93 fa 01 	sts	0x01FA, r24
    1d22:	06 c0       	rjmp	.+12     	; 0x1d30 <EXTI_vSetCallBack+0x62>
			break;
		case EXTI_INT2:
			G_EXTI2_Callback = Copy_pfun;
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	9b 81       	ldd	r25, Y+3	; 0x03
    1d28:	90 93 fd 01 	sts	0x01FD, r25
    1d2c:	80 93 fc 01 	sts	0x01FC, r24
			break;
		default:
			/* Error Invalid EXTI number */
			break;
	}
}
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <LCD_vInit>:
#include "../../HAL/LCD/LCD_interface.h"
#include "../../HAL/LCD/LCD_private.h"


void LCD_vInit(void)
{
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	c6 54       	subi	r28, 0x46	; 70
    1d4e:	d0 40       	sbci	r29, 0x00	; 0
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
	GPIO_vSetPortDirection(LCD_DATA_PORT, OUTPUT_PORT);
    1d5a:	83 e0       	ldi	r24, 0x03	; 3
    1d5c:	6f ef       	ldi	r22, 0xFF	; 255
    1d5e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <GPIO_vSetPortDirection>
	GPIO_vSetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, OUTPUT_PIN);
    1d62:	84 e0       	ldi	r24, 0x04	; 4
    1d64:	60 e0       	ldi	r22, 0x00	; 0
    1d66:	41 e0       	ldi	r20, 0x01	; 1
    1d68:	0e 94 18 09 	call	0x1230	; 0x1230 <GPIO_vSetPinDirection>
	GPIO_vSetPinDirection(LCD_CTRL_PORT, LCD_RW_PIN, OUTPUT_PIN);
    1d6c:	84 e0       	ldi	r24, 0x04	; 4
    1d6e:	61 e0       	ldi	r22, 0x01	; 1
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	0e 94 18 09 	call	0x1230	; 0x1230 <GPIO_vSetPinDirection>
	GPIO_vSetPinDirection(LCD_CTRL_PORT, LCD_EN_PIN, OUTPUT_PIN);
    1d76:	84 e0       	ldi	r24, 0x04	; 4
    1d78:	62 e0       	ldi	r22, 0x02	; 2
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	0e 94 18 09 	call	0x1230	; 0x1230 <GPIO_vSetPinDirection>
    1d80:	fe 01       	movw	r30, r28
    1d82:	ed 5b       	subi	r30, 0xBD	; 189
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	a0 e2       	ldi	r26, 0x20	; 32
    1d8c:	b2 e4       	ldi	r27, 0x42	; 66
    1d8e:	80 83       	st	Z, r24
    1d90:	91 83       	std	Z+1, r25	; 0x01
    1d92:	a2 83       	std	Z+2, r26	; 0x02
    1d94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d96:	8e 01       	movw	r16, r28
    1d98:	01 5c       	subi	r16, 0xC1	; 193
    1d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	ed 5b       	subi	r30, 0xBD	; 189
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	60 81       	ld	r22, Z
    1da4:	71 81       	ldd	r23, Z+1	; 0x01
    1da6:	82 81       	ldd	r24, Z+2	; 0x02
    1da8:	93 81       	ldd	r25, Z+3	; 0x03
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	4a ef       	ldi	r20, 0xFA	; 250
    1db0:	54 e4       	ldi	r21, 0x44	; 68
    1db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	f8 01       	movw	r30, r16
    1dbc:	80 83       	st	Z, r24
    1dbe:	91 83       	std	Z+1, r25	; 0x01
    1dc0:	a2 83       	std	Z+2, r26	; 0x02
    1dc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	ff 96       	adiw	r30, 0x3f	; 63
    1dc8:	60 81       	ld	r22, Z
    1dca:	71 81       	ldd	r23, Z+1	; 0x01
    1dcc:	82 81       	ldd	r24, Z+2	; 0x02
    1dce:	93 81       	ldd	r25, Z+3	; 0x03
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	2c f4       	brge	.+10     	; 0x1dea <LCD_vInit+0xaa>
		__ticks = 1;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9e af       	std	Y+62, r25	; 0x3e
    1de6:	8d af       	std	Y+61, r24	; 0x3d
    1de8:	46 c0       	rjmp	.+140    	; 0x1e76 <LCD_vInit+0x136>
	else if (__tmp > 65535)
    1dea:	fe 01       	movw	r30, r28
    1dec:	ff 96       	adiw	r30, 0x3f	; 63
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	3f ef       	ldi	r19, 0xFF	; 255
    1dfa:	4f e7       	ldi	r20, 0x7F	; 127
    1dfc:	57 e4       	ldi	r21, 0x47	; 71
    1dfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e02:	18 16       	cp	r1, r24
    1e04:	64 f5       	brge	.+88     	; 0x1e5e <LCD_vInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e06:	fe 01       	movw	r30, r28
    1e08:	ed 5b       	subi	r30, 0xBD	; 189
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	60 81       	ld	r22, Z
    1e0e:	71 81       	ldd	r23, Z+1	; 0x01
    1e10:	82 81       	ldd	r24, Z+2	; 0x02
    1e12:	93 81       	ldd	r25, Z+3	; 0x03
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e2       	ldi	r20, 0x20	; 32
    1e1a:	51 e4       	ldi	r21, 0x41	; 65
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9e af       	std	Y+62, r25	; 0x3e
    1e32:	8d af       	std	Y+61, r24	; 0x3d
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <LCD_vInit+0x114>
    1e36:	88 ec       	ldi	r24, 0xC8	; 200
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9c af       	std	Y+60, r25	; 0x3c
    1e3c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e3e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e40:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <LCD_vInit+0x102>
    1e46:	9c af       	std	Y+60, r25	; 0x3c
    1e48:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	9e af       	std	Y+62, r25	; 0x3e
    1e52:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e54:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e56:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	69 f7       	brne	.-38     	; 0x1e36 <LCD_vInit+0xf6>
    1e5c:	16 c0       	rjmp	.+44     	; 0x1e8a <LCD_vInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5e:	fe 01       	movw	r30, r28
    1e60:	ff 96       	adiw	r30, 0x3f	; 63
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	9e af       	std	Y+62, r25	; 0x3e
    1e74:	8d af       	std	Y+61, r24	; 0x3d
    1e76:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e78:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e7a:	9a af       	std	Y+58, r25	; 0x3a
    1e7c:	89 af       	std	Y+57, r24	; 0x39
    1e7e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e80:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	f1 f7       	brne	.-4      	; 0x1e82 <LCD_vInit+0x142>
    1e86:	9a af       	std	Y+58, r25	; 0x3a
    1e88:	89 af       	std	Y+57, r24	; 0x39
	LCD_vSendCommand(LCD_ENTRY_MODE_SET);
	_delay_ms(1);

#elif LCD_BIT_MODE == LCD_4BIT_MODE
	_delay_ms(40);
	LCD_vSendCommand(LCD_4BIT_FUNCTION_SET);
    1e8a:	88 e2       	ldi	r24, 0x28	; 40
    1e8c:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_vSendCommand>
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a0 e8       	ldi	r26, 0x80	; 128
    1e96:	bf e3       	ldi	r27, 0x3F	; 63
    1e98:	8d ab       	std	Y+53, r24	; 0x35
    1e9a:	9e ab       	std	Y+54, r25	; 0x36
    1e9c:	af ab       	std	Y+55, r26	; 0x37
    1e9e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ea2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ea4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ea6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	4a ef       	ldi	r20, 0xFA	; 250
    1eae:	54 e4       	ldi	r21, 0x44	; 68
    1eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	89 ab       	std	Y+49, r24	; 0x31
    1eba:	9a ab       	std	Y+50, r25	; 0x32
    1ebc:	ab ab       	std	Y+51, r26	; 0x33
    1ebe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ec0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e8       	ldi	r20, 0x80	; 128
    1ece:	5f e3       	ldi	r21, 0x3F	; 63
    1ed0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed4:	88 23       	and	r24, r24
    1ed6:	2c f4       	brge	.+10     	; 0x1ee2 <LCD_vInit+0x1a2>
		__ticks = 1;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	98 ab       	std	Y+48, r25	; 0x30
    1ede:	8f a7       	std	Y+47, r24	; 0x2f
    1ee0:	3f c0       	rjmp	.+126    	; 0x1f60 <LCD_vInit+0x220>
	else if (__tmp > 65535)
    1ee2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ee6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ee8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	3f ef       	ldi	r19, 0xFF	; 255
    1eee:	4f e7       	ldi	r20, 0x7F	; 127
    1ef0:	57 e4       	ldi	r21, 0x47	; 71
    1ef2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef6:	18 16       	cp	r1, r24
    1ef8:	4c f5       	brge	.+82     	; 0x1f4c <LCD_vInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efa:	6d a9       	ldd	r22, Y+53	; 0x35
    1efc:	7e a9       	ldd	r23, Y+54	; 0x36
    1efe:	8f a9       	ldd	r24, Y+55	; 0x37
    1f00:	98 ad       	ldd	r25, Y+56	; 0x38
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e2       	ldi	r20, 0x20	; 32
    1f08:	51 e4       	ldi	r21, 0x41	; 65
    1f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	98 ab       	std	Y+48, r25	; 0x30
    1f20:	8f a7       	std	Y+47, r24	; 0x2f
    1f22:	0f c0       	rjmp	.+30     	; 0x1f42 <LCD_vInit+0x202>
    1f24:	88 ec       	ldi	r24, 0xC8	; 200
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	9e a7       	std	Y+46, r25	; 0x2e
    1f2a:	8d a7       	std	Y+45, r24	; 0x2d
    1f2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	f1 f7       	brne	.-4      	; 0x1f30 <LCD_vInit+0x1f0>
    1f34:	9e a7       	std	Y+46, r25	; 0x2e
    1f36:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	98 ab       	std	Y+48, r25	; 0x30
    1f40:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f44:	98 a9       	ldd	r25, Y+48	; 0x30
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	69 f7       	brne	.-38     	; 0x1f24 <LCD_vInit+0x1e4>
    1f4a:	14 c0       	rjmp	.+40     	; 0x1f74 <LCD_vInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f50:	8b a9       	ldd	r24, Y+51	; 0x33
    1f52:	9c a9       	ldd	r25, Y+52	; 0x34
    1f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	98 ab       	std	Y+48, r25	; 0x30
    1f5e:	8f a7       	std	Y+47, r24	; 0x2f
    1f60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f62:	98 a9       	ldd	r25, Y+48	; 0x30
    1f64:	9c a7       	std	Y+44, r25	; 0x2c
    1f66:	8b a7       	std	Y+43, r24	; 0x2b
    1f68:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <LCD_vInit+0x22c>
    1f70:	9c a7       	std	Y+44, r25	; 0x2c
    1f72:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vSendCommand(LCD_DISPLAY_ON_CURSOR_OFF|(LCD_CURSOR_ENABLE<<1)|(LCD_BLINK_ENABLE<<0));
    1f74:	8c e0       	ldi	r24, 0x0C	; 12
    1f76:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_vSendCommand>
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	a0 e8       	ldi	r26, 0x80	; 128
    1f80:	bf e3       	ldi	r27, 0x3F	; 63
    1f82:	8f a3       	std	Y+39, r24	; 0x27
    1f84:	98 a7       	std	Y+40, r25	; 0x28
    1f86:	a9 a7       	std	Y+41, r26	; 0x29
    1f88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f8c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f8e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f90:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	4a ef       	ldi	r20, 0xFA	; 250
    1f98:	54 e4       	ldi	r21, 0x44	; 68
    1f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	8b a3       	std	Y+35, r24	; 0x23
    1fa4:	9c a3       	std	Y+36, r25	; 0x24
    1fa6:	ad a3       	std	Y+37, r26	; 0x25
    1fa8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1faa:	6b a1       	ldd	r22, Y+35	; 0x23
    1fac:	7c a1       	ldd	r23, Y+36	; 0x24
    1fae:	8d a1       	ldd	r24, Y+37	; 0x25
    1fb0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e8       	ldi	r20, 0x80	; 128
    1fb8:	5f e3       	ldi	r21, 0x3F	; 63
    1fba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fbe:	88 23       	and	r24, r24
    1fc0:	2c f4       	brge	.+10     	; 0x1fcc <LCD_vInit+0x28c>
		__ticks = 1;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9a a3       	std	Y+34, r25	; 0x22
    1fc8:	89 a3       	std	Y+33, r24	; 0x21
    1fca:	3f c0       	rjmp	.+126    	; 0x204a <LCD_vInit+0x30a>
	else if (__tmp > 65535)
    1fcc:	6b a1       	ldd	r22, Y+35	; 0x23
    1fce:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	3f ef       	ldi	r19, 0xFF	; 255
    1fd8:	4f e7       	ldi	r20, 0x7F	; 127
    1fda:	57 e4       	ldi	r21, 0x47	; 71
    1fdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe0:	18 16       	cp	r1, r24
    1fe2:	4c f5       	brge	.+82     	; 0x2036 <LCD_vInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe4:	6f a1       	ldd	r22, Y+39	; 0x27
    1fe6:	78 a5       	ldd	r23, Y+40	; 0x28
    1fe8:	89 a5       	ldd	r24, Y+41	; 0x29
    1fea:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e2       	ldi	r20, 0x20	; 32
    1ff2:	51 e4       	ldi	r21, 0x41	; 65
    1ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	bc 01       	movw	r22, r24
    1ffe:	cd 01       	movw	r24, r26
    2000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	9a a3       	std	Y+34, r25	; 0x22
    200a:	89 a3       	std	Y+33, r24	; 0x21
    200c:	0f c0       	rjmp	.+30     	; 0x202c <LCD_vInit+0x2ec>
    200e:	88 ec       	ldi	r24, 0xC8	; 200
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	98 a3       	std	Y+32, r25	; 0x20
    2014:	8f 8f       	std	Y+31, r24	; 0x1f
    2016:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2018:	98 a1       	ldd	r25, Y+32	; 0x20
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <LCD_vInit+0x2da>
    201e:	98 a3       	std	Y+32, r25	; 0x20
    2020:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2022:	89 a1       	ldd	r24, Y+33	; 0x21
    2024:	9a a1       	ldd	r25, Y+34	; 0x22
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	9a a3       	std	Y+34, r25	; 0x22
    202a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202c:	89 a1       	ldd	r24, Y+33	; 0x21
    202e:	9a a1       	ldd	r25, Y+34	; 0x22
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	69 f7       	brne	.-38     	; 0x200e <LCD_vInit+0x2ce>
    2034:	14 c0       	rjmp	.+40     	; 0x205e <LCD_vInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2036:	6b a1       	ldd	r22, Y+35	; 0x23
    2038:	7c a1       	ldd	r23, Y+36	; 0x24
    203a:	8d a1       	ldd	r24, Y+37	; 0x25
    203c:	9e a1       	ldd	r25, Y+38	; 0x26
    203e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	9a a3       	std	Y+34, r25	; 0x22
    2048:	89 a3       	std	Y+33, r24	; 0x21
    204a:	89 a1       	ldd	r24, Y+33	; 0x21
    204c:	9a a1       	ldd	r25, Y+34	; 0x22
    204e:	9e 8f       	std	Y+30, r25	; 0x1e
    2050:	8d 8f       	std	Y+29, r24	; 0x1d
    2052:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2054:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <LCD_vInit+0x316>
    205a:	9e 8f       	std	Y+30, r25	; 0x1e
    205c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vClear();
    205e:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_vClear>
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	a0 e0       	ldi	r26, 0x00	; 0
    2068:	b0 e4       	ldi	r27, 0x40	; 64
    206a:	89 8f       	std	Y+25, r24	; 0x19
    206c:	9a 8f       	std	Y+26, r25	; 0x1a
    206e:	ab 8f       	std	Y+27, r26	; 0x1b
    2070:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2072:	69 8d       	ldd	r22, Y+25	; 0x19
    2074:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2076:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2078:	9c 8d       	ldd	r25, Y+28	; 0x1c
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	4a ef       	ldi	r20, 0xFA	; 250
    2080:	54 e4       	ldi	r21, 0x44	; 68
    2082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	8d 8b       	std	Y+21, r24	; 0x15
    208c:	9e 8b       	std	Y+22, r25	; 0x16
    208e:	af 8b       	std	Y+23, r26	; 0x17
    2090:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2092:	6d 89       	ldd	r22, Y+21	; 0x15
    2094:	7e 89       	ldd	r23, Y+22	; 0x16
    2096:	8f 89       	ldd	r24, Y+23	; 0x17
    2098:	98 8d       	ldd	r25, Y+24	; 0x18
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e8       	ldi	r20, 0x80	; 128
    20a0:	5f e3       	ldi	r21, 0x3F	; 63
    20a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a6:	88 23       	and	r24, r24
    20a8:	2c f4       	brge	.+10     	; 0x20b4 <LCD_vInit+0x374>
		__ticks = 1;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	9c 8b       	std	Y+20, r25	; 0x14
    20b0:	8b 8b       	std	Y+19, r24	; 0x13
    20b2:	3f c0       	rjmp	.+126    	; 0x2132 <LCD_vInit+0x3f2>
	else if (__tmp > 65535)
    20b4:	6d 89       	ldd	r22, Y+21	; 0x15
    20b6:	7e 89       	ldd	r23, Y+22	; 0x16
    20b8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ba:	98 8d       	ldd	r25, Y+24	; 0x18
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	3f ef       	ldi	r19, 0xFF	; 255
    20c0:	4f e7       	ldi	r20, 0x7F	; 127
    20c2:	57 e4       	ldi	r21, 0x47	; 71
    20c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c8:	18 16       	cp	r1, r24
    20ca:	4c f5       	brge	.+82     	; 0x211e <LCD_vInit+0x3de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20cc:	69 8d       	ldd	r22, Y+25	; 0x19
    20ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e2       	ldi	r20, 0x20	; 32
    20da:	51 e4       	ldi	r21, 0x41	; 65
    20dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	bc 01       	movw	r22, r24
    20e6:	cd 01       	movw	r24, r26
    20e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9c 8b       	std	Y+20, r25	; 0x14
    20f2:	8b 8b       	std	Y+19, r24	; 0x13
    20f4:	0f c0       	rjmp	.+30     	; 0x2114 <LCD_vInit+0x3d4>
    20f6:	88 ec       	ldi	r24, 0xC8	; 200
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	9a 8b       	std	Y+18, r25	; 0x12
    20fc:	89 8b       	std	Y+17, r24	; 0x11
    20fe:	89 89       	ldd	r24, Y+17	; 0x11
    2100:	9a 89       	ldd	r25, Y+18	; 0x12
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <LCD_vInit+0x3c2>
    2106:	9a 8b       	std	Y+18, r25	; 0x12
    2108:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210a:	8b 89       	ldd	r24, Y+19	; 0x13
    210c:	9c 89       	ldd	r25, Y+20	; 0x14
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	9c 8b       	std	Y+20, r25	; 0x14
    2112:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2114:	8b 89       	ldd	r24, Y+19	; 0x13
    2116:	9c 89       	ldd	r25, Y+20	; 0x14
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	69 f7       	brne	.-38     	; 0x20f6 <LCD_vInit+0x3b6>
    211c:	14 c0       	rjmp	.+40     	; 0x2146 <LCD_vInit+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211e:	6d 89       	ldd	r22, Y+21	; 0x15
    2120:	7e 89       	ldd	r23, Y+22	; 0x16
    2122:	8f 89       	ldd	r24, Y+23	; 0x17
    2124:	98 8d       	ldd	r25, Y+24	; 0x18
    2126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	9c 8b       	std	Y+20, r25	; 0x14
    2130:	8b 8b       	std	Y+19, r24	; 0x13
    2132:	8b 89       	ldd	r24, Y+19	; 0x13
    2134:	9c 89       	ldd	r25, Y+20	; 0x14
    2136:	98 8b       	std	Y+16, r25	; 0x10
    2138:	8f 87       	std	Y+15, r24	; 0x0f
    213a:	8f 85       	ldd	r24, Y+15	; 0x0f
    213c:	98 89       	ldd	r25, Y+16	; 0x10
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	f1 f7       	brne	.-4      	; 0x213e <LCD_vInit+0x3fe>
    2142:	98 8b       	std	Y+16, r25	; 0x10
    2144:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vSendCommand(LCD_ENTRY_MODE_SET);
    2146:	86 e0       	ldi	r24, 0x06	; 6
    2148:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_vSendCommand>
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	a0 e8       	ldi	r26, 0x80	; 128
    2152:	bf e3       	ldi	r27, 0x3F	; 63
    2154:	8b 87       	std	Y+11, r24	; 0x0b
    2156:	9c 87       	std	Y+12, r25	; 0x0c
    2158:	ad 87       	std	Y+13, r26	; 0x0d
    215a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215c:	6b 85       	ldd	r22, Y+11	; 0x0b
    215e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2160:	8d 85       	ldd	r24, Y+13	; 0x0d
    2162:	9e 85       	ldd	r25, Y+14	; 0x0e
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	4a ef       	ldi	r20, 0xFA	; 250
    216a:	54 e4       	ldi	r21, 0x44	; 68
    216c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	8f 83       	std	Y+7, r24	; 0x07
    2176:	98 87       	std	Y+8, r25	; 0x08
    2178:	a9 87       	std	Y+9, r26	; 0x09
    217a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    217c:	6f 81       	ldd	r22, Y+7	; 0x07
    217e:	78 85       	ldd	r23, Y+8	; 0x08
    2180:	89 85       	ldd	r24, Y+9	; 0x09
    2182:	9a 85       	ldd	r25, Y+10	; 0x0a
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e8       	ldi	r20, 0x80	; 128
    218a:	5f e3       	ldi	r21, 0x3F	; 63
    218c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2190:	88 23       	and	r24, r24
    2192:	2c f4       	brge	.+10     	; 0x219e <LCD_vInit+0x45e>
		__ticks = 1;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	9e 83       	std	Y+6, r25	; 0x06
    219a:	8d 83       	std	Y+5, r24	; 0x05
    219c:	3f c0       	rjmp	.+126    	; 0x221c <LCD_vInit+0x4dc>
	else if (__tmp > 65535)
    219e:	6f 81       	ldd	r22, Y+7	; 0x07
    21a0:	78 85       	ldd	r23, Y+8	; 0x08
    21a2:	89 85       	ldd	r24, Y+9	; 0x09
    21a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	3f ef       	ldi	r19, 0xFF	; 255
    21aa:	4f e7       	ldi	r20, 0x7F	; 127
    21ac:	57 e4       	ldi	r21, 0x47	; 71
    21ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b2:	18 16       	cp	r1, r24
    21b4:	4c f5       	brge	.+82     	; 0x2208 <LCD_vInit+0x4c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    21bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e2       	ldi	r20, 0x20	; 32
    21c4:	51 e4       	ldi	r21, 0x41	; 65
    21c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	9e 83       	std	Y+6, r25	; 0x06
    21dc:	8d 83       	std	Y+5, r24	; 0x05
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <LCD_vInit+0x4be>
    21e0:	88 ec       	ldi	r24, 0xC8	; 200
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	9c 83       	std	Y+4, r25	; 0x04
    21e6:	8b 83       	std	Y+3, r24	; 0x03
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	9c 81       	ldd	r25, Y+4	; 0x04
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <LCD_vInit+0x4ac>
    21f0:	9c 83       	std	Y+4, r25	; 0x04
    21f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f4:	8d 81       	ldd	r24, Y+5	; 0x05
    21f6:	9e 81       	ldd	r25, Y+6	; 0x06
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2200:	9e 81       	ldd	r25, Y+6	; 0x06
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	69 f7       	brne	.-38     	; 0x21e0 <LCD_vInit+0x4a0>
    2206:	14 c0       	rjmp	.+40     	; 0x2230 <LCD_vInit+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2208:	6f 81       	ldd	r22, Y+7	; 0x07
    220a:	78 85       	ldd	r23, Y+8	; 0x08
    220c:	89 85       	ldd	r24, Y+9	; 0x09
    220e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	9e 83       	std	Y+6, r25	; 0x06
    221a:	8d 83       	std	Y+5, r24	; 0x05
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	9a 83       	std	Y+2, r25	; 0x02
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a 81       	ldd	r25, Y+2	; 0x02
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <LCD_vInit+0x4e8>
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    2230:	ca 5b       	subi	r28, 0xBA	; 186
    2232:	df 4f       	sbci	r29, 0xFF	; 255
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	08 95       	ret

00002248 <LCD_vSendChar>:

void LCD_vSendChar(char character)
{
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	e9 97       	sbiw	r28, 0x39	; 57
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
	_delay_ms(1);

#elif LCD_BIT_MODE==LCD_4BIT_MODE
	/*Select RS -> 1*/
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, HIGH);
    225e:	84 e0       	ldi	r24, 0x04	; 4
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	41 e0       	ldi	r20, 0x01	; 1
    2264:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <GPIO_vSetPinValue>
	/*Select RW -> 0*/
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    2268:	84 e0       	ldi	r24, 0x04	; 4
    226a:	61 e0       	ldi	r22, 0x01	; 1
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <GPIO_vSetPinValue>
	/*Put upper nipple on port*/
	GPIO_vSetPortValue(LCD_DATA_PORT, ((LCD_DATA_PORT & 0x0F) | (character & 0xF0)));
    2272:	89 ad       	ldd	r24, Y+57	; 0x39
    2274:	80 7f       	andi	r24, 0xF0	; 240
    2276:	83 60       	ori	r24, 0x03	; 3
    2278:	98 2f       	mov	r25, r24
    227a:	83 e0       	ldi	r24, 0x03	; 3
    227c:	69 2f       	mov	r22, r25
    227e:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_vSetPortValue>
	/*Trigger the Enable*/
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
    2282:	84 e0       	ldi	r24, 0x04	; 4
    2284:	62 e0       	ldi	r22, 0x02	; 2
    2286:	41 e0       	ldi	r20, 0x01	; 1
    2288:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <GPIO_vSetPinValue>
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a0 e8       	ldi	r26, 0x80	; 128
    2292:	bf e3       	ldi	r27, 0x3F	; 63
    2294:	8d ab       	std	Y+53, r24	; 0x35
    2296:	9e ab       	std	Y+54, r25	; 0x36
    2298:	af ab       	std	Y+55, r26	; 0x37
    229a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229c:	6d a9       	ldd	r22, Y+53	; 0x35
    229e:	7e a9       	ldd	r23, Y+54	; 0x36
    22a0:	8f a9       	ldd	r24, Y+55	; 0x37
    22a2:	98 ad       	ldd	r25, Y+56	; 0x38
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a ef       	ldi	r20, 0xFA	; 250
    22aa:	54 e4       	ldi	r21, 0x44	; 68
    22ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	89 ab       	std	Y+49, r24	; 0x31
    22b6:	9a ab       	std	Y+50, r25	; 0x32
    22b8:	ab ab       	std	Y+51, r26	; 0x33
    22ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22bc:	69 a9       	ldd	r22, Y+49	; 0x31
    22be:	7a a9       	ldd	r23, Y+50	; 0x32
    22c0:	8b a9       	ldd	r24, Y+51	; 0x33
    22c2:	9c a9       	ldd	r25, Y+52	; 0x34
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	2c f4       	brge	.+10     	; 0x22de <LCD_vSendChar+0x96>
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	98 ab       	std	Y+48, r25	; 0x30
    22da:	8f a7       	std	Y+47, r24	; 0x2f
    22dc:	3f c0       	rjmp	.+126    	; 0x235c <LCD_vSendChar+0x114>
	else if (__tmp > 65535)
    22de:	69 a9       	ldd	r22, Y+49	; 0x31
    22e0:	7a a9       	ldd	r23, Y+50	; 0x32
    22e2:	8b a9       	ldd	r24, Y+51	; 0x33
    22e4:	9c a9       	ldd	r25, Y+52	; 0x34
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	4c f5       	brge	.+82     	; 0x2348 <LCD_vSendChar+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	6d a9       	ldd	r22, Y+53	; 0x35
    22f8:	7e a9       	ldd	r23, Y+54	; 0x36
    22fa:	8f a9       	ldd	r24, Y+55	; 0x37
    22fc:	98 ad       	ldd	r25, Y+56	; 0x38
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	98 ab       	std	Y+48, r25	; 0x30
    231c:	8f a7       	std	Y+47, r24	; 0x2f
    231e:	0f c0       	rjmp	.+30     	; 0x233e <LCD_vSendChar+0xf6>
    2320:	88 ec       	ldi	r24, 0xC8	; 200
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9e a7       	std	Y+46, r25	; 0x2e
    2326:	8d a7       	std	Y+45, r24	; 0x2d
    2328:	8d a5       	ldd	r24, Y+45	; 0x2d
    232a:	9e a5       	ldd	r25, Y+46	; 0x2e
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <LCD_vSendChar+0xe4>
    2330:	9e a7       	std	Y+46, r25	; 0x2e
    2332:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	8f a5       	ldd	r24, Y+47	; 0x2f
    2336:	98 a9       	ldd	r25, Y+48	; 0x30
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	98 ab       	std	Y+48, r25	; 0x30
    233c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2340:	98 a9       	ldd	r25, Y+48	; 0x30
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	69 f7       	brne	.-38     	; 0x2320 <LCD_vSendChar+0xd8>
    2346:	14 c0       	rjmp	.+40     	; 0x2370 <LCD_vSendChar+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	69 a9       	ldd	r22, Y+49	; 0x31
    234a:	7a a9       	ldd	r23, Y+50	; 0x32
    234c:	8b a9       	ldd	r24, Y+51	; 0x33
    234e:	9c a9       	ldd	r25, Y+52	; 0x34
    2350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	98 ab       	std	Y+48, r25	; 0x30
    235a:	8f a7       	std	Y+47, r24	; 0x2f
    235c:	8f a5       	ldd	r24, Y+47	; 0x2f
    235e:	98 a9       	ldd	r25, Y+48	; 0x30
    2360:	9c a7       	std	Y+44, r25	; 0x2c
    2362:	8b a7       	std	Y+43, r24	; 0x2b
    2364:	8b a5       	ldd	r24, Y+43	; 0x2b
    2366:	9c a5       	ldd	r25, Y+44	; 0x2c
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_vSendChar+0x120>
    236c:	9c a7       	std	Y+44, r25	; 0x2c
    236e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    2370:	84 e0       	ldi	r24, 0x04	; 4
    2372:	62 e0       	ldi	r22, 0x02	; 2
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <GPIO_vSetPinValue>
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	a0 e8       	ldi	r26, 0x80	; 128
    2380:	bf e3       	ldi	r27, 0x3F	; 63
    2382:	8f a3       	std	Y+39, r24	; 0x27
    2384:	98 a7       	std	Y+40, r25	; 0x28
    2386:	a9 a7       	std	Y+41, r26	; 0x29
    2388:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238a:	6f a1       	ldd	r22, Y+39	; 0x27
    238c:	78 a5       	ldd	r23, Y+40	; 0x28
    238e:	89 a5       	ldd	r24, Y+41	; 0x29
    2390:	9a a5       	ldd	r25, Y+42	; 0x2a
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	4a ef       	ldi	r20, 0xFA	; 250
    2398:	54 e4       	ldi	r21, 0x44	; 68
    239a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	8b a3       	std	Y+35, r24	; 0x23
    23a4:	9c a3       	std	Y+36, r25	; 0x24
    23a6:	ad a3       	std	Y+37, r26	; 0x25
    23a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23aa:	6b a1       	ldd	r22, Y+35	; 0x23
    23ac:	7c a1       	ldd	r23, Y+36	; 0x24
    23ae:	8d a1       	ldd	r24, Y+37	; 0x25
    23b0:	9e a1       	ldd	r25, Y+38	; 0x26
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23be:	88 23       	and	r24, r24
    23c0:	2c f4       	brge	.+10     	; 0x23cc <LCD_vSendChar+0x184>
		__ticks = 1;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	9a a3       	std	Y+34, r25	; 0x22
    23c8:	89 a3       	std	Y+33, r24	; 0x21
    23ca:	3f c0       	rjmp	.+126    	; 0x244a <LCD_vSendChar+0x202>
	else if (__tmp > 65535)
    23cc:	6b a1       	ldd	r22, Y+35	; 0x23
    23ce:	7c a1       	ldd	r23, Y+36	; 0x24
    23d0:	8d a1       	ldd	r24, Y+37	; 0x25
    23d2:	9e a1       	ldd	r25, Y+38	; 0x26
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	3f ef       	ldi	r19, 0xFF	; 255
    23d8:	4f e7       	ldi	r20, 0x7F	; 127
    23da:	57 e4       	ldi	r21, 0x47	; 71
    23dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e0:	18 16       	cp	r1, r24
    23e2:	4c f5       	brge	.+82     	; 0x2436 <LCD_vSendChar+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e4:	6f a1       	ldd	r22, Y+39	; 0x27
    23e6:	78 a5       	ldd	r23, Y+40	; 0x28
    23e8:	89 a5       	ldd	r24, Y+41	; 0x29
    23ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e2       	ldi	r20, 0x20	; 32
    23f2:	51 e4       	ldi	r21, 0x41	; 65
    23f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	9a a3       	std	Y+34, r25	; 0x22
    240a:	89 a3       	std	Y+33, r24	; 0x21
    240c:	0f c0       	rjmp	.+30     	; 0x242c <LCD_vSendChar+0x1e4>
    240e:	88 ec       	ldi	r24, 0xC8	; 200
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	98 a3       	std	Y+32, r25	; 0x20
    2414:	8f 8f       	std	Y+31, r24	; 0x1f
    2416:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2418:	98 a1       	ldd	r25, Y+32	; 0x20
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <LCD_vSendChar+0x1d2>
    241e:	98 a3       	std	Y+32, r25	; 0x20
    2420:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2422:	89 a1       	ldd	r24, Y+33	; 0x21
    2424:	9a a1       	ldd	r25, Y+34	; 0x22
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	9a a3       	std	Y+34, r25	; 0x22
    242a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242c:	89 a1       	ldd	r24, Y+33	; 0x21
    242e:	9a a1       	ldd	r25, Y+34	; 0x22
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	69 f7       	brne	.-38     	; 0x240e <LCD_vSendChar+0x1c6>
    2434:	14 c0       	rjmp	.+40     	; 0x245e <LCD_vSendChar+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2436:	6b a1       	ldd	r22, Y+35	; 0x23
    2438:	7c a1       	ldd	r23, Y+36	; 0x24
    243a:	8d a1       	ldd	r24, Y+37	; 0x25
    243c:	9e a1       	ldd	r25, Y+38	; 0x26
    243e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9a a3       	std	Y+34, r25	; 0x22
    2448:	89 a3       	std	Y+33, r24	; 0x21
    244a:	89 a1       	ldd	r24, Y+33	; 0x21
    244c:	9a a1       	ldd	r25, Y+34	; 0x22
    244e:	9e 8f       	std	Y+30, r25	; 0x1e
    2450:	8d 8f       	std	Y+29, r24	; 0x1d
    2452:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2454:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <LCD_vSendChar+0x20e>
    245a:	9e 8f       	std	Y+30, r25	; 0x1e
    245c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Put lower nipple on port*/
	GPIO_vSetPortValue(LCD_DATA_PORT, ((LCD_DATA_PORT & 0xF0) | (character << 4)));
    245e:	89 ad       	ldd	r24, Y+57	; 0x39
    2460:	98 2f       	mov	r25, r24
    2462:	92 95       	swap	r25
    2464:	90 7f       	andi	r25, 0xF0	; 240
    2466:	83 e0       	ldi	r24, 0x03	; 3
    2468:	69 2f       	mov	r22, r25
    246a:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_vSetPortValue>
	/*Trigger the Enable*/
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
    246e:	84 e0       	ldi	r24, 0x04	; 4
    2470:	62 e0       	ldi	r22, 0x02	; 2
    2472:	41 e0       	ldi	r20, 0x01	; 1
    2474:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <GPIO_vSetPinValue>
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	a0 e8       	ldi	r26, 0x80	; 128
    247e:	bf e3       	ldi	r27, 0x3F	; 63
    2480:	89 8f       	std	Y+25, r24	; 0x19
    2482:	9a 8f       	std	Y+26, r25	; 0x1a
    2484:	ab 8f       	std	Y+27, r26	; 0x1b
    2486:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2488:	69 8d       	ldd	r22, Y+25	; 0x19
    248a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    248c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    248e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	4a ef       	ldi	r20, 0xFA	; 250
    2496:	54 e4       	ldi	r21, 0x44	; 68
    2498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	8d 8b       	std	Y+21, r24	; 0x15
    24a2:	9e 8b       	std	Y+22, r25	; 0x16
    24a4:	af 8b       	std	Y+23, r26	; 0x17
    24a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24a8:	6d 89       	ldd	r22, Y+21	; 0x15
    24aa:	7e 89       	ldd	r23, Y+22	; 0x16
    24ac:	8f 89       	ldd	r24, Y+23	; 0x17
    24ae:	98 8d       	ldd	r25, Y+24	; 0x18
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e8       	ldi	r20, 0x80	; 128
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24bc:	88 23       	and	r24, r24
    24be:	2c f4       	brge	.+10     	; 0x24ca <LCD_vSendChar+0x282>
		__ticks = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9c 8b       	std	Y+20, r25	; 0x14
    24c6:	8b 8b       	std	Y+19, r24	; 0x13
    24c8:	3f c0       	rjmp	.+126    	; 0x2548 <LCD_vSendChar+0x300>
	else if (__tmp > 65535)
    24ca:	6d 89       	ldd	r22, Y+21	; 0x15
    24cc:	7e 89       	ldd	r23, Y+22	; 0x16
    24ce:	8f 89       	ldd	r24, Y+23	; 0x17
    24d0:	98 8d       	ldd	r25, Y+24	; 0x18
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24de:	18 16       	cp	r1, r24
    24e0:	4c f5       	brge	.+82     	; 0x2534 <LCD_vSendChar+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e2:	69 8d       	ldd	r22, Y+25	; 0x19
    24e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e2       	ldi	r20, 0x20	; 32
    24f0:	51 e4       	ldi	r21, 0x41	; 65
    24f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9c 8b       	std	Y+20, r25	; 0x14
    2508:	8b 8b       	std	Y+19, r24	; 0x13
    250a:	0f c0       	rjmp	.+30     	; 0x252a <LCD_vSendChar+0x2e2>
    250c:	88 ec       	ldi	r24, 0xC8	; 200
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9a 8b       	std	Y+18, r25	; 0x12
    2512:	89 8b       	std	Y+17, r24	; 0x11
    2514:	89 89       	ldd	r24, Y+17	; 0x11
    2516:	9a 89       	ldd	r25, Y+18	; 0x12
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <LCD_vSendChar+0x2d0>
    251c:	9a 8b       	std	Y+18, r25	; 0x12
    251e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2520:	8b 89       	ldd	r24, Y+19	; 0x13
    2522:	9c 89       	ldd	r25, Y+20	; 0x14
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	9c 8b       	std	Y+20, r25	; 0x14
    2528:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252a:	8b 89       	ldd	r24, Y+19	; 0x13
    252c:	9c 89       	ldd	r25, Y+20	; 0x14
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	69 f7       	brne	.-38     	; 0x250c <LCD_vSendChar+0x2c4>
    2532:	14 c0       	rjmp	.+40     	; 0x255c <LCD_vSendChar+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2534:	6d 89       	ldd	r22, Y+21	; 0x15
    2536:	7e 89       	ldd	r23, Y+22	; 0x16
    2538:	8f 89       	ldd	r24, Y+23	; 0x17
    253a:	98 8d       	ldd	r25, Y+24	; 0x18
    253c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	9c 8b       	std	Y+20, r25	; 0x14
    2546:	8b 8b       	std	Y+19, r24	; 0x13
    2548:	8b 89       	ldd	r24, Y+19	; 0x13
    254a:	9c 89       	ldd	r25, Y+20	; 0x14
    254c:	98 8b       	std	Y+16, r25	; 0x10
    254e:	8f 87       	std	Y+15, r24	; 0x0f
    2550:	8f 85       	ldd	r24, Y+15	; 0x0f
    2552:	98 89       	ldd	r25, Y+16	; 0x10
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <LCD_vSendChar+0x30c>
    2558:	98 8b       	std	Y+16, r25	; 0x10
    255a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    255c:	84 e0       	ldi	r24, 0x04	; 4
    255e:	62 e0       	ldi	r22, 0x02	; 2
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <GPIO_vSetPinValue>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	a0 e8       	ldi	r26, 0x80	; 128
    256c:	bf e3       	ldi	r27, 0x3F	; 63
    256e:	8b 87       	std	Y+11, r24	; 0x0b
    2570:	9c 87       	std	Y+12, r25	; 0x0c
    2572:	ad 87       	std	Y+13, r26	; 0x0d
    2574:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2576:	6b 85       	ldd	r22, Y+11	; 0x0b
    2578:	7c 85       	ldd	r23, Y+12	; 0x0c
    257a:	8d 85       	ldd	r24, Y+13	; 0x0d
    257c:	9e 85       	ldd	r25, Y+14	; 0x0e
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	4a ef       	ldi	r20, 0xFA	; 250
    2584:	54 e4       	ldi	r21, 0x44	; 68
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	8f 83       	std	Y+7, r24	; 0x07
    2590:	98 87       	std	Y+8, r25	; 0x08
    2592:	a9 87       	std	Y+9, r26	; 0x09
    2594:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2596:	6f 81       	ldd	r22, Y+7	; 0x07
    2598:	78 85       	ldd	r23, Y+8	; 0x08
    259a:	89 85       	ldd	r24, Y+9	; 0x09
    259c:	9a 85       	ldd	r25, Y+10	; 0x0a
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e8       	ldi	r20, 0x80	; 128
    25a4:	5f e3       	ldi	r21, 0x3F	; 63
    25a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25aa:	88 23       	and	r24, r24
    25ac:	2c f4       	brge	.+10     	; 0x25b8 <LCD_vSendChar+0x370>
		__ticks = 1;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	9e 83       	std	Y+6, r25	; 0x06
    25b4:	8d 83       	std	Y+5, r24	; 0x05
    25b6:	3f c0       	rjmp	.+126    	; 0x2636 <LCD_vSendChar+0x3ee>
	else if (__tmp > 65535)
    25b8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ba:	78 85       	ldd	r23, Y+8	; 0x08
    25bc:	89 85       	ldd	r24, Y+9	; 0x09
    25be:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	3f ef       	ldi	r19, 0xFF	; 255
    25c4:	4f e7       	ldi	r20, 0x7F	; 127
    25c6:	57 e4       	ldi	r21, 0x47	; 71
    25c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25cc:	18 16       	cp	r1, r24
    25ce:	4c f5       	brge	.+82     	; 0x2622 <LCD_vSendChar+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e2       	ldi	r20, 0x20	; 32
    25de:	51 e4       	ldi	r21, 0x41	; 65
    25e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	bc 01       	movw	r22, r24
    25ea:	cd 01       	movw	r24, r26
    25ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9e 83       	std	Y+6, r25	; 0x06
    25f6:	8d 83       	std	Y+5, r24	; 0x05
    25f8:	0f c0       	rjmp	.+30     	; 0x2618 <LCD_vSendChar+0x3d0>
    25fa:	88 ec       	ldi	r24, 0xC8	; 200
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	9c 83       	std	Y+4, r25	; 0x04
    2600:	8b 83       	std	Y+3, r24	; 0x03
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	9c 81       	ldd	r25, Y+4	; 0x04
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <LCD_vSendChar+0x3be>
    260a:	9c 83       	std	Y+4, r25	; 0x04
    260c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260e:	8d 81       	ldd	r24, Y+5	; 0x05
    2610:	9e 81       	ldd	r25, Y+6	; 0x06
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	9e 83       	std	Y+6, r25	; 0x06
    2616:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2618:	8d 81       	ldd	r24, Y+5	; 0x05
    261a:	9e 81       	ldd	r25, Y+6	; 0x06
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	69 f7       	brne	.-38     	; 0x25fa <LCD_vSendChar+0x3b2>
    2620:	14 c0       	rjmp	.+40     	; 0x264a <LCD_vSendChar+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	9e 83       	std	Y+6, r25	; 0x06
    2634:	8d 83       	std	Y+5, r24	; 0x05
    2636:	8d 81       	ldd	r24, Y+5	; 0x05
    2638:	9e 81       	ldd	r25, Y+6	; 0x06
    263a:	9a 83       	std	Y+2, r25	; 0x02
    263c:	89 83       	std	Y+1, r24	; 0x01
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	9a 81       	ldd	r25, Y+2	; 0x02
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <LCD_vSendChar+0x3fa>
    2646:	9a 83       	std	Y+2, r25	; 0x02
    2648:	89 83       	std	Y+1, r24	; 0x01
//	{
//		lineRepeated++;
//		LCD_vSetCursorPosition(0,0);
//	}
#endif
}
    264a:	e9 96       	adiw	r28, 0x39	; 57
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	cd bf       	out	0x3d, r28	; 61
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	08 95       	ret

0000265c <LCD_vSendCommand>:

void LCD_vSendCommand(u8 command)
{
    265c:	df 93       	push	r29
    265e:	cf 93       	push	r28
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	e9 97       	sbiw	r28, 0x39	; 57
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
	_delay_ms(1);
#elif LCD_BIT_MODE==LCD_4BIT_MODE
	/*Select RS -> 0*/
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, LOW);
    2672:	84 e0       	ldi	r24, 0x04	; 4
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <GPIO_vSetPinValue>
	/*Select RW -> 0*/
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    267c:	84 e0       	ldi	r24, 0x04	; 4
    267e:	61 e0       	ldi	r22, 0x01	; 1
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <GPIO_vSetPinValue>
	/*Put upper nipple on port*/
	GPIO_vSetPortValue(LCD_DATA_PORT, ((LCD_DATA_PORT & 0x0F) | (command & 0xF0)));
    2686:	89 ad       	ldd	r24, Y+57	; 0x39
    2688:	80 7f       	andi	r24, 0xF0	; 240
    268a:	83 60       	ori	r24, 0x03	; 3
    268c:	98 2f       	mov	r25, r24
    268e:	83 e0       	ldi	r24, 0x03	; 3
    2690:	69 2f       	mov	r22, r25
    2692:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_vSetPortValue>
	/*Trigger the Enable*/
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
    2696:	84 e0       	ldi	r24, 0x04	; 4
    2698:	62 e0       	ldi	r22, 0x02	; 2
    269a:	41 e0       	ldi	r20, 0x01	; 1
    269c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <GPIO_vSetPinValue>
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	a0 e8       	ldi	r26, 0x80	; 128
    26a6:	bf e3       	ldi	r27, 0x3F	; 63
    26a8:	8d ab       	std	Y+53, r24	; 0x35
    26aa:	9e ab       	std	Y+54, r25	; 0x36
    26ac:	af ab       	std	Y+55, r26	; 0x37
    26ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b0:	6d a9       	ldd	r22, Y+53	; 0x35
    26b2:	7e a9       	ldd	r23, Y+54	; 0x36
    26b4:	8f a9       	ldd	r24, Y+55	; 0x37
    26b6:	98 ad       	ldd	r25, Y+56	; 0x38
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	4a ef       	ldi	r20, 0xFA	; 250
    26be:	54 e4       	ldi	r21, 0x44	; 68
    26c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	89 ab       	std	Y+49, r24	; 0x31
    26ca:	9a ab       	std	Y+50, r25	; 0x32
    26cc:	ab ab       	std	Y+51, r26	; 0x33
    26ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26d0:	69 a9       	ldd	r22, Y+49	; 0x31
    26d2:	7a a9       	ldd	r23, Y+50	; 0x32
    26d4:	8b a9       	ldd	r24, Y+51	; 0x33
    26d6:	9c a9       	ldd	r25, Y+52	; 0x34
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e8       	ldi	r20, 0x80	; 128
    26de:	5f e3       	ldi	r21, 0x3F	; 63
    26e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26e4:	88 23       	and	r24, r24
    26e6:	2c f4       	brge	.+10     	; 0x26f2 <LCD_vSendCommand+0x96>
		__ticks = 1;
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	98 ab       	std	Y+48, r25	; 0x30
    26ee:	8f a7       	std	Y+47, r24	; 0x2f
    26f0:	3f c0       	rjmp	.+126    	; 0x2770 <LCD_vSendCommand+0x114>
	else if (__tmp > 65535)
    26f2:	69 a9       	ldd	r22, Y+49	; 0x31
    26f4:	7a a9       	ldd	r23, Y+50	; 0x32
    26f6:	8b a9       	ldd	r24, Y+51	; 0x33
    26f8:	9c a9       	ldd	r25, Y+52	; 0x34
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	3f ef       	ldi	r19, 0xFF	; 255
    26fe:	4f e7       	ldi	r20, 0x7F	; 127
    2700:	57 e4       	ldi	r21, 0x47	; 71
    2702:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2706:	18 16       	cp	r1, r24
    2708:	4c f5       	brge	.+82     	; 0x275c <LCD_vSendCommand+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270a:	6d a9       	ldd	r22, Y+53	; 0x35
    270c:	7e a9       	ldd	r23, Y+54	; 0x36
    270e:	8f a9       	ldd	r24, Y+55	; 0x37
    2710:	98 ad       	ldd	r25, Y+56	; 0x38
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e2       	ldi	r20, 0x20	; 32
    2718:	51 e4       	ldi	r21, 0x41	; 65
    271a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	bc 01       	movw	r22, r24
    2724:	cd 01       	movw	r24, r26
    2726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	98 ab       	std	Y+48, r25	; 0x30
    2730:	8f a7       	std	Y+47, r24	; 0x2f
    2732:	0f c0       	rjmp	.+30     	; 0x2752 <LCD_vSendCommand+0xf6>
    2734:	88 ec       	ldi	r24, 0xC8	; 200
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9e a7       	std	Y+46, r25	; 0x2e
    273a:	8d a7       	std	Y+45, r24	; 0x2d
    273c:	8d a5       	ldd	r24, Y+45	; 0x2d
    273e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	f1 f7       	brne	.-4      	; 0x2740 <LCD_vSendCommand+0xe4>
    2744:	9e a7       	std	Y+46, r25	; 0x2e
    2746:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2748:	8f a5       	ldd	r24, Y+47	; 0x2f
    274a:	98 a9       	ldd	r25, Y+48	; 0x30
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	98 ab       	std	Y+48, r25	; 0x30
    2750:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2752:	8f a5       	ldd	r24, Y+47	; 0x2f
    2754:	98 a9       	ldd	r25, Y+48	; 0x30
    2756:	00 97       	sbiw	r24, 0x00	; 0
    2758:	69 f7       	brne	.-38     	; 0x2734 <LCD_vSendCommand+0xd8>
    275a:	14 c0       	rjmp	.+40     	; 0x2784 <LCD_vSendCommand+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275c:	69 a9       	ldd	r22, Y+49	; 0x31
    275e:	7a a9       	ldd	r23, Y+50	; 0x32
    2760:	8b a9       	ldd	r24, Y+51	; 0x33
    2762:	9c a9       	ldd	r25, Y+52	; 0x34
    2764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	98 ab       	std	Y+48, r25	; 0x30
    276e:	8f a7       	std	Y+47, r24	; 0x2f
    2770:	8f a5       	ldd	r24, Y+47	; 0x2f
    2772:	98 a9       	ldd	r25, Y+48	; 0x30
    2774:	9c a7       	std	Y+44, r25	; 0x2c
    2776:	8b a7       	std	Y+43, r24	; 0x2b
    2778:	8b a5       	ldd	r24, Y+43	; 0x2b
    277a:	9c a5       	ldd	r25, Y+44	; 0x2c
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	f1 f7       	brne	.-4      	; 0x277c <LCD_vSendCommand+0x120>
    2780:	9c a7       	std	Y+44, r25	; 0x2c
    2782:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    2784:	84 e0       	ldi	r24, 0x04	; 4
    2786:	62 e0       	ldi	r22, 0x02	; 2
    2788:	40 e0       	ldi	r20, 0x00	; 0
    278a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <GPIO_vSetPinValue>
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	a0 e8       	ldi	r26, 0x80	; 128
    2794:	bf e3       	ldi	r27, 0x3F	; 63
    2796:	8f a3       	std	Y+39, r24	; 0x27
    2798:	98 a7       	std	Y+40, r25	; 0x28
    279a:	a9 a7       	std	Y+41, r26	; 0x29
    279c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279e:	6f a1       	ldd	r22, Y+39	; 0x27
    27a0:	78 a5       	ldd	r23, Y+40	; 0x28
    27a2:	89 a5       	ldd	r24, Y+41	; 0x29
    27a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	4a ef       	ldi	r20, 0xFA	; 250
    27ac:	54 e4       	ldi	r21, 0x44	; 68
    27ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	8b a3       	std	Y+35, r24	; 0x23
    27b8:	9c a3       	std	Y+36, r25	; 0x24
    27ba:	ad a3       	std	Y+37, r26	; 0x25
    27bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27be:	6b a1       	ldd	r22, Y+35	; 0x23
    27c0:	7c a1       	ldd	r23, Y+36	; 0x24
    27c2:	8d a1       	ldd	r24, Y+37	; 0x25
    27c4:	9e a1       	ldd	r25, Y+38	; 0x26
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e8       	ldi	r20, 0x80	; 128
    27cc:	5f e3       	ldi	r21, 0x3F	; 63
    27ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27d2:	88 23       	and	r24, r24
    27d4:	2c f4       	brge	.+10     	; 0x27e0 <LCD_vSendCommand+0x184>
		__ticks = 1;
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	9a a3       	std	Y+34, r25	; 0x22
    27dc:	89 a3       	std	Y+33, r24	; 0x21
    27de:	3f c0       	rjmp	.+126    	; 0x285e <LCD_vSendCommand+0x202>
	else if (__tmp > 65535)
    27e0:	6b a1       	ldd	r22, Y+35	; 0x23
    27e2:	7c a1       	ldd	r23, Y+36	; 0x24
    27e4:	8d a1       	ldd	r24, Y+37	; 0x25
    27e6:	9e a1       	ldd	r25, Y+38	; 0x26
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	3f ef       	ldi	r19, 0xFF	; 255
    27ec:	4f e7       	ldi	r20, 0x7F	; 127
    27ee:	57 e4       	ldi	r21, 0x47	; 71
    27f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f4:	18 16       	cp	r1, r24
    27f6:	4c f5       	brge	.+82     	; 0x284a <LCD_vSendCommand+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f8:	6f a1       	ldd	r22, Y+39	; 0x27
    27fa:	78 a5       	ldd	r23, Y+40	; 0x28
    27fc:	89 a5       	ldd	r24, Y+41	; 0x29
    27fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e2       	ldi	r20, 0x20	; 32
    2806:	51 e4       	ldi	r21, 0x41	; 65
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	bc 01       	movw	r22, r24
    2812:	cd 01       	movw	r24, r26
    2814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	9a a3       	std	Y+34, r25	; 0x22
    281e:	89 a3       	std	Y+33, r24	; 0x21
    2820:	0f c0       	rjmp	.+30     	; 0x2840 <LCD_vSendCommand+0x1e4>
    2822:	88 ec       	ldi	r24, 0xC8	; 200
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	98 a3       	std	Y+32, r25	; 0x20
    2828:	8f 8f       	std	Y+31, r24	; 0x1f
    282a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    282c:	98 a1       	ldd	r25, Y+32	; 0x20
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <LCD_vSendCommand+0x1d2>
    2832:	98 a3       	std	Y+32, r25	; 0x20
    2834:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2836:	89 a1       	ldd	r24, Y+33	; 0x21
    2838:	9a a1       	ldd	r25, Y+34	; 0x22
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	9a a3       	std	Y+34, r25	; 0x22
    283e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2840:	89 a1       	ldd	r24, Y+33	; 0x21
    2842:	9a a1       	ldd	r25, Y+34	; 0x22
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	69 f7       	brne	.-38     	; 0x2822 <LCD_vSendCommand+0x1c6>
    2848:	14 c0       	rjmp	.+40     	; 0x2872 <LCD_vSendCommand+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284a:	6b a1       	ldd	r22, Y+35	; 0x23
    284c:	7c a1       	ldd	r23, Y+36	; 0x24
    284e:	8d a1       	ldd	r24, Y+37	; 0x25
    2850:	9e a1       	ldd	r25, Y+38	; 0x26
    2852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	9a a3       	std	Y+34, r25	; 0x22
    285c:	89 a3       	std	Y+33, r24	; 0x21
    285e:	89 a1       	ldd	r24, Y+33	; 0x21
    2860:	9a a1       	ldd	r25, Y+34	; 0x22
    2862:	9e 8f       	std	Y+30, r25	; 0x1e
    2864:	8d 8f       	std	Y+29, r24	; 0x1d
    2866:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2868:	9e 8d       	ldd	r25, Y+30	; 0x1e
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <LCD_vSendCommand+0x20e>
    286e:	9e 8f       	std	Y+30, r25	; 0x1e
    2870:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Put lower nipple on port*/
	GPIO_vSetPortValue(LCD_DATA_PORT, ((LCD_DATA_PORT & 0xF0) | (command << 4)));
    2872:	89 ad       	ldd	r24, Y+57	; 0x39
    2874:	98 2f       	mov	r25, r24
    2876:	92 95       	swap	r25
    2878:	90 7f       	andi	r25, 0xF0	; 240
    287a:	83 e0       	ldi	r24, 0x03	; 3
    287c:	69 2f       	mov	r22, r25
    287e:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_vSetPortValue>
	/*Trigger the Enable*/
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
    2882:	84 e0       	ldi	r24, 0x04	; 4
    2884:	62 e0       	ldi	r22, 0x02	; 2
    2886:	41 e0       	ldi	r20, 0x01	; 1
    2888:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <GPIO_vSetPinValue>
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	a0 e8       	ldi	r26, 0x80	; 128
    2892:	bf e3       	ldi	r27, 0x3F	; 63
    2894:	89 8f       	std	Y+25, r24	; 0x19
    2896:	9a 8f       	std	Y+26, r25	; 0x1a
    2898:	ab 8f       	std	Y+27, r26	; 0x1b
    289a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289c:	69 8d       	ldd	r22, Y+25	; 0x19
    289e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	4a ef       	ldi	r20, 0xFA	; 250
    28aa:	54 e4       	ldi	r21, 0x44	; 68
    28ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	8d 8b       	std	Y+21, r24	; 0x15
    28b6:	9e 8b       	std	Y+22, r25	; 0x16
    28b8:	af 8b       	std	Y+23, r26	; 0x17
    28ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28bc:	6d 89       	ldd	r22, Y+21	; 0x15
    28be:	7e 89       	ldd	r23, Y+22	; 0x16
    28c0:	8f 89       	ldd	r24, Y+23	; 0x17
    28c2:	98 8d       	ldd	r25, Y+24	; 0x18
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e8       	ldi	r20, 0x80	; 128
    28ca:	5f e3       	ldi	r21, 0x3F	; 63
    28cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d0:	88 23       	and	r24, r24
    28d2:	2c f4       	brge	.+10     	; 0x28de <LCD_vSendCommand+0x282>
		__ticks = 1;
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	9c 8b       	std	Y+20, r25	; 0x14
    28da:	8b 8b       	std	Y+19, r24	; 0x13
    28dc:	3f c0       	rjmp	.+126    	; 0x295c <LCD_vSendCommand+0x300>
	else if (__tmp > 65535)
    28de:	6d 89       	ldd	r22, Y+21	; 0x15
    28e0:	7e 89       	ldd	r23, Y+22	; 0x16
    28e2:	8f 89       	ldd	r24, Y+23	; 0x17
    28e4:	98 8d       	ldd	r25, Y+24	; 0x18
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	3f ef       	ldi	r19, 0xFF	; 255
    28ea:	4f e7       	ldi	r20, 0x7F	; 127
    28ec:	57 e4       	ldi	r21, 0x47	; 71
    28ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f2:	18 16       	cp	r1, r24
    28f4:	4c f5       	brge	.+82     	; 0x2948 <LCD_vSendCommand+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f6:	69 8d       	ldd	r22, Y+25	; 0x19
    28f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e2       	ldi	r20, 0x20	; 32
    2904:	51 e4       	ldi	r21, 0x41	; 65
    2906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	bc 01       	movw	r22, r24
    2910:	cd 01       	movw	r24, r26
    2912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	9c 8b       	std	Y+20, r25	; 0x14
    291c:	8b 8b       	std	Y+19, r24	; 0x13
    291e:	0f c0       	rjmp	.+30     	; 0x293e <LCD_vSendCommand+0x2e2>
    2920:	88 ec       	ldi	r24, 0xC8	; 200
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	9a 8b       	std	Y+18, r25	; 0x12
    2926:	89 8b       	std	Y+17, r24	; 0x11
    2928:	89 89       	ldd	r24, Y+17	; 0x11
    292a:	9a 89       	ldd	r25, Y+18	; 0x12
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	f1 f7       	brne	.-4      	; 0x292c <LCD_vSendCommand+0x2d0>
    2930:	9a 8b       	std	Y+18, r25	; 0x12
    2932:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2934:	8b 89       	ldd	r24, Y+19	; 0x13
    2936:	9c 89       	ldd	r25, Y+20	; 0x14
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	9c 8b       	std	Y+20, r25	; 0x14
    293c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293e:	8b 89       	ldd	r24, Y+19	; 0x13
    2940:	9c 89       	ldd	r25, Y+20	; 0x14
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	69 f7       	brne	.-38     	; 0x2920 <LCD_vSendCommand+0x2c4>
    2946:	14 c0       	rjmp	.+40     	; 0x2970 <LCD_vSendCommand+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2948:	6d 89       	ldd	r22, Y+21	; 0x15
    294a:	7e 89       	ldd	r23, Y+22	; 0x16
    294c:	8f 89       	ldd	r24, Y+23	; 0x17
    294e:	98 8d       	ldd	r25, Y+24	; 0x18
    2950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	9c 8b       	std	Y+20, r25	; 0x14
    295a:	8b 8b       	std	Y+19, r24	; 0x13
    295c:	8b 89       	ldd	r24, Y+19	; 0x13
    295e:	9c 89       	ldd	r25, Y+20	; 0x14
    2960:	98 8b       	std	Y+16, r25	; 0x10
    2962:	8f 87       	std	Y+15, r24	; 0x0f
    2964:	8f 85       	ldd	r24, Y+15	; 0x0f
    2966:	98 89       	ldd	r25, Y+16	; 0x10
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <LCD_vSendCommand+0x30c>
    296c:	98 8b       	std	Y+16, r25	; 0x10
    296e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    2970:	84 e0       	ldi	r24, 0x04	; 4
    2972:	62 e0       	ldi	r22, 0x02	; 2
    2974:	40 e0       	ldi	r20, 0x00	; 0
    2976:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <GPIO_vSetPinValue>
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	a0 e8       	ldi	r26, 0x80	; 128
    2980:	bf e3       	ldi	r27, 0x3F	; 63
    2982:	8b 87       	std	Y+11, r24	; 0x0b
    2984:	9c 87       	std	Y+12, r25	; 0x0c
    2986:	ad 87       	std	Y+13, r26	; 0x0d
    2988:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298a:	6b 85       	ldd	r22, Y+11	; 0x0b
    298c:	7c 85       	ldd	r23, Y+12	; 0x0c
    298e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2990:	9e 85       	ldd	r25, Y+14	; 0x0e
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	4a ef       	ldi	r20, 0xFA	; 250
    2998:	54 e4       	ldi	r21, 0x44	; 68
    299a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	8f 83       	std	Y+7, r24	; 0x07
    29a4:	98 87       	std	Y+8, r25	; 0x08
    29a6:	a9 87       	std	Y+9, r26	; 0x09
    29a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29aa:	6f 81       	ldd	r22, Y+7	; 0x07
    29ac:	78 85       	ldd	r23, Y+8	; 0x08
    29ae:	89 85       	ldd	r24, Y+9	; 0x09
    29b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	40 e8       	ldi	r20, 0x80	; 128
    29b8:	5f e3       	ldi	r21, 0x3F	; 63
    29ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29be:	88 23       	and	r24, r24
    29c0:	2c f4       	brge	.+10     	; 0x29cc <LCD_vSendCommand+0x370>
		__ticks = 1;
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	9e 83       	std	Y+6, r25	; 0x06
    29c8:	8d 83       	std	Y+5, r24	; 0x05
    29ca:	3f c0       	rjmp	.+126    	; 0x2a4a <LCD_vSendCommand+0x3ee>
	else if (__tmp > 65535)
    29cc:	6f 81       	ldd	r22, Y+7	; 0x07
    29ce:	78 85       	ldd	r23, Y+8	; 0x08
    29d0:	89 85       	ldd	r24, Y+9	; 0x09
    29d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	3f ef       	ldi	r19, 0xFF	; 255
    29d8:	4f e7       	ldi	r20, 0x7F	; 127
    29da:	57 e4       	ldi	r21, 0x47	; 71
    29dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29e0:	18 16       	cp	r1, r24
    29e2:	4c f5       	brge	.+82     	; 0x2a36 <LCD_vSendCommand+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 e2       	ldi	r20, 0x20	; 32
    29f2:	51 e4       	ldi	r21, 0x41	; 65
    29f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	bc 01       	movw	r22, r24
    29fe:	cd 01       	movw	r24, r26
    2a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	9e 83       	std	Y+6, r25	; 0x06
    2a0a:	8d 83       	std	Y+5, r24	; 0x05
    2a0c:	0f c0       	rjmp	.+30     	; 0x2a2c <LCD_vSendCommand+0x3d0>
    2a0e:	88 ec       	ldi	r24, 0xC8	; 200
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	9c 83       	std	Y+4, r25	; 0x04
    2a14:	8b 83       	std	Y+3, r24	; 0x03
    2a16:	8b 81       	ldd	r24, Y+3	; 0x03
    2a18:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <LCD_vSendCommand+0x3be>
    2a1e:	9c 83       	std	Y+4, r25	; 0x04
    2a20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a22:	8d 81       	ldd	r24, Y+5	; 0x05
    2a24:	9e 81       	ldd	r25, Y+6	; 0x06
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	9e 83       	std	Y+6, r25	; 0x06
    2a2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a30:	00 97       	sbiw	r24, 0x00	; 0
    2a32:	69 f7       	brne	.-38     	; 0x2a0e <LCD_vSendCommand+0x3b2>
    2a34:	14 c0       	rjmp	.+40     	; 0x2a5e <LCD_vSendCommand+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a36:	6f 81       	ldd	r22, Y+7	; 0x07
    2a38:	78 85       	ldd	r23, Y+8	; 0x08
    2a3a:	89 85       	ldd	r24, Y+9	; 0x09
    2a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	9e 83       	std	Y+6, r25	; 0x06
    2a48:	8d 83       	std	Y+5, r24	; 0x05
    2a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4e:	9a 83       	std	Y+2, r25	; 0x02
    2a50:	89 83       	std	Y+1, r24	; 0x01
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	9a 81       	ldd	r25, Y+2	; 0x02
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	f1 f7       	brne	.-4      	; 0x2a56 <LCD_vSendCommand+0x3fa>
    2a5a:	9a 83       	std	Y+2, r25	; 0x02
    2a5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    2a5e:	e9 96       	adiw	r28, 0x39	; 57
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	f8 94       	cli
    2a64:	de bf       	out	0x3e, r29	; 62
    2a66:	0f be       	out	0x3f, r0	; 63
    2a68:	cd bf       	out	0x3d, r28	; 61
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <LCD_vClear>:

void LCD_vClear(void)
{
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
	LCD_vSendCommand(0x01);
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_vSendCommand>
}
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret

00002a84 <LCD_vSendString>:


void LCD_vSendString(const char *str)
{
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <LCD_vSendString+0x6>
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	9a 83       	std	Y+2, r25	; 0x02
    2a90:	89 83       	std	Y+1, r24	; 0x01
    2a92:	0a c0       	rjmp	.+20     	; 0x2aa8 <LCD_vSendString+0x24>
	while(*str != '\0')
	{
		LCD_vSendChar(*str);
    2a94:	e9 81       	ldd	r30, Y+1	; 0x01
    2a96:	fa 81       	ldd	r31, Y+2	; 0x02
    2a98:	80 81       	ld	r24, Z
    2a9a:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_vSendChar>
		str++;
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa2:	01 96       	adiw	r24, 0x01	; 1
    2aa4:	9a 83       	std	Y+2, r25	; 0x02
    2aa6:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vSendString(const char *str)
{
	while(*str != '\0')
    2aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    2aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    2aac:	80 81       	ld	r24, Z
    2aae:	88 23       	and	r24, r24
    2ab0:	89 f7       	brne	.-30     	; 0x2a94 <LCD_vSendString+0x10>
	{
		LCD_vSendChar(*str);
		str++;
	}
}
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	08 95       	ret

00002abc <LCD_vWriteNumber>:

void LCD_vWriteNumber(s32 num)//500
{
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <LCD_vWriteNumber+0x6>
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <LCD_vWriteNumber+0x8>
    2ac4:	00 d0       	rcall	.+0      	; 0x2ac6 <LCD_vWriteNumber+0xa>
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
    2aca:	9e 83       	std	Y+6, r25	; 0x06
    2acc:	8d 83       	std	Y+5, r24	; 0x05
	s32 reverse = 0, count = 0;
    2ace:	1c 82       	std	Y+4, r1	; 0x04
    2ad0:	1b 82       	std	Y+3, r1	; 0x03
    2ad2:	1a 82       	std	Y+2, r1	; 0x02
    2ad4:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    2ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	59 f5       	brne	.+86     	; 0x2b34 <LCD_vWriteNumber+0x78>
	{
		LCD_vSendChar('0');
    2ade:	80 e3       	ldi	r24, 0x30	; 48
    2ae0:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_vSendChar>
    2ae4:	4a c0       	rjmp	.+148    	; 0x2b7a <LCD_vWriteNumber+0xbe>
	}
	else
	{
		while(num)
		{
			reverse = reverse * 10 + num % 10;
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	9c 01       	movw	r18, r24
    2aec:	22 0f       	add	r18, r18
    2aee:	33 1f       	adc	r19, r19
    2af0:	c9 01       	movw	r24, r18
    2af2:	88 0f       	add	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	f9 01       	movw	r30, r18
    2afc:	e8 0f       	add	r30, r24
    2afe:	f9 1f       	adc	r31, r25
    2b00:	8d 81       	ldd	r24, Y+5	; 0x05
    2b02:	9e 81       	ldd	r25, Y+6	; 0x06
    2b04:	2a e0       	ldi	r18, 0x0A	; 10
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	b9 01       	movw	r22, r18
    2b0a:	0e 94 3e 1c 	call	0x387c	; 0x387c <__divmodhi4>
    2b0e:	8e 0f       	add	r24, r30
    2b10:	9f 1f       	adc	r25, r31
    2b12:	9c 83       	std	Y+4, r25	; 0x04
    2b14:	8b 83       	std	Y+3, r24	; 0x03
			num/=10;
    2b16:	8d 81       	ldd	r24, Y+5	; 0x05
    2b18:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1a:	2a e0       	ldi	r18, 0x0A	; 10
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	b9 01       	movw	r22, r18
    2b20:	0e 94 3e 1c 	call	0x387c	; 0x387c <__divmodhi4>
    2b24:	cb 01       	movw	r24, r22
    2b26:	9e 83       	std	Y+6, r25	; 0x06
    2b28:	8d 83       	std	Y+5, r24	; 0x05
			count++;
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2e:	01 96       	adiw	r24, 0x01	; 1
    2b30:	9a 83       	std	Y+2, r25	; 0x02
    2b32:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_vSendChar('0');
	}
	else
	{
		while(num)
    2b34:	8d 81       	ldd	r24, Y+5	; 0x05
    2b36:	9e 81       	ldd	r25, Y+6	; 0x06
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	a9 f6       	brne	.-86     	; 0x2ae6 <LCD_vWriteNumber+0x2a>
    2b3c:	19 c0       	rjmp	.+50     	; 0x2b70 <LCD_vWriteNumber+0xb4>
			count++;
		}

		while(count > 0)//005
		{
			LCD_vSendChar((reverse%10) + '0');
    2b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b40:	9c 81       	ldd	r25, Y+4	; 0x04
    2b42:	2a e0       	ldi	r18, 0x0A	; 10
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	b9 01       	movw	r22, r18
    2b48:	0e 94 3e 1c 	call	0x387c	; 0x387c <__divmodhi4>
    2b4c:	80 5d       	subi	r24, 0xD0	; 208
    2b4e:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_vSendChar>
			reverse/=10;
    2b52:	8b 81       	ldd	r24, Y+3	; 0x03
    2b54:	9c 81       	ldd	r25, Y+4	; 0x04
    2b56:	2a e0       	ldi	r18, 0x0A	; 10
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	b9 01       	movw	r22, r18
    2b5c:	0e 94 3e 1c 	call	0x387c	; 0x387c <__divmodhi4>
    2b60:	cb 01       	movw	r24, r22
    2b62:	9c 83       	std	Y+4, r25	; 0x04
    2b64:	8b 83       	std	Y+3, r24	; 0x03
			count--;
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	9a 83       	std	Y+2, r25	; 0x02
    2b6e:	89 83       	std	Y+1, r24	; 0x01
			reverse = reverse * 10 + num % 10;
			num/=10;
			count++;
		}

		while(count > 0)//005
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	9a 81       	ldd	r25, Y+2	; 0x02
    2b74:	18 16       	cp	r1, r24
    2b76:	19 06       	cpc	r1, r25
    2b78:	14 f3       	brlt	.-60     	; 0x2b3e <LCD_vWriteNumber+0x82>
			LCD_vSendChar((reverse%10) + '0');
			reverse/=10;
			count--;
		}
	}
}
    2b7a:	26 96       	adiw	r28, 0x06	; 6
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <LCD_vSendNumber>:
void LCD_vSendNumber(s32 num)
{
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	00 d0       	rcall	.+0      	; 0x2b92 <LCD_vSendNumber+0x6>
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
    2b96:	9a 83       	std	Y+2, r25	; 0x02
    2b98:	89 83       	std	Y+1, r24	; 0x01
	if(num >= 0)
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9e:	99 23       	and	r25, r25
    2ba0:	2c f0       	brlt	.+10     	; 0x2bac <LCD_vSendNumber+0x20>
	{
		LCD_vWriteNumber(num);
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba6:	0e 94 5e 15 	call	0x2abc	; 0x2abc <LCD_vWriteNumber>
    2baa:	0a c0       	rjmp	.+20     	; 0x2bc0 <LCD_vSendNumber+0x34>
	}
	else
	{
		LCD_vSendChar('-');
    2bac:	8d e2       	ldi	r24, 0x2D	; 45
    2bae:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_vSendChar>
		LCD_vWriteNumber(-1*num);
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb6:	90 95       	com	r25
    2bb8:	81 95       	neg	r24
    2bba:	9f 4f       	sbci	r25, 0xFF	; 255
    2bbc:	0e 94 5e 15 	call	0x2abc	; 0x2abc <LCD_vWriteNumber>
	}
}
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	cf 91       	pop	r28
    2bc6:	df 91       	pop	r29
    2bc8:	08 95       	ret

00002bca <LCD_vDisplayCustomChar>:

void LCD_vDisplayCustomChar(u8 charId)
{
    2bca:	df 93       	push	r29
    2bcc:	cf 93       	push	r28
    2bce:	0f 92       	push	r0
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
    2bd4:	89 83       	std	Y+1, r24	; 0x01
	if(charId < 8)
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	88 30       	cpi	r24, 0x08	; 8
    2bda:	18 f4       	brcc	.+6      	; 0x2be2 <LCD_vDisplayCustomChar+0x18>
	{
		LCD_vSendChar(charId);
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_vSendChar>
	}
	else
	{
		//Error
	}
}
    2be2:	0f 90       	pop	r0
    2be4:	cf 91       	pop	r28
    2be6:	df 91       	pop	r29
    2be8:	08 95       	ret

00002bea <LCD_vSaveCustomChar>:

void LCD_vSaveCustomChar(u8* charArr, u8 charId)
{
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	00 d0       	rcall	.+0      	; 0x2bf0 <LCD_vSaveCustomChar+0x6>
    2bf0:	00 d0       	rcall	.+0      	; 0x2bf2 <LCD_vSaveCustomChar+0x8>
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    2bf6:	9b 83       	std	Y+3, r25	; 0x03
    2bf8:	8a 83       	std	Y+2, r24	; 0x02
    2bfa:	6c 83       	std	Y+4, r22	; 0x04
	if(charId < 8)
    2bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfe:	88 30       	cpi	r24, 0x08	; 8
    2c00:	10 f5       	brcc	.+68     	; 0x2c46 <LCD_vSaveCustomChar+0x5c>
	{
		LCD_vSendCommand(LCD_CGRAM_BASE_ADDRESS + (charId * 8));
    2c02:	8c 81       	ldd	r24, Y+4	; 0x04
    2c04:	88 2f       	mov	r24, r24
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	08 96       	adiw	r24, 0x08	; 8
    2c0a:	88 0f       	add	r24, r24
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	88 0f       	add	r24, r24
    2c10:	99 1f       	adc	r25, r25
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_vSendCommand>
		for(u8 i=0; i<8; i++)
    2c1a:	19 82       	std	Y+1, r1	; 0x01
    2c1c:	0e c0       	rjmp	.+28     	; 0x2c3a <LCD_vSaveCustomChar+0x50>
		{
			LCD_vSendChar(charArr[i]);
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	28 2f       	mov	r18, r24
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	8a 81       	ldd	r24, Y+2	; 0x02
    2c26:	9b 81       	ldd	r25, Y+3	; 0x03
    2c28:	fc 01       	movw	r30, r24
    2c2a:	e2 0f       	add	r30, r18
    2c2c:	f3 1f       	adc	r31, r19
    2c2e:	80 81       	ld	r24, Z
    2c30:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_vSendChar>
void LCD_vSaveCustomChar(u8* charArr, u8 charId)
{
	if(charId < 8)
	{
		LCD_vSendCommand(LCD_CGRAM_BASE_ADDRESS + (charId * 8));
		for(u8 i=0; i<8; i++)
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	8f 5f       	subi	r24, 0xFF	; 255
    2c38:	89 83       	std	Y+1, r24	; 0x01
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	88 30       	cpi	r24, 0x08	; 8
    2c3e:	78 f3       	brcs	.-34     	; 0x2c1e <LCD_vSaveCustomChar+0x34>
		{
			LCD_vSendChar(charArr[i]);
		}
		LCD_vSendCommand(LCD_DDRAM_BASE_ADDRESS);
    2c40:	80 e8       	ldi	r24, 0x80	; 128
    2c42:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_vSendCommand>
	}
	else
	{
		//Error
	}
}
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	cf 91       	pop	r28
    2c50:	df 91       	pop	r29
    2c52:	08 95       	ret

00002c54 <LCD_vSetCursorPosition>:

void LCD_vSetCursorPosition(u8 xPos,u8 yPos)
{
    2c54:	df 93       	push	r29
    2c56:	cf 93       	push	r28
    2c58:	00 d0       	rcall	.+0      	; 0x2c5a <LCD_vSetCursorPosition+0x6>
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	89 83       	std	Y+1, r24	; 0x01
    2c60:	6a 83       	std	Y+2, r22	; 0x02
	//Location is at first line
	if(xPos==0)
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	88 23       	and	r24, r24
    2c66:	29 f4       	brne	.+10     	; 0x2c72 <LCD_vSetCursorPosition+0x1e>
	{
		LCD_vSendCommand(0x80 + yPos);
    2c68:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6a:	80 58       	subi	r24, 0x80	; 128
    2c6c:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_vSendCommand>
    2c70:	07 c0       	rjmp	.+14     	; 0x2c80 <LCD_vSetCursorPosition+0x2c>
	}
	//Location is at second line
	else if(xPos == 1)
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	81 30       	cpi	r24, 0x01	; 1
    2c76:	21 f4       	brne	.+8      	; 0x2c80 <LCD_vSetCursorPosition+0x2c>
	{
		LCD_vSendCommand(0x80 + 0x40 + yPos);
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	80 54       	subi	r24, 0x40	; 64
    2c7c:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_vSendCommand>
	}
	else
	{
		//Error
	}
}
    2c80:	0f 90       	pop	r0
    2c82:	0f 90       	pop	r0
    2c84:	cf 91       	pop	r28
    2c86:	df 91       	pop	r29
    2c88:	08 95       	ret

00002c8a <LCD_vSendFloat>:


void LCD_vSendFloat(f32 floatNumber, u8 precision)//123.4567
{
    2c8a:	ef 92       	push	r14
    2c8c:	ff 92       	push	r15
    2c8e:	0f 93       	push	r16
    2c90:	1f 93       	push	r17
    2c92:	df 93       	push	r29
    2c94:	cf 93       	push	r28
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    2c9a:	29 97       	sbiw	r28, 0x09	; 9
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
    2ca6:	6d 83       	std	Y+5, r22	; 0x05
    2ca8:	7e 83       	std	Y+6, r23	; 0x06
    2caa:	8f 83       	std	Y+7, r24	; 0x07
    2cac:	98 87       	std	Y+8, r25	; 0x08
    2cae:	49 87       	std	Y+9, r20	; 0x09
	u32 i = (u32) floatNumber;//123
    2cb0:	6d 81       	ldd	r22, Y+5	; 0x05
    2cb2:	7e 81       	ldd	r23, Y+6	; 0x06
    2cb4:	8f 81       	ldd	r24, Y+7	; 0x07
    2cb6:	98 85       	ldd	r25, Y+8	; 0x08
    2cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	9c 83       	std	Y+4, r25	; 0x04
    2cc2:	8b 83       	std	Y+3, r24	; 0x03
	u32 f = poW(10, precision) * (floatNumber - (f32)i);//4567
    2cc4:	89 85       	ldd	r24, Y+9	; 0x09
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	8a e0       	ldi	r24, 0x0A	; 10
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	b9 01       	movw	r22, r18
    2cd0:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <poW>
    2cd4:	aa 27       	eor	r26, r26
    2cd6:	97 fd       	sbrc	r25, 7
    2cd8:	a0 95       	com	r26
    2cda:	ba 2f       	mov	r27, r26
    2cdc:	bc 01       	movw	r22, r24
    2cde:	cd 01       	movw	r24, r26
    2ce0:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2ce4:	7b 01       	movw	r14, r22
    2ce6:	8c 01       	movw	r16, r24
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	9c 81       	ldd	r25, Y+4	; 0x04
    2cec:	cc 01       	movw	r24, r24
    2cee:	a0 e0       	ldi	r26, 0x00	; 0
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	bc 01       	movw	r22, r24
    2cf4:	cd 01       	movw	r24, r26
    2cf6:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    2cfa:	9b 01       	movw	r18, r22
    2cfc:	ac 01       	movw	r20, r24
    2cfe:	6d 81       	ldd	r22, Y+5	; 0x05
    2d00:	7e 81       	ldd	r23, Y+6	; 0x06
    2d02:	8f 81       	ldd	r24, Y+7	; 0x07
    2d04:	98 85       	ldd	r25, Y+8	; 0x08
    2d06:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	9c 01       	movw	r18, r24
    2d10:	ad 01       	movw	r20, r26
    2d12:	c8 01       	movw	r24, r16
    2d14:	b7 01       	movw	r22, r14
    2d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	bc 01       	movw	r22, r24
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	9a 83       	std	Y+2, r25	; 0x02
    2d2c:	89 83       	std	Y+1, r24	; 0x01
	LCD_vSendNumber(i);
    2d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d30:	9c 81       	ldd	r25, Y+4	; 0x04
    2d32:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <LCD_vSendNumber>
	LCD_vSendChar('.');
    2d36:	8e e2       	ldi	r24, 0x2E	; 46
    2d38:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_vSendChar>
	LCD_vSendNumber(f);
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d40:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <LCD_vSendNumber>
}
    2d44:	29 96       	adiw	r28, 0x09	; 9
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	de bf       	out	0x3e, r29	; 62
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	cd bf       	out	0x3d, r28	; 61
    2d50:	cf 91       	pop	r28
    2d52:	df 91       	pop	r29
    2d54:	1f 91       	pop	r17
    2d56:	0f 91       	pop	r16
    2d58:	ff 90       	pop	r15
    2d5a:	ef 90       	pop	r14
    2d5c:	08 95       	ret

00002d5e <poW>:

int poW(int base, int exponent)
{
    2d5e:	df 93       	push	r29
    2d60:	cf 93       	push	r28
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	28 97       	sbiw	r28, 0x08	; 8
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	f8 94       	cli
    2d6c:	de bf       	out	0x3e, r29	; 62
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	cd bf       	out	0x3d, r28	; 61
    2d72:	9e 83       	std	Y+6, r25	; 0x06
    2d74:	8d 83       	std	Y+5, r24	; 0x05
    2d76:	78 87       	std	Y+8, r23	; 0x08
    2d78:	6f 83       	std	Y+7, r22	; 0x07
	int l=1, i;
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	9c 83       	std	Y+4, r25	; 0x04
    2d80:	8b 83       	std	Y+3, r24	; 0x03
	if(base == 0)
    2d82:	8d 81       	ldd	r24, Y+5	; 0x05
    2d84:	9e 81       	ldd	r25, Y+6	; 0x06
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	61 f4       	brne	.+24     	; 0x2da2 <poW+0x44>
	{
		if(exponent == 0)
    2d8a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d8c:	98 85       	ldd	r25, Y+8	; 0x08
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	29 f4       	brne	.+10     	; 0x2d9c <poW+0x3e>
		{
			l = -1;
    2d92:	8f ef       	ldi	r24, 0xFF	; 255
    2d94:	9f ef       	ldi	r25, 0xFF	; 255
    2d96:	9c 83       	std	Y+4, r25	; 0x04
    2d98:	8b 83       	std	Y+3, r24	; 0x03
    2d9a:	20 c0       	rjmp	.+64     	; 0x2ddc <poW+0x7e>
		}
		else
		{
			l = 0;
    2d9c:	1c 82       	std	Y+4, r1	; 0x04
    2d9e:	1b 82       	std	Y+3, r1	; 0x03
    2da0:	1d c0       	rjmp	.+58     	; 0x2ddc <poW+0x7e>
		}
	}
	else
	{
		for(i=0; i<exponent; i++)
    2da2:	1a 82       	std	Y+2, r1	; 0x02
    2da4:	19 82       	std	Y+1, r1	; 0x01
    2da6:	13 c0       	rjmp	.+38     	; 0x2dce <poW+0x70>
		{
			l *= base;
    2da8:	2b 81       	ldd	r18, Y+3	; 0x03
    2daa:	3c 81       	ldd	r19, Y+4	; 0x04
    2dac:	8d 81       	ldd	r24, Y+5	; 0x05
    2dae:	9e 81       	ldd	r25, Y+6	; 0x06
    2db0:	ac 01       	movw	r20, r24
    2db2:	24 9f       	mul	r18, r20
    2db4:	c0 01       	movw	r24, r0
    2db6:	25 9f       	mul	r18, r21
    2db8:	90 0d       	add	r25, r0
    2dba:	34 9f       	mul	r19, r20
    2dbc:	90 0d       	add	r25, r0
    2dbe:	11 24       	eor	r1, r1
    2dc0:	9c 83       	std	Y+4, r25	; 0x04
    2dc2:	8b 83       	std	Y+3, r24	; 0x03
			l = 0;
		}
	}
	else
	{
		for(i=0; i<exponent; i++)
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	9a 83       	std	Y+2, r25	; 0x02
    2dcc:	89 83       	std	Y+1, r24	; 0x01
    2dce:	29 81       	ldd	r18, Y+1	; 0x01
    2dd0:	3a 81       	ldd	r19, Y+2	; 0x02
    2dd2:	8f 81       	ldd	r24, Y+7	; 0x07
    2dd4:	98 85       	ldd	r25, Y+8	; 0x08
    2dd6:	28 17       	cp	r18, r24
    2dd8:	39 07       	cpc	r19, r25
    2dda:	34 f3       	brlt	.-52     	; 0x2da8 <poW+0x4a>
		{
			l *= base;
		}
	}
	return l;
    2ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dde:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2de0:	28 96       	adiw	r28, 0x08	; 8
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <KEYPAD_vInit>:
		{'/', '9', '8', '7'},
		{'+', '=', '0', 'd'}
};

void KEYPAD_vInit(void)
{
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
	#if KEYPAD_PORT_INPUT == HIGH_NIBBLE
		GPIO_vSetPortDirection(KEYPAD_PORT, 0x0F);
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	6f e0       	ldi	r22, 0x0F	; 15
    2dfe:	0e 94 d6 08 	call	0x11ac	; 0x11ac <GPIO_vSetPortDirection>
		GPIO_vSetPortValue(KEYPAD_PORT, 0xF0);//Activate Pull-up resistor
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	60 ef       	ldi	r22, 0xF0	; 240
    2e06:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_vSetPortValue>
	#elif KEYPAD_PORT_INPUT == LOW_NIBBLE
		GPIO_vSetPortDirection(KEYPAD_PORT, 0xF0);
		GPIO_vSetPortValue(KEYPAD_PORT, 0x0F);//Activate Pull-up resistor
	#endif
}
    2e0a:	cf 91       	pop	r28
    2e0c:	df 91       	pop	r29
    2e0e:	08 95       	ret

00002e10 <KEYPAD_u8GetPressed>:

u8   KEYPAD_u8GetPressed(void)
{
    2e10:	df 93       	push	r29
    2e12:	cf 93       	push	r28
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
    2e18:	62 97       	sbiw	r28, 0x12	; 18
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	f8 94       	cli
    2e1e:	de bf       	out	0x3e, r29	; 62
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ReturnValue = -1; // Indication for Nothing
    2e24:	8f ef       	ldi	r24, 0xFF	; 255
    2e26:	89 8b       	std	Y+17, r24	; 0x11
	u8 Local_u8RowIdx=0, Local_u8ColumnIdx=0;
    2e28:	18 8a       	std	Y+16, r1	; 0x10
    2e2a:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_u8ColumnIdx=0; Local_u8ColumnIdx<COLUMNS_NO; Local_u8ColumnIdx++)
    2e2c:	1f 86       	std	Y+15, r1	; 0x0f
    2e2e:	b0 c0       	rjmp	.+352    	; 0x2f90 <KEYPAD_u8GetPressed+0x180>
	{
		GPIO_vSetPinValue(KEYPAD_PORT, Local_u8ColumnIdx, LOW);
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e34:	40 e0       	ldi	r20, 0x00	; 0
    2e36:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <GPIO_vSetPinValue>
		for(Local_u8RowIdx=0; Local_u8RowIdx<ROWS_NO; Local_u8RowIdx++)
    2e3a:	18 8a       	std	Y+16, r1	; 0x10
    2e3c:	9d c0       	rjmp	.+314    	; 0x2f78 <KEYPAD_u8GetPressed+0x168>
		{
			if(GPIO_u8GetPinValue(KEYPAD_PORT, Local_u8RowIdx + 4) == 0)
    2e3e:	88 89       	ldd	r24, Y+16	; 0x10
    2e40:	98 2f       	mov	r25, r24
    2e42:	9c 5f       	subi	r25, 0xFC	; 252
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	69 2f       	mov	r22, r25
    2e48:	0e 94 a9 0b 	call	0x1752	; 0x1752 <GPIO_u8GetPinValue>
    2e4c:	88 23       	and	r24, r24
    2e4e:	09 f0       	breq	.+2      	; 0x2e52 <KEYPAD_u8GetPressed+0x42>
    2e50:	90 c0       	rjmp	.+288    	; 0x2f72 <KEYPAD_u8GetPressed+0x162>
			{
				Local_u8ReturnValue = KEYPAD_u8Values[Local_u8RowIdx][Local_u8ColumnIdx];
    2e52:	88 89       	ldd	r24, Y+16	; 0x10
    2e54:	48 2f       	mov	r20, r24
    2e56:	50 e0       	ldi	r21, 0x00	; 0
    2e58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	ca 01       	movw	r24, r20
    2e60:	88 0f       	add	r24, r24
    2e62:	99 1f       	adc	r25, r25
    2e64:	88 0f       	add	r24, r24
    2e66:	99 1f       	adc	r25, r25
    2e68:	82 0f       	add	r24, r18
    2e6a:	93 1f       	adc	r25, r19
    2e6c:	fc 01       	movw	r30, r24
    2e6e:	e2 52       	subi	r30, 0x22	; 34
    2e70:	fe 4f       	sbci	r31, 0xFE	; 254
    2e72:	80 81       	ld	r24, Z
    2e74:	89 8b       	std	Y+17, r24	; 0x11
				while(GPIO_u8GetPinValue(KEYPAD_PORT, Local_u8RowIdx + 4) == 0);
    2e76:	88 89       	ldd	r24, Y+16	; 0x10
    2e78:	98 2f       	mov	r25, r24
    2e7a:	9c 5f       	subi	r25, 0xFC	; 252
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	69 2f       	mov	r22, r25
    2e80:	0e 94 a9 0b 	call	0x1752	; 0x1752 <GPIO_u8GetPinValue>
    2e84:	88 23       	and	r24, r24
    2e86:	b9 f3       	breq	.-18     	; 0x2e76 <KEYPAD_u8GetPressed+0x66>
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	a0 e2       	ldi	r26, 0x20	; 32
    2e8e:	b1 e4       	ldi	r27, 0x41	; 65
    2e90:	8b 87       	std	Y+11, r24	; 0x0b
    2e92:	9c 87       	std	Y+12, r25	; 0x0c
    2e94:	ad 87       	std	Y+13, r26	; 0x0d
    2e96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	4a ef       	ldi	r20, 0xFA	; 250
    2ea6:	54 e4       	ldi	r21, 0x44	; 68
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	8f 83       	std	Y+7, r24	; 0x07
    2eb2:	98 87       	std	Y+8, r25	; 0x08
    2eb4:	a9 87       	std	Y+9, r26	; 0x09
    2eb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eba:	78 85       	ldd	r23, Y+8	; 0x08
    2ebc:	89 85       	ldd	r24, Y+9	; 0x09
    2ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e8       	ldi	r20, 0x80	; 128
    2ec6:	5f e3       	ldi	r21, 0x3F	; 63
    2ec8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ecc:	88 23       	and	r24, r24
    2ece:	2c f4       	brge	.+10     	; 0x2eda <KEYPAD_u8GetPressed+0xca>
		__ticks = 1;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	9e 83       	std	Y+6, r25	; 0x06
    2ed6:	8d 83       	std	Y+5, r24	; 0x05
    2ed8:	3f c0       	rjmp	.+126    	; 0x2f58 <KEYPAD_u8GetPressed+0x148>
	else if (__tmp > 65535)
    2eda:	6f 81       	ldd	r22, Y+7	; 0x07
    2edc:	78 85       	ldd	r23, Y+8	; 0x08
    2ede:	89 85       	ldd	r24, Y+9	; 0x09
    2ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	3f ef       	ldi	r19, 0xFF	; 255
    2ee6:	4f e7       	ldi	r20, 0x7F	; 127
    2ee8:	57 e4       	ldi	r21, 0x47	; 71
    2eea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eee:	18 16       	cp	r1, r24
    2ef0:	4c f5       	brge	.+82     	; 0x2f44 <KEYPAD_u8GetPressed+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e2       	ldi	r20, 0x20	; 32
    2f00:	51 e4       	ldi	r21, 0x41	; 65
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	cd 01       	movw	r24, r26
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	9e 83       	std	Y+6, r25	; 0x06
    2f18:	8d 83       	std	Y+5, r24	; 0x05
    2f1a:	0f c0       	rjmp	.+30     	; 0x2f3a <KEYPAD_u8GetPressed+0x12a>
    2f1c:	88 ec       	ldi	r24, 0xC8	; 200
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	9c 83       	std	Y+4, r25	; 0x04
    2f22:	8b 83       	std	Y+3, r24	; 0x03
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	9c 81       	ldd	r25, Y+4	; 0x04
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <KEYPAD_u8GetPressed+0x118>
    2f2c:	9c 83       	std	Y+4, r25	; 0x04
    2f2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f30:	8d 81       	ldd	r24, Y+5	; 0x05
    2f32:	9e 81       	ldd	r25, Y+6	; 0x06
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	9e 83       	std	Y+6, r25	; 0x06
    2f38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	69 f7       	brne	.-38     	; 0x2f1c <KEYPAD_u8GetPressed+0x10c>
    2f42:	14 c0       	rjmp	.+40     	; 0x2f6c <KEYPAD_u8GetPressed+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f44:	6f 81       	ldd	r22, Y+7	; 0x07
    2f46:	78 85       	ldd	r23, Y+8	; 0x08
    2f48:	89 85       	ldd	r24, Y+9	; 0x09
    2f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	9e 83       	std	Y+6, r25	; 0x06
    2f56:	8d 83       	std	Y+5, r24	; 0x05
    2f58:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5c:	9a 83       	std	Y+2, r25	; 0x02
    2f5e:	89 83       	std	Y+1, r24	; 0x01
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	9a 81       	ldd	r25, Y+2	; 0x02
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	f1 f7       	brne	.-4      	; 0x2f64 <KEYPAD_u8GetPressed+0x154>
    2f68:	9a 83       	std	Y+2, r25	; 0x02
    2f6a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
				return Local_u8ReturnValue;
    2f6c:	89 89       	ldd	r24, Y+17	; 0x11
    2f6e:	8a 8b       	std	Y+18, r24	; 0x12
    2f70:	15 c0       	rjmp	.+42     	; 0x2f9c <KEYPAD_u8GetPressed+0x18c>
	u8 Local_u8ReturnValue = -1; // Indication for Nothing
	u8 Local_u8RowIdx=0, Local_u8ColumnIdx=0;
	for(Local_u8ColumnIdx=0; Local_u8ColumnIdx<COLUMNS_NO; Local_u8ColumnIdx++)
	{
		GPIO_vSetPinValue(KEYPAD_PORT, Local_u8ColumnIdx, LOW);
		for(Local_u8RowIdx=0; Local_u8RowIdx<ROWS_NO; Local_u8RowIdx++)
    2f72:	88 89       	ldd	r24, Y+16	; 0x10
    2f74:	8f 5f       	subi	r24, 0xFF	; 255
    2f76:	88 8b       	std	Y+16, r24	; 0x10
    2f78:	88 89       	ldd	r24, Y+16	; 0x10
    2f7a:	84 30       	cpi	r24, 0x04	; 4
    2f7c:	08 f4       	brcc	.+2      	; 0x2f80 <KEYPAD_u8GetPressed+0x170>
    2f7e:	5f cf       	rjmp	.-322    	; 0x2e3e <KEYPAD_u8GetPressed+0x2e>
				while(GPIO_u8GetPinValue(KEYPAD_PORT, Local_u8RowIdx + 4) == 0);
				_delay_ms(10);
				return Local_u8ReturnValue;
			}
		}
		GPIO_vSetPinValue(KEYPAD_PORT, Local_u8ColumnIdx, HIGH);
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f84:	41 e0       	ldi	r20, 0x01	; 1
    2f86:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <GPIO_vSetPinValue>

u8   KEYPAD_u8GetPressed(void)
{
	u8 Local_u8ReturnValue = -1; // Indication for Nothing
	u8 Local_u8RowIdx=0, Local_u8ColumnIdx=0;
	for(Local_u8ColumnIdx=0; Local_u8ColumnIdx<COLUMNS_NO; Local_u8ColumnIdx++)
    2f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f8c:	8f 5f       	subi	r24, 0xFF	; 255
    2f8e:	8f 87       	std	Y+15, r24	; 0x0f
    2f90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f92:	84 30       	cpi	r24, 0x04	; 4
    2f94:	08 f4       	brcc	.+2      	; 0x2f98 <KEYPAD_u8GetPressed+0x188>
    2f96:	4c cf       	rjmp	.-360    	; 0x2e30 <KEYPAD_u8GetPressed+0x20>
				return Local_u8ReturnValue;
			}
		}
		GPIO_vSetPinValue(KEYPAD_PORT, Local_u8ColumnIdx, HIGH);
	}
	return Local_u8ReturnValue;
    2f98:	89 89       	ldd	r24, Y+17	; 0x11
    2f9a:	8a 8b       	std	Y+18, r24	; 0x12
    2f9c:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2f9e:	62 96       	adiw	r28, 0x12	; 18
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	f8 94       	cli
    2fa4:	de bf       	out	0x3e, r29	; 62
    2fa6:	0f be       	out	0x3f, r0	; 63
    2fa8:	cd bf       	out	0x3d, r28	; 61
    2faa:	cf 91       	pop	r28
    2fac:	df 91       	pop	r29
    2fae:	08 95       	ret

00002fb0 <ADC_vInit>:
#include "../../HAL/ADC/ADC_private.h"
#include "../../HAL/ADC/ADC_config.h"


void ADC_vInit(void)
{
    2fb0:	df 93       	push	r29
    2fb2:	cf 93       	push	r28
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
	//1- reference voltage through ADMUX
	#if ADC_REFERENCE_VOLTAGE == ADC_INTERNAL_AREF
		CLEAR_BIT(ADMUX, ADMUX_REFS0);
		CLEAR_BIT(ADMUX, ADMUX_REFS1);
	#elif ADC_REFERENCE_VOLTAGE == ADC_AVCC
		SET_BIT(ADMUX, ADMUX_REFS0);
    2fb8:	a7 e2       	ldi	r26, 0x27	; 39
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	e7 e2       	ldi	r30, 0x27	; 39
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 81       	ld	r24, Z
    2fc2:	80 64       	ori	r24, 0x40	; 64
    2fc4:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX, ADMUX_REFS1);
    2fc6:	a7 e2       	ldi	r26, 0x27	; 39
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	e7 e2       	ldi	r30, 0x27	; 39
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	8f 77       	andi	r24, 0x7F	; 127
    2fd2:	8c 93       	st	X, r24
	#else
		#error "You entered invalid ADC_REFERENCE_VOLTAGE value"
	#endif

	//2- ALWAYS adjustment right (10-bit precision)
	CLEAR_BIT(ADMUX, ADMUX_ADLAR);
    2fd4:	a7 e2       	ldi	r26, 0x27	; 39
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	e7 e2       	ldi	r30, 0x27	; 39
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	8f 7d       	andi	r24, 0xDF	; 223
    2fe0:	8c 93       	st	X, r24

	//3- Enable through ADEN in ADCSRAs
	SET_BIT(ADCSRA, ADCSRA_ADEN);
    2fe2:	a6 e2       	ldi	r26, 0x26	; 38
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	e6 e2       	ldi	r30, 0x26	; 38
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	80 81       	ld	r24, Z
    2fec:	80 68       	ori	r24, 0x80	; 128
    2fee:	8c 93       	st	X, r24

	//4- Interrupt config.
	#if INTERRUPT_ENABLE == ENABLED
		//ADC Interrupt Enable
		SET_BIT(ADCSRA, ADCSRA_ADIE);
    2ff0:	a6 e2       	ldi	r26, 0x26	; 38
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	e6 e2       	ldi	r30, 0x26	; 38
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	88 60       	ori	r24, 0x08	; 8
    2ffc:	8c 93       	st	X, r24
		//choose the Trigger source
		SFIOR &= ~(0b11100000);
		SFIOR |= (AUTO_TRIGGERRING_SOURCE << 5);
	#elif AUTO_TRIGGERRING_ENABLE == DISABLED
		//ADC Auto Trigger Disable
		CLEAR_BIT(ADCSRA, ADCSRA_ADATE);
    2ffe:	a6 e2       	ldi	r26, 0x26	; 38
    3000:	b0 e0       	ldi	r27, 0x00	; 0
    3002:	e6 e2       	ldi	r30, 0x26	; 38
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	80 81       	ld	r24, Z
    3008:	8f 7d       	andi	r24, 0xDF	; 223
    300a:	8c 93       	st	X, r24
	#else
		#error "You entered invalid AUTO_TRIGGERRING_ENABLE value"
	#endif
}
    300c:	cf 91       	pop	r28
    300e:	df 91       	pop	r29
    3010:	08 95       	ret

00003012 <ADC_u16ReadDigitalValue_Sync>:

u16 ADC_u16ReadDigitalValue_Sync(ADC_Channel_t Copy_ChannelId)
{
    3012:	df 93       	push	r29
    3014:	cf 93       	push	r28
    3016:	0f 92       	push	r0
    3018:	cd b7       	in	r28, 0x3d	; 61
    301a:	de b7       	in	r29, 0x3e	; 62
    301c:	89 83       	std	Y+1, r24	; 0x01
	//1- Select Channel.
	ADMUX &= ~(0b00011111);
    301e:	a7 e2       	ldi	r26, 0x27	; 39
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	e7 e2       	ldi	r30, 0x27	; 39
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	80 7e       	andi	r24, 0xE0	; 224
    302a:	8c 93       	st	X, r24
	ADMUX |= (Copy_ChannelId & 0x07);// ANDing with 0x07 For kind of input validation
    302c:	a7 e2       	ldi	r26, 0x27	; 39
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	e7 e2       	ldi	r30, 0x27	; 39
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	98 2f       	mov	r25, r24
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	87 70       	andi	r24, 0x07	; 7
    303c:	89 2b       	or	r24, r25
    303e:	8c 93       	st	X, r24
	//2- start conversion.
	SET_BIT(ADCSRA, ADCSRA_ADSC);
    3040:	a6 e2       	ldi	r26, 0x26	; 38
    3042:	b0 e0       	ldi	r27, 0x00	; 0
    3044:	e6 e2       	ldi	r30, 0x26	; 38
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	80 64       	ori	r24, 0x40	; 64
    304c:	8c 93       	st	X, r24
	//3- waiting for the completion of ADC conversion.
	while(GET_BIT(ADCSRA, ADCSRA_ADSC));
    304e:	e6 e2       	ldi	r30, 0x26	; 38
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	82 95       	swap	r24
    3056:	86 95       	lsr	r24
    3058:	86 95       	lsr	r24
    305a:	83 70       	andi	r24, 0x03	; 3
    305c:	88 2f       	mov	r24, r24
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	81 70       	andi	r24, 0x01	; 1
    3062:	90 70       	andi	r25, 0x00	; 0
    3064:	88 23       	and	r24, r24
    3066:	99 f7       	brne	.-26     	; 0x304e <ADC_u16ReadDigitalValue_Sync+0x3c>
	//4- clear flag by writing one
	SET_BIT(ADCSRA, ADCSRA_ADIF);
    3068:	a6 e2       	ldi	r26, 0x26	; 38
    306a:	b0 e0       	ldi	r27, 0x00	; 0
    306c:	e6 e2       	ldi	r30, 0x26	; 38
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	80 61       	ori	r24, 0x10	; 16
    3074:	8c 93       	st	X, r24
	//5- get the value inside the ADCL and ADCH with pointer to them.
	return ADC_DATA;
    3076:	e4 e2       	ldi	r30, 0x24	; 36
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	80 81       	ld	r24, Z
    307c:	91 81       	ldd	r25, Z+1	; 0x01
}
    307e:	0f 90       	pop	r0
    3080:	cf 91       	pop	r28
    3082:	df 91       	pop	r29
    3084:	08 95       	ret

00003086 <ADC_vStartConversion>:



void ADC_vStartConversion(ADC_Channel_t Copy_ChannelId)
{
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	0f 92       	push	r0
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
    3090:	89 83       	std	Y+1, r24	; 0x01
	//1- Select Channel.
	ADMUX &= ~(0b00011111);
    3092:	a7 e2       	ldi	r26, 0x27	; 39
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	e7 e2       	ldi	r30, 0x27	; 39
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	80 81       	ld	r24, Z
    309c:	80 7e       	andi	r24, 0xE0	; 224
    309e:	8c 93       	st	X, r24
	ADMUX |= (Copy_ChannelId & 0x07);// ANDing with 0x07 For kind of input validation
    30a0:	a7 e2       	ldi	r26, 0x27	; 39
    30a2:	b0 e0       	ldi	r27, 0x00	; 0
    30a4:	e7 e2       	ldi	r30, 0x27	; 39
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 81       	ld	r24, Z
    30aa:	98 2f       	mov	r25, r24
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	87 70       	andi	r24, 0x07	; 7
    30b0:	89 2b       	or	r24, r25
    30b2:	8c 93       	st	X, r24
	//2- start conversion.
	SET_BIT(ADCSRA, ADCSRA_ADSC);
    30b4:	a6 e2       	ldi	r26, 0x26	; 38
    30b6:	b0 e0       	ldi	r27, 0x00	; 0
    30b8:	e6 e2       	ldi	r30, 0x26	; 38
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	80 81       	ld	r24, Z
    30be:	80 64       	ori	r24, 0x40	; 64
    30c0:	8c 93       	st	X, r24
}
    30c2:	0f 90       	pop	r0
    30c4:	cf 91       	pop	r28
    30c6:	df 91       	pop	r29
    30c8:	08 95       	ret

000030ca <ADC_u16ReadDigitalValue_Async>:

u16 ADC_u16ReadDigitalValue_Async(void)
{
    30ca:	df 93       	push	r29
    30cc:	cf 93       	push	r28
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
	return ADC_DATA;
    30d2:	e4 e2       	ldi	r30, 0x24	; 36
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	91 81       	ldd	r25, Z+1	; 0x01
}
    30da:	cf 91       	pop	r28
    30dc:	df 91       	pop	r29
    30de:	08 95       	ret

000030e0 <ADC_vEnableInterrupt>:

void ADC_vEnableInterrupt(void)
{
    30e0:	df 93       	push	r29
    30e2:	cf 93       	push	r28
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADCSRA_ADIE);
    30e8:	a6 e2       	ldi	r26, 0x26	; 38
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	e6 e2       	ldi	r30, 0x26	; 38
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	88 60       	ori	r24, 0x08	; 8
    30f4:	8c 93       	st	X, r24
}
    30f6:	cf 91       	pop	r28
    30f8:	df 91       	pop	r29
    30fa:	08 95       	ret

000030fc <ADC_vDisableInterrupt>:
void ADC_vDisableInterrupt(void)
{
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA, ADCSRA_ADIE);
    3104:	a6 e2       	ldi	r26, 0x26	; 38
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e6 e2       	ldi	r30, 0x26	; 38
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	87 7f       	andi	r24, 0xF7	; 247
    3110:	8c 93       	st	X, r24
}
    3112:	cf 91       	pop	r28
    3114:	df 91       	pop	r29
    3116:	08 95       	ret

00003118 <ADC_vEnable>:

void ADC_vEnable(void)
{
    3118:	df 93       	push	r29
    311a:	cf 93       	push	r28
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADCSRA_ADEN);
    3120:	a6 e2       	ldi	r26, 0x26	; 38
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	e6 e2       	ldi	r30, 0x26	; 38
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	80 68       	ori	r24, 0x80	; 128
    312c:	8c 93       	st	X, r24
}
    312e:	cf 91       	pop	r28
    3130:	df 91       	pop	r29
    3132:	08 95       	ret

00003134 <ADC_vDisable>:
void ADC_vDisable(void)
{
    3134:	df 93       	push	r29
    3136:	cf 93       	push	r28
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA, ADCSRA_ADEN);
    313c:	a6 e2       	ldi	r26, 0x26	; 38
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	e6 e2       	ldi	r30, 0x26	; 38
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	80 81       	ld	r24, Z
    3146:	8f 77       	andi	r24, 0x7F	; 127
    3148:	8c 93       	st	X, r24
}
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	08 95       	ret

00003150 <__vector_16>:
static void (*G_ADC_Complete_Callback)(void);

void __vector_16(void) __attribute__((signal));

void __vector_16(void)
{
    3150:	1f 92       	push	r1
    3152:	0f 92       	push	r0
    3154:	0f b6       	in	r0, 0x3f	; 63
    3156:	0f 92       	push	r0
    3158:	11 24       	eor	r1, r1
    315a:	2f 93       	push	r18
    315c:	3f 93       	push	r19
    315e:	4f 93       	push	r20
    3160:	5f 93       	push	r21
    3162:	6f 93       	push	r22
    3164:	7f 93       	push	r23
    3166:	8f 93       	push	r24
    3168:	9f 93       	push	r25
    316a:	af 93       	push	r26
    316c:	bf 93       	push	r27
    316e:	ef 93       	push	r30
    3170:	ff 93       	push	r31
    3172:	df 93       	push	r29
    3174:	cf 93       	push	r28
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
	if(G_ADC_Complete_Callback)
    317a:	80 91 fe 01 	lds	r24, 0x01FE
    317e:	90 91 ff 01 	lds	r25, 0x01FF
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	29 f0       	breq	.+10     	; 0x3190 <__vector_16+0x40>
	{
		G_ADC_Complete_Callback();
    3186:	e0 91 fe 01 	lds	r30, 0x01FE
    318a:	f0 91 ff 01 	lds	r31, 0x01FF
    318e:	09 95       	icall
	}
}
    3190:	cf 91       	pop	r28
    3192:	df 91       	pop	r29
    3194:	ff 91       	pop	r31
    3196:	ef 91       	pop	r30
    3198:	bf 91       	pop	r27
    319a:	af 91       	pop	r26
    319c:	9f 91       	pop	r25
    319e:	8f 91       	pop	r24
    31a0:	7f 91       	pop	r23
    31a2:	6f 91       	pop	r22
    31a4:	5f 91       	pop	r21
    31a6:	4f 91       	pop	r20
    31a8:	3f 91       	pop	r19
    31aa:	2f 91       	pop	r18
    31ac:	0f 90       	pop	r0
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	0f 90       	pop	r0
    31b2:	1f 90       	pop	r1
    31b4:	18 95       	reti

000031b6 <ADC_vCallBack>:
void ADC_vCallBack(void(*Copy_pfun)(void))
{
    31b6:	df 93       	push	r29
    31b8:	cf 93       	push	r28
    31ba:	00 d0       	rcall	.+0      	; 0x31bc <ADC_vCallBack+0x6>
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
    31c0:	9a 83       	std	Y+2, r25	; 0x02
    31c2:	89 83       	std	Y+1, r24	; 0x01
	G_ADC_Complete_Callback = Copy_pfun;
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	9a 81       	ldd	r25, Y+2	; 0x02
    31c8:	90 93 ff 01 	sts	0x01FF, r25
    31cc:	80 93 fe 01 	sts	0x01FE, r24
}
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	08 95       	ret

000031da <APP_vWelcomeScreen>:
//KEYPAD_u8GetPressed



void APP_vWelcomeScreen (void)
{
    31da:	df 93       	push	r29
    31dc:	cf 93       	push	r28
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
    31e2:	2e 97       	sbiw	r28, 0x0e	; 14
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	f8 94       	cli
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	cd bf       	out	0x3d, r28	; 61
	/*welcome screen*/
	LCD_vSetCursorPosition(0,0);
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	60 e0       	ldi	r22, 0x00	; 0
    31f2:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <LCD_vSetCursorPosition>
	LCD_vSendString("Welcome to");
    31f6:	80 e6       	ldi	r24, 0x60	; 96
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	0e 94 42 15 	call	0x2a84	; 0x2a84 <LCD_vSendString>
	LCD_vSetCursorPosition(1,0);
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	60 e0       	ldi	r22, 0x00	; 0
    3202:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <LCD_vSetCursorPosition>
	LCD_vSendString("Smart Home");
    3206:	8b e6       	ldi	r24, 0x6B	; 107
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	0e 94 42 15 	call	0x2a84	; 0x2a84 <LCD_vSendString>
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	aa e7       	ldi	r26, 0x7A	; 122
    3214:	b4 e4       	ldi	r27, 0x44	; 68
    3216:	8b 87       	std	Y+11, r24	; 0x0b
    3218:	9c 87       	std	Y+12, r25	; 0x0c
    321a:	ad 87       	std	Y+13, r26	; 0x0d
    321c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    321e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3220:	7c 85       	ldd	r23, Y+12	; 0x0c
    3222:	8d 85       	ldd	r24, Y+13	; 0x0d
    3224:	9e 85       	ldd	r25, Y+14	; 0x0e
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	4a ef       	ldi	r20, 0xFA	; 250
    322c:	54 e4       	ldi	r21, 0x44	; 68
    322e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	8f 83       	std	Y+7, r24	; 0x07
    3238:	98 87       	std	Y+8, r25	; 0x08
    323a:	a9 87       	std	Y+9, r26	; 0x09
    323c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    323e:	6f 81       	ldd	r22, Y+7	; 0x07
    3240:	78 85       	ldd	r23, Y+8	; 0x08
    3242:	89 85       	ldd	r24, Y+9	; 0x09
    3244:	9a 85       	ldd	r25, Y+10	; 0x0a
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	40 e8       	ldi	r20, 0x80	; 128
    324c:	5f e3       	ldi	r21, 0x3F	; 63
    324e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3252:	88 23       	and	r24, r24
    3254:	2c f4       	brge	.+10     	; 0x3260 <APP_vWelcomeScreen+0x86>
		__ticks = 1;
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	9e 83       	std	Y+6, r25	; 0x06
    325c:	8d 83       	std	Y+5, r24	; 0x05
    325e:	3f c0       	rjmp	.+126    	; 0x32de <APP_vWelcomeScreen+0x104>
	else if (__tmp > 65535)
    3260:	6f 81       	ldd	r22, Y+7	; 0x07
    3262:	78 85       	ldd	r23, Y+8	; 0x08
    3264:	89 85       	ldd	r24, Y+9	; 0x09
    3266:	9a 85       	ldd	r25, Y+10	; 0x0a
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	3f ef       	ldi	r19, 0xFF	; 255
    326c:	4f e7       	ldi	r20, 0x7F	; 127
    326e:	57 e4       	ldi	r21, 0x47	; 71
    3270:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3274:	18 16       	cp	r1, r24
    3276:	4c f5       	brge	.+82     	; 0x32ca <APP_vWelcomeScreen+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3278:	6b 85       	ldd	r22, Y+11	; 0x0b
    327a:	7c 85       	ldd	r23, Y+12	; 0x0c
    327c:	8d 85       	ldd	r24, Y+13	; 0x0d
    327e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	40 e2       	ldi	r20, 0x20	; 32
    3286:	51 e4       	ldi	r21, 0x41	; 65
    3288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	bc 01       	movw	r22, r24
    3292:	cd 01       	movw	r24, r26
    3294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	9e 83       	std	Y+6, r25	; 0x06
    329e:	8d 83       	std	Y+5, r24	; 0x05
    32a0:	0f c0       	rjmp	.+30     	; 0x32c0 <APP_vWelcomeScreen+0xe6>
    32a2:	88 ec       	ldi	r24, 0xC8	; 200
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	9c 83       	std	Y+4, r25	; 0x04
    32a8:	8b 83       	std	Y+3, r24	; 0x03
    32aa:	8b 81       	ldd	r24, Y+3	; 0x03
    32ac:	9c 81       	ldd	r25, Y+4	; 0x04
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	f1 f7       	brne	.-4      	; 0x32ae <APP_vWelcomeScreen+0xd4>
    32b2:	9c 83       	std	Y+4, r25	; 0x04
    32b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b6:	8d 81       	ldd	r24, Y+5	; 0x05
    32b8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ba:	01 97       	sbiw	r24, 0x01	; 1
    32bc:	9e 83       	std	Y+6, r25	; 0x06
    32be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c0:	8d 81       	ldd	r24, Y+5	; 0x05
    32c2:	9e 81       	ldd	r25, Y+6	; 0x06
    32c4:	00 97       	sbiw	r24, 0x00	; 0
    32c6:	69 f7       	brne	.-38     	; 0x32a2 <APP_vWelcomeScreen+0xc8>
    32c8:	14 c0       	rjmp	.+40     	; 0x32f2 <APP_vWelcomeScreen+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ca:	6f 81       	ldd	r22, Y+7	; 0x07
    32cc:	78 85       	ldd	r23, Y+8	; 0x08
    32ce:	89 85       	ldd	r24, Y+9	; 0x09
    32d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	9e 83       	std	Y+6, r25	; 0x06
    32dc:	8d 83       	std	Y+5, r24	; 0x05
    32de:	8d 81       	ldd	r24, Y+5	; 0x05
    32e0:	9e 81       	ldd	r25, Y+6	; 0x06
    32e2:	9a 83       	std	Y+2, r25	; 0x02
    32e4:	89 83       	std	Y+1, r24	; 0x01
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	f1 f7       	brne	.-4      	; 0x32ea <APP_vWelcomeScreen+0x110>
    32ee:	9a 83       	std	Y+2, r25	; 0x02
    32f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_vClear();
    32f2:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_vClear>
}
    32f6:	2e 96       	adiw	r28, 0x0e	; 14
    32f8:	0f b6       	in	r0, 0x3f	; 63
    32fa:	f8 94       	cli
    32fc:	de bf       	out	0x3e, r29	; 62
    32fe:	0f be       	out	0x3f, r0	; 63
    3300:	cd bf       	out	0x3d, r28	; 61
    3302:	cf 91       	pop	r28
    3304:	df 91       	pop	r29
    3306:	08 95       	ret

00003308 <APP_vUserWelcomeScreen>:

void APP_vUserWelcomeScreen (void)
{
    3308:	df 93       	push	r29
    330a:	cf 93       	push	r28
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
    3310:	2e 97       	sbiw	r28, 0x0e	; 14
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	f8 94       	cli
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	cd bf       	out	0x3d, r28	; 61
	LCD_vClear();
    331c:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_vClear>
	LCD_vSendString("WELCOMETOUSERMENU");
    3320:	86 e7       	ldi	r24, 0x76	; 118
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	0e 94 42 15 	call	0x2a84	; 0x2a84 <LCD_vSendString>
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	aa e7       	ldi	r26, 0x7A	; 122
    332e:	b4 e4       	ldi	r27, 0x44	; 68
    3330:	8b 87       	std	Y+11, r24	; 0x0b
    3332:	9c 87       	std	Y+12, r25	; 0x0c
    3334:	ad 87       	std	Y+13, r26	; 0x0d
    3336:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3338:	6b 85       	ldd	r22, Y+11	; 0x0b
    333a:	7c 85       	ldd	r23, Y+12	; 0x0c
    333c:	8d 85       	ldd	r24, Y+13	; 0x0d
    333e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	4a ef       	ldi	r20, 0xFA	; 250
    3346:	54 e4       	ldi	r21, 0x44	; 68
    3348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	8f 83       	std	Y+7, r24	; 0x07
    3352:	98 87       	std	Y+8, r25	; 0x08
    3354:	a9 87       	std	Y+9, r26	; 0x09
    3356:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3358:	6f 81       	ldd	r22, Y+7	; 0x07
    335a:	78 85       	ldd	r23, Y+8	; 0x08
    335c:	89 85       	ldd	r24, Y+9	; 0x09
    335e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	40 e8       	ldi	r20, 0x80	; 128
    3366:	5f e3       	ldi	r21, 0x3F	; 63
    3368:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    336c:	88 23       	and	r24, r24
    336e:	2c f4       	brge	.+10     	; 0x337a <APP_vUserWelcomeScreen+0x72>
		__ticks = 1;
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	9e 83       	std	Y+6, r25	; 0x06
    3376:	8d 83       	std	Y+5, r24	; 0x05
    3378:	3f c0       	rjmp	.+126    	; 0x33f8 <APP_vUserWelcomeScreen+0xf0>
	else if (__tmp > 65535)
    337a:	6f 81       	ldd	r22, Y+7	; 0x07
    337c:	78 85       	ldd	r23, Y+8	; 0x08
    337e:	89 85       	ldd	r24, Y+9	; 0x09
    3380:	9a 85       	ldd	r25, Y+10	; 0x0a
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	3f ef       	ldi	r19, 0xFF	; 255
    3386:	4f e7       	ldi	r20, 0x7F	; 127
    3388:	57 e4       	ldi	r21, 0x47	; 71
    338a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    338e:	18 16       	cp	r1, r24
    3390:	4c f5       	brge	.+82     	; 0x33e4 <APP_vUserWelcomeScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3392:	6b 85       	ldd	r22, Y+11	; 0x0b
    3394:	7c 85       	ldd	r23, Y+12	; 0x0c
    3396:	8d 85       	ldd	r24, Y+13	; 0x0d
    3398:	9e 85       	ldd	r25, Y+14	; 0x0e
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	40 e2       	ldi	r20, 0x20	; 32
    33a0:	51 e4       	ldi	r21, 0x41	; 65
    33a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a6:	dc 01       	movw	r26, r24
    33a8:	cb 01       	movw	r24, r22
    33aa:	bc 01       	movw	r22, r24
    33ac:	cd 01       	movw	r24, r26
    33ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	9e 83       	std	Y+6, r25	; 0x06
    33b8:	8d 83       	std	Y+5, r24	; 0x05
    33ba:	0f c0       	rjmp	.+30     	; 0x33da <APP_vUserWelcomeScreen+0xd2>
    33bc:	88 ec       	ldi	r24, 0xC8	; 200
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	9c 83       	std	Y+4, r25	; 0x04
    33c2:	8b 83       	std	Y+3, r24	; 0x03
    33c4:	8b 81       	ldd	r24, Y+3	; 0x03
    33c6:	9c 81       	ldd	r25, Y+4	; 0x04
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	f1 f7       	brne	.-4      	; 0x33c8 <APP_vUserWelcomeScreen+0xc0>
    33cc:	9c 83       	std	Y+4, r25	; 0x04
    33ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d0:	8d 81       	ldd	r24, Y+5	; 0x05
    33d2:	9e 81       	ldd	r25, Y+6	; 0x06
    33d4:	01 97       	sbiw	r24, 0x01	; 1
    33d6:	9e 83       	std	Y+6, r25	; 0x06
    33d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33da:	8d 81       	ldd	r24, Y+5	; 0x05
    33dc:	9e 81       	ldd	r25, Y+6	; 0x06
    33de:	00 97       	sbiw	r24, 0x00	; 0
    33e0:	69 f7       	brne	.-38     	; 0x33bc <APP_vUserWelcomeScreen+0xb4>
    33e2:	14 c0       	rjmp	.+40     	; 0x340c <APP_vUserWelcomeScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e4:	6f 81       	ldd	r22, Y+7	; 0x07
    33e6:	78 85       	ldd	r23, Y+8	; 0x08
    33e8:	89 85       	ldd	r24, Y+9	; 0x09
    33ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	9e 83       	std	Y+6, r25	; 0x06
    33f6:	8d 83       	std	Y+5, r24	; 0x05
    33f8:	8d 81       	ldd	r24, Y+5	; 0x05
    33fa:	9e 81       	ldd	r25, Y+6	; 0x06
    33fc:	9a 83       	std	Y+2, r25	; 0x02
    33fe:	89 83       	std	Y+1, r24	; 0x01
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	9a 81       	ldd	r25, Y+2	; 0x02
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	f1 f7       	brne	.-4      	; 0x3404 <APP_vUserWelcomeScreen+0xfc>
    3408:	9a 83       	std	Y+2, r25	; 0x02
    340a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_vClear();
    340c:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_vClear>
}
    3410:	2e 96       	adiw	r28, 0x0e	; 14
    3412:	0f b6       	in	r0, 0x3f	; 63
    3414:	f8 94       	cli
    3416:	de bf       	out	0x3e, r29	; 62
    3418:	0f be       	out	0x3f, r0	; 63
    341a:	cd bf       	out	0x3d, r28	; 61
    341c:	cf 91       	pop	r28
    341e:	df 91       	pop	r29
    3420:	08 95       	ret

00003422 <APP_vDetectPass>:

void APP_vDetectPass (void)
{
    3422:	df 93       	push	r29
    3424:	cf 93       	push	r28
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	a2 97       	sbiw	r28, 0x22	; 34
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
	u16 Pass =0;
    3436:	1a a2       	std	Y+34, r1	; 0x22
    3438:	19 a2       	std	Y+33, r1	; 0x21
	u8 PassTryFlag =0;
    343a:	18 a2       	std	Y+32, r1	; 0x20
	u8 PassKey =0;
    343c:	1f 8e       	std	Y+31, r1	; 0x1f
	LCD_vSetCursorPosition(0,0);
    343e:	80 e0       	ldi	r24, 0x00	; 0
    3440:	60 e0       	ldi	r22, 0x00	; 0
    3442:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <LCD_vSetCursorPosition>
	LCD_vSendString("ENTER PASS:");
    3446:	88 e8       	ldi	r24, 0x88	; 136
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	0e 94 42 15 	call	0x2a84	; 0x2a84 <LCD_vSendString>
	u16 i= 1000;
    344e:	88 ee       	ldi	r24, 0xE8	; 232
    3450:	93 e0       	ldi	r25, 0x03	; 3
    3452:	9e 8f       	std	Y+30, r25	; 0x1e
    3454:	8d 8f       	std	Y+29, r24	; 0x1d


	do
	{
	LCD_vSetCursorPosition(1,1);
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	61 e0       	ldi	r22, 0x01	; 1
    345a:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <LCD_vSetCursorPosition>
	PassTryFlag++;
    345e:	88 a1       	ldd	r24, Y+32	; 0x20
    3460:	8f 5f       	subi	r24, 0xFF	; 255
    3462:	88 a3       	std	Y+32, r24	; 0x20
	while(1)
	{


		PassKey = KEYPAD_u8GetPressed();
    3464:	0e 94 08 17 	call	0x2e10	; 0x2e10 <KEYPAD_u8GetPressed>
    3468:	8f 8f       	std	Y+31, r24	; 0x1f
		LCD_vSendChar('*');
    346a:	8a e2       	ldi	r24, 0x2A	; 42
    346c:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_vSendChar>
		Pass += PassKey*i;
    3470:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3472:	28 2f       	mov	r18, r24
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3478:	9e 8d       	ldd	r25, Y+30	; 0x1e
    347a:	a9 01       	movw	r20, r18
    347c:	48 9f       	mul	r20, r24
    347e:	90 01       	movw	r18, r0
    3480:	49 9f       	mul	r20, r25
    3482:	30 0d       	add	r19, r0
    3484:	58 9f       	mul	r21, r24
    3486:	30 0d       	add	r19, r0
    3488:	11 24       	eor	r1, r1
    348a:	89 a1       	ldd	r24, Y+33	; 0x21
    348c:	9a a1       	ldd	r25, Y+34	; 0x22
    348e:	82 0f       	add	r24, r18
    3490:	93 1f       	adc	r25, r19
    3492:	9a a3       	std	Y+34, r25	; 0x22
    3494:	89 a3       	std	Y+33, r24	; 0x21
		i=i/10;
    3496:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3498:	9e 8d       	ldd	r25, Y+30	; 0x1e
    349a:	2a e0       	ldi	r18, 0x0A	; 10
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	b9 01       	movw	r22, r18
    34a0:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__udivmodhi4>
    34a4:	cb 01       	movw	r24, r22
    34a6:	9e 8f       	std	Y+30, r25	; 0x1e
    34a8:	8d 8f       	std	Y+29, r24	; 0x1d
		if (PassKey == 16 || Pass ==1234)
    34aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34ac:	80 31       	cpi	r24, 0x10	; 16
    34ae:	39 f0       	breq	.+14     	; 0x34be <APP_vDetectPass+0x9c>
    34b0:	89 a1       	ldd	r24, Y+33	; 0x21
    34b2:	9a a1       	ldd	r25, Y+34	; 0x22
    34b4:	54 e0       	ldi	r21, 0x04	; 4
    34b6:	82 3d       	cpi	r24, 0xD2	; 210
    34b8:	95 07       	cpc	r25, r21
    34ba:	09 f0       	breq	.+2      	; 0x34be <APP_vDetectPass+0x9c>
    34bc:	79 c0       	rjmp	.+242    	; 0x35b0 <APP_vDetectPass+0x18e>
		{
			LCD_vClear();
    34be:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_vClear>
			LCD_vSendString("THANKS pro");
    34c2:	84 e9       	ldi	r24, 0x94	; 148
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	0e 94 42 15 	call	0x2a84	; 0x2a84 <LCD_vSendString>
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	90 e4       	ldi	r25, 0x40	; 64
    34ce:	ac e9       	ldi	r26, 0x9C	; 156
    34d0:	b5 e4       	ldi	r27, 0x45	; 69
    34d2:	89 8f       	std	Y+25, r24	; 0x19
    34d4:	9a 8f       	std	Y+26, r25	; 0x1a
    34d6:	ab 8f       	std	Y+27, r26	; 0x1b
    34d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34da:	69 8d       	ldd	r22, Y+25	; 0x19
    34dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	4a ef       	ldi	r20, 0xFA	; 250
    34e8:	54 e4       	ldi	r21, 0x44	; 68
    34ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	8d 8b       	std	Y+21, r24	; 0x15
    34f4:	9e 8b       	std	Y+22, r25	; 0x16
    34f6:	af 8b       	std	Y+23, r26	; 0x17
    34f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34fa:	6d 89       	ldd	r22, Y+21	; 0x15
    34fc:	7e 89       	ldd	r23, Y+22	; 0x16
    34fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3500:	98 8d       	ldd	r25, Y+24	; 0x18
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	40 e8       	ldi	r20, 0x80	; 128
    3508:	5f e3       	ldi	r21, 0x3F	; 63
    350a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    350e:	88 23       	and	r24, r24
    3510:	2c f4       	brge	.+10     	; 0x351c <APP_vDetectPass+0xfa>
		__ticks = 1;
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	9c 8b       	std	Y+20, r25	; 0x14
    3518:	8b 8b       	std	Y+19, r24	; 0x13
    351a:	3f c0       	rjmp	.+126    	; 0x359a <APP_vDetectPass+0x178>
	else if (__tmp > 65535)
    351c:	6d 89       	ldd	r22, Y+21	; 0x15
    351e:	7e 89       	ldd	r23, Y+22	; 0x16
    3520:	8f 89       	ldd	r24, Y+23	; 0x17
    3522:	98 8d       	ldd	r25, Y+24	; 0x18
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	3f ef       	ldi	r19, 0xFF	; 255
    3528:	4f e7       	ldi	r20, 0x7F	; 127
    352a:	57 e4       	ldi	r21, 0x47	; 71
    352c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3530:	18 16       	cp	r1, r24
    3532:	4c f5       	brge	.+82     	; 0x3586 <APP_vDetectPass+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3534:	69 8d       	ldd	r22, Y+25	; 0x19
    3536:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3538:	8b 8d       	ldd	r24, Y+27	; 0x1b
    353a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	40 e2       	ldi	r20, 0x20	; 32
    3542:	51 e4       	ldi	r21, 0x41	; 65
    3544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3548:	dc 01       	movw	r26, r24
    354a:	cb 01       	movw	r24, r22
    354c:	bc 01       	movw	r22, r24
    354e:	cd 01       	movw	r24, r26
    3550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	9c 8b       	std	Y+20, r25	; 0x14
    355a:	8b 8b       	std	Y+19, r24	; 0x13
    355c:	0f c0       	rjmp	.+30     	; 0x357c <APP_vDetectPass+0x15a>
    355e:	88 ec       	ldi	r24, 0xC8	; 200
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	9a 8b       	std	Y+18, r25	; 0x12
    3564:	89 8b       	std	Y+17, r24	; 0x11
    3566:	89 89       	ldd	r24, Y+17	; 0x11
    3568:	9a 89       	ldd	r25, Y+18	; 0x12
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	f1 f7       	brne	.-4      	; 0x356a <APP_vDetectPass+0x148>
    356e:	9a 8b       	std	Y+18, r25	; 0x12
    3570:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3572:	8b 89       	ldd	r24, Y+19	; 0x13
    3574:	9c 89       	ldd	r25, Y+20	; 0x14
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	9c 8b       	std	Y+20, r25	; 0x14
    357a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357c:	8b 89       	ldd	r24, Y+19	; 0x13
    357e:	9c 89       	ldd	r25, Y+20	; 0x14
    3580:	00 97       	sbiw	r24, 0x00	; 0
    3582:	69 f7       	brne	.-38     	; 0x355e <APP_vDetectPass+0x13c>
    3584:	1e c0       	rjmp	.+60     	; 0x35c2 <APP_vDetectPass+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3586:	6d 89       	ldd	r22, Y+21	; 0x15
    3588:	7e 89       	ldd	r23, Y+22	; 0x16
    358a:	8f 89       	ldd	r24, Y+23	; 0x17
    358c:	98 8d       	ldd	r25, Y+24	; 0x18
    358e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	9c 8b       	std	Y+20, r25	; 0x14
    3598:	8b 8b       	std	Y+19, r24	; 0x13
    359a:	8b 89       	ldd	r24, Y+19	; 0x13
    359c:	9c 89       	ldd	r25, Y+20	; 0x14
    359e:	98 8b       	std	Y+16, r25	; 0x10
    35a0:	8f 87       	std	Y+15, r24	; 0x0f
    35a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    35a4:	98 89       	ldd	r25, Y+16	; 0x10
    35a6:	01 97       	sbiw	r24, 0x01	; 1
    35a8:	f1 f7       	brne	.-4      	; 0x35a6 <APP_vDetectPass+0x184>
    35aa:	98 8b       	std	Y+16, r25	; 0x10
    35ac:	8f 87       	std	Y+15, r24	; 0x0f
    35ae:	09 c0       	rjmp	.+18     	; 0x35c2 <APP_vDetectPass+0x1a0>
			_delay_ms(5000);
			break;
		}
		if (i == 0)
    35b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35b4:	00 97       	sbiw	r24, 0x00	; 0
    35b6:	09 f0       	breq	.+2      	; 0x35ba <APP_vDetectPass+0x198>
    35b8:	55 cf       	rjmp	.-342    	; 0x3464 <APP_vDetectPass+0x42>
		{
			i=1000;
    35ba:	88 ee       	ldi	r24, 0xE8	; 232
    35bc:	93 e0       	ldi	r25, 0x03	; 3
    35be:	9e 8f       	std	Y+30, r25	; 0x1e
    35c0:	8d 8f       	std	Y+29, r24	; 0x1d
			break;
		}

	}
	LCD_vSetCursorPosition(1,1);
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	61 e0       	ldi	r22, 0x01	; 1
    35c6:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <LCD_vSetCursorPosition>
	LCD_vSendString("TRYAGAIN");
    35ca:	8f e9       	ldi	r24, 0x9F	; 159
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	0e 94 42 15 	call	0x2a84	; 0x2a84 <LCD_vSendString>
    35d2:	80 e0       	ldi	r24, 0x00	; 0
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	aa ef       	ldi	r26, 0xFA	; 250
    35d8:	b3 e4       	ldi	r27, 0x43	; 67
    35da:	8b 87       	std	Y+11, r24	; 0x0b
    35dc:	9c 87       	std	Y+12, r25	; 0x0c
    35de:	ad 87       	std	Y+13, r26	; 0x0d
    35e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	4a ef       	ldi	r20, 0xFA	; 250
    35f0:	54 e4       	ldi	r21, 0x44	; 68
    35f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	8f 83       	std	Y+7, r24	; 0x07
    35fc:	98 87       	std	Y+8, r25	; 0x08
    35fe:	a9 87       	std	Y+9, r26	; 0x09
    3600:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3602:	6f 81       	ldd	r22, Y+7	; 0x07
    3604:	78 85       	ldd	r23, Y+8	; 0x08
    3606:	89 85       	ldd	r24, Y+9	; 0x09
    3608:	9a 85       	ldd	r25, Y+10	; 0x0a
    360a:	20 e0       	ldi	r18, 0x00	; 0
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	40 e8       	ldi	r20, 0x80	; 128
    3610:	5f e3       	ldi	r21, 0x3F	; 63
    3612:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3616:	88 23       	and	r24, r24
    3618:	2c f4       	brge	.+10     	; 0x3624 <APP_vDetectPass+0x202>
		__ticks = 1;
    361a:	81 e0       	ldi	r24, 0x01	; 1
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	9e 83       	std	Y+6, r25	; 0x06
    3620:	8d 83       	std	Y+5, r24	; 0x05
    3622:	3f c0       	rjmp	.+126    	; 0x36a2 <APP_vDetectPass+0x280>
	else if (__tmp > 65535)
    3624:	6f 81       	ldd	r22, Y+7	; 0x07
    3626:	78 85       	ldd	r23, Y+8	; 0x08
    3628:	89 85       	ldd	r24, Y+9	; 0x09
    362a:	9a 85       	ldd	r25, Y+10	; 0x0a
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	3f ef       	ldi	r19, 0xFF	; 255
    3630:	4f e7       	ldi	r20, 0x7F	; 127
    3632:	57 e4       	ldi	r21, 0x47	; 71
    3634:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3638:	18 16       	cp	r1, r24
    363a:	4c f5       	brge	.+82     	; 0x368e <APP_vDetectPass+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    363c:	6b 85       	ldd	r22, Y+11	; 0x0b
    363e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3640:	8d 85       	ldd	r24, Y+13	; 0x0d
    3642:	9e 85       	ldd	r25, Y+14	; 0x0e
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	40 e2       	ldi	r20, 0x20	; 32
    364a:	51 e4       	ldi	r21, 0x41	; 65
    364c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	bc 01       	movw	r22, r24
    3656:	cd 01       	movw	r24, r26
    3658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	9e 83       	std	Y+6, r25	; 0x06
    3662:	8d 83       	std	Y+5, r24	; 0x05
    3664:	0f c0       	rjmp	.+30     	; 0x3684 <APP_vDetectPass+0x262>
    3666:	88 ec       	ldi	r24, 0xC8	; 200
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	9c 83       	std	Y+4, r25	; 0x04
    366c:	8b 83       	std	Y+3, r24	; 0x03
    366e:	8b 81       	ldd	r24, Y+3	; 0x03
    3670:	9c 81       	ldd	r25, Y+4	; 0x04
    3672:	01 97       	sbiw	r24, 0x01	; 1
    3674:	f1 f7       	brne	.-4      	; 0x3672 <APP_vDetectPass+0x250>
    3676:	9c 83       	std	Y+4, r25	; 0x04
    3678:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    367a:	8d 81       	ldd	r24, Y+5	; 0x05
    367c:	9e 81       	ldd	r25, Y+6	; 0x06
    367e:	01 97       	sbiw	r24, 0x01	; 1
    3680:	9e 83       	std	Y+6, r25	; 0x06
    3682:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3684:	8d 81       	ldd	r24, Y+5	; 0x05
    3686:	9e 81       	ldd	r25, Y+6	; 0x06
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	69 f7       	brne	.-38     	; 0x3666 <APP_vDetectPass+0x244>
    368c:	14 c0       	rjmp	.+40     	; 0x36b6 <APP_vDetectPass+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    368e:	6f 81       	ldd	r22, Y+7	; 0x07
    3690:	78 85       	ldd	r23, Y+8	; 0x08
    3692:	89 85       	ldd	r24, Y+9	; 0x09
    3694:	9a 85       	ldd	r25, Y+10	; 0x0a
    3696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	9e 83       	std	Y+6, r25	; 0x06
    36a0:	8d 83       	std	Y+5, r24	; 0x05
    36a2:	8d 81       	ldd	r24, Y+5	; 0x05
    36a4:	9e 81       	ldd	r25, Y+6	; 0x06
    36a6:	9a 83       	std	Y+2, r25	; 0x02
    36a8:	89 83       	std	Y+1, r24	; 0x01
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
    36ac:	9a 81       	ldd	r25, Y+2	; 0x02
    36ae:	01 97       	sbiw	r24, 0x01	; 1
    36b0:	f1 f7       	brne	.-4      	; 0x36ae <APP_vDetectPass+0x28c>
    36b2:	9a 83       	std	Y+2, r25	; 0x02
    36b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_vSetCursorPosition(1,1);
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	61 e0       	ldi	r22, 0x01	; 1
    36ba:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <LCD_vSetCursorPosition>
	LCD_vSendString("          ");
    36be:	88 ea       	ldi	r24, 0xA8	; 168
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	0e 94 42 15 	call	0x2a84	; 0x2a84 <LCD_vSendString>
	}while(PassTryFlag < 3 && Pass != 1234);
    36c6:	88 a1       	ldd	r24, Y+32	; 0x20
    36c8:	83 30       	cpi	r24, 0x03	; 3
    36ca:	38 f4       	brcc	.+14     	; 0x36da <APP_vDetectPass+0x2b8>
    36cc:	89 a1       	ldd	r24, Y+33	; 0x21
    36ce:	9a a1       	ldd	r25, Y+34	; 0x22
    36d0:	24 e0       	ldi	r18, 0x04	; 4
    36d2:	82 3d       	cpi	r24, 0xD2	; 210
    36d4:	92 07       	cpc	r25, r18
    36d6:	09 f0       	breq	.+2      	; 0x36da <APP_vDetectPass+0x2b8>
    36d8:	be ce       	rjmp	.-644    	; 0x3456 <APP_vDetectPass+0x34>
}
    36da:	a2 96       	adiw	r28, 0x22	; 34
    36dc:	0f b6       	in	r0, 0x3f	; 63
    36de:	f8 94       	cli
    36e0:	de bf       	out	0x3e, r29	; 62
    36e2:	0f be       	out	0x3f, r0	; 63
    36e4:	cd bf       	out	0x3d, r28	; 61
    36e6:	cf 91       	pop	r28
    36e8:	df 91       	pop	r29
    36ea:	08 95       	ret

000036ec <main>:
#include "App/APP_interface.h"

#include <util/delay.h>

int main(void)
{
    36ec:	df 93       	push	r29
    36ee:	cf 93       	push	r28
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
    36f4:	61 97       	sbiw	r28, 0x11	; 17
    36f6:	0f b6       	in	r0, 0x3f	; 63
    36f8:	f8 94       	cli
    36fa:	de bf       	out	0x3e, r29	; 62
    36fc:	0f be       	out	0x3f, r0	; 63
    36fe:	cd bf       	out	0x3d, r28	; 61
	LCD_vInit();
    3700:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_vInit>
	KEYPAD_vInit();
    3704:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <KEYPAD_vInit>
	APP_vWelcomeScreen();
    3708:	0e 94 ed 18 	call	0x31da	; 0x31da <APP_vWelcomeScreen>
	u8 Key=0;
    370c:	1f 86       	std	Y+15, r1	; 0x0f
	while(1)
	{
		LCD_vClear();
    370e:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_vClear>
		LCD_vSetCursorPosition(0,0);
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	60 e0       	ldi	r22, 0x00	; 0
    3716:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <LCD_vSetCursorPosition>
		LCD_vSendString("1-USER ");
    371a:	83 eb       	ldi	r24, 0xB3	; 179
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	0e 94 42 15 	call	0x2a84	; 0x2a84 <LCD_vSendString>
		LCD_vSetCursorPosition(1,0);
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	60 e0       	ldi	r22, 0x00	; 0
    3726:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <LCD_vSetCursorPosition>
		LCD_vSendString("2-ADMIN");
    372a:	8b eb       	ldi	r24, 0xBB	; 187
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	0e 94 42 15 	call	0x2a84	; 0x2a84 <LCD_vSendString>
		Key = KEYPAD_u8GetPressed();
    3732:	0e 94 08 17 	call	0x2e10	; 0x2e10 <KEYPAD_u8GetPressed>
    3736:	8f 87       	std	Y+15, r24	; 0x0f
		switch(Key)
    3738:	8f 85       	ldd	r24, Y+15	; 0x0f
    373a:	28 2f       	mov	r18, r24
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	39 8b       	std	Y+17, r19	; 0x11
    3740:	28 8b       	std	Y+16, r18	; 0x10
    3742:	88 89       	ldd	r24, Y+16	; 0x10
    3744:	99 89       	ldd	r25, Y+17	; 0x11
    3746:	81 30       	cpi	r24, 0x01	; 1
    3748:	91 05       	cpc	r25, r1
    374a:	31 f0       	breq	.+12     	; 0x3758 <main+0x6c>
    374c:	28 89       	ldd	r18, Y+16	; 0x10
    374e:	39 89       	ldd	r19, Y+17	; 0x11
    3750:	22 30       	cpi	r18, 0x02	; 2
    3752:	31 05       	cpc	r19, r1
    3754:	31 f0       	breq	.+12     	; 0x3762 <main+0x76>
    3756:	db cf       	rjmp	.-74     	; 0x370e <main+0x22>
		{
		case 1:
			APP_vUserWelcomeScreen();
    3758:	0e 94 84 19 	call	0x3308	; 0x3308 <APP_vUserWelcomeScreen>
			APP_vDetectPass();
    375c:	0e 94 11 1a 	call	0x3422	; 0x3422 <APP_vDetectPass>
    3760:	d6 cf       	rjmp	.-84     	; 0x370e <main+0x22>
			break;
		case 2:
			LCD_vClear();
    3762:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_vClear>
			LCD_vSendString("WELCOMETOADMINMENU");
    3766:	83 ec       	ldi	r24, 0xC3	; 195
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	0e 94 42 15 	call	0x2a84	; 0x2a84 <LCD_vSendString>
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	90 e8       	ldi	r25, 0x80	; 128
    3772:	ab eb       	ldi	r26, 0xBB	; 187
    3774:	b4 e4       	ldi	r27, 0x44	; 68
    3776:	8b 87       	std	Y+11, r24	; 0x0b
    3778:	9c 87       	std	Y+12, r25	; 0x0c
    377a:	ad 87       	std	Y+13, r26	; 0x0d
    377c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    377e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3780:	7c 85       	ldd	r23, Y+12	; 0x0c
    3782:	8d 85       	ldd	r24, Y+13	; 0x0d
    3784:	9e 85       	ldd	r25, Y+14	; 0x0e
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	4a ef       	ldi	r20, 0xFA	; 250
    378c:	54 e4       	ldi	r21, 0x44	; 68
    378e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	8f 83       	std	Y+7, r24	; 0x07
    3798:	98 87       	std	Y+8, r25	; 0x08
    379a:	a9 87       	std	Y+9, r26	; 0x09
    379c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    379e:	6f 81       	ldd	r22, Y+7	; 0x07
    37a0:	78 85       	ldd	r23, Y+8	; 0x08
    37a2:	89 85       	ldd	r24, Y+9	; 0x09
    37a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	40 e8       	ldi	r20, 0x80	; 128
    37ac:	5f e3       	ldi	r21, 0x3F	; 63
    37ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37b2:	88 23       	and	r24, r24
    37b4:	2c f4       	brge	.+10     	; 0x37c0 <main+0xd4>
		__ticks = 1;
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	9e 83       	std	Y+6, r25	; 0x06
    37bc:	8d 83       	std	Y+5, r24	; 0x05
    37be:	3f c0       	rjmp	.+126    	; 0x383e <main+0x152>
	else if (__tmp > 65535)
    37c0:	6f 81       	ldd	r22, Y+7	; 0x07
    37c2:	78 85       	ldd	r23, Y+8	; 0x08
    37c4:	89 85       	ldd	r24, Y+9	; 0x09
    37c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	3f ef       	ldi	r19, 0xFF	; 255
    37cc:	4f e7       	ldi	r20, 0x7F	; 127
    37ce:	57 e4       	ldi	r21, 0x47	; 71
    37d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37d4:	18 16       	cp	r1, r24
    37d6:	4c f5       	brge	.+82     	; 0x382a <main+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    37da:	7c 85       	ldd	r23, Y+12	; 0x0c
    37dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    37de:	9e 85       	ldd	r25, Y+14	; 0x0e
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	40 e2       	ldi	r20, 0x20	; 32
    37e6:	51 e4       	ldi	r21, 0x41	; 65
    37e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	bc 01       	movw	r22, r24
    37f2:	cd 01       	movw	r24, r26
    37f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	9e 83       	std	Y+6, r25	; 0x06
    37fe:	8d 83       	std	Y+5, r24	; 0x05
    3800:	0f c0       	rjmp	.+30     	; 0x3820 <main+0x134>
    3802:	88 ec       	ldi	r24, 0xC8	; 200
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	9c 83       	std	Y+4, r25	; 0x04
    3808:	8b 83       	std	Y+3, r24	; 0x03
    380a:	8b 81       	ldd	r24, Y+3	; 0x03
    380c:	9c 81       	ldd	r25, Y+4	; 0x04
    380e:	01 97       	sbiw	r24, 0x01	; 1
    3810:	f1 f7       	brne	.-4      	; 0x380e <main+0x122>
    3812:	9c 83       	std	Y+4, r25	; 0x04
    3814:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3816:	8d 81       	ldd	r24, Y+5	; 0x05
    3818:	9e 81       	ldd	r25, Y+6	; 0x06
    381a:	01 97       	sbiw	r24, 0x01	; 1
    381c:	9e 83       	std	Y+6, r25	; 0x06
    381e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3820:	8d 81       	ldd	r24, Y+5	; 0x05
    3822:	9e 81       	ldd	r25, Y+6	; 0x06
    3824:	00 97       	sbiw	r24, 0x00	; 0
    3826:	69 f7       	brne	.-38     	; 0x3802 <main+0x116>
    3828:	72 cf       	rjmp	.-284    	; 0x370e <main+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    382a:	6f 81       	ldd	r22, Y+7	; 0x07
    382c:	78 85       	ldd	r23, Y+8	; 0x08
    382e:	89 85       	ldd	r24, Y+9	; 0x09
    3830:	9a 85       	ldd	r25, Y+10	; 0x0a
    3832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3836:	dc 01       	movw	r26, r24
    3838:	cb 01       	movw	r24, r22
    383a:	9e 83       	std	Y+6, r25	; 0x06
    383c:	8d 83       	std	Y+5, r24	; 0x05
    383e:	8d 81       	ldd	r24, Y+5	; 0x05
    3840:	9e 81       	ldd	r25, Y+6	; 0x06
    3842:	9a 83       	std	Y+2, r25	; 0x02
    3844:	89 83       	std	Y+1, r24	; 0x01
    3846:	89 81       	ldd	r24, Y+1	; 0x01
    3848:	9a 81       	ldd	r25, Y+2	; 0x02
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	f1 f7       	brne	.-4      	; 0x384a <main+0x15e>
    384e:	9a 83       	std	Y+2, r25	; 0x02
    3850:	89 83       	std	Y+1, r24	; 0x01
    3852:	5d cf       	rjmp	.-326    	; 0x370e <main+0x22>

00003854 <__udivmodhi4>:
    3854:	aa 1b       	sub	r26, r26
    3856:	bb 1b       	sub	r27, r27
    3858:	51 e1       	ldi	r21, 0x11	; 17
    385a:	07 c0       	rjmp	.+14     	; 0x386a <__udivmodhi4_ep>

0000385c <__udivmodhi4_loop>:
    385c:	aa 1f       	adc	r26, r26
    385e:	bb 1f       	adc	r27, r27
    3860:	a6 17       	cp	r26, r22
    3862:	b7 07       	cpc	r27, r23
    3864:	10 f0       	brcs	.+4      	; 0x386a <__udivmodhi4_ep>
    3866:	a6 1b       	sub	r26, r22
    3868:	b7 0b       	sbc	r27, r23

0000386a <__udivmodhi4_ep>:
    386a:	88 1f       	adc	r24, r24
    386c:	99 1f       	adc	r25, r25
    386e:	5a 95       	dec	r21
    3870:	a9 f7       	brne	.-22     	; 0x385c <__udivmodhi4_loop>
    3872:	80 95       	com	r24
    3874:	90 95       	com	r25
    3876:	bc 01       	movw	r22, r24
    3878:	cd 01       	movw	r24, r26
    387a:	08 95       	ret

0000387c <__divmodhi4>:
    387c:	97 fb       	bst	r25, 7
    387e:	09 2e       	mov	r0, r25
    3880:	07 26       	eor	r0, r23
    3882:	0a d0       	rcall	.+20     	; 0x3898 <__divmodhi4_neg1>
    3884:	77 fd       	sbrc	r23, 7
    3886:	04 d0       	rcall	.+8      	; 0x3890 <__divmodhi4_neg2>
    3888:	e5 df       	rcall	.-54     	; 0x3854 <__udivmodhi4>
    388a:	06 d0       	rcall	.+12     	; 0x3898 <__divmodhi4_neg1>
    388c:	00 20       	and	r0, r0
    388e:	1a f4       	brpl	.+6      	; 0x3896 <__divmodhi4_exit>

00003890 <__divmodhi4_neg2>:
    3890:	70 95       	com	r23
    3892:	61 95       	neg	r22
    3894:	7f 4f       	sbci	r23, 0xFF	; 255

00003896 <__divmodhi4_exit>:
    3896:	08 95       	ret

00003898 <__divmodhi4_neg1>:
    3898:	f6 f7       	brtc	.-4      	; 0x3896 <__divmodhi4_exit>
    389a:	90 95       	com	r25
    389c:	81 95       	neg	r24
    389e:	9f 4f       	sbci	r25, 0xFF	; 255
    38a0:	08 95       	ret

000038a2 <__prologue_saves__>:
    38a2:	2f 92       	push	r2
    38a4:	3f 92       	push	r3
    38a6:	4f 92       	push	r4
    38a8:	5f 92       	push	r5
    38aa:	6f 92       	push	r6
    38ac:	7f 92       	push	r7
    38ae:	8f 92       	push	r8
    38b0:	9f 92       	push	r9
    38b2:	af 92       	push	r10
    38b4:	bf 92       	push	r11
    38b6:	cf 92       	push	r12
    38b8:	df 92       	push	r13
    38ba:	ef 92       	push	r14
    38bc:	ff 92       	push	r15
    38be:	0f 93       	push	r16
    38c0:	1f 93       	push	r17
    38c2:	cf 93       	push	r28
    38c4:	df 93       	push	r29
    38c6:	cd b7       	in	r28, 0x3d	; 61
    38c8:	de b7       	in	r29, 0x3e	; 62
    38ca:	ca 1b       	sub	r28, r26
    38cc:	db 0b       	sbc	r29, r27
    38ce:	0f b6       	in	r0, 0x3f	; 63
    38d0:	f8 94       	cli
    38d2:	de bf       	out	0x3e, r29	; 62
    38d4:	0f be       	out	0x3f, r0	; 63
    38d6:	cd bf       	out	0x3d, r28	; 61
    38d8:	09 94       	ijmp

000038da <__epilogue_restores__>:
    38da:	2a 88       	ldd	r2, Y+18	; 0x12
    38dc:	39 88       	ldd	r3, Y+17	; 0x11
    38de:	48 88       	ldd	r4, Y+16	; 0x10
    38e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    38e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    38e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    38e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    38e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    38ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    38ec:	b9 84       	ldd	r11, Y+9	; 0x09
    38ee:	c8 84       	ldd	r12, Y+8	; 0x08
    38f0:	df 80       	ldd	r13, Y+7	; 0x07
    38f2:	ee 80       	ldd	r14, Y+6	; 0x06
    38f4:	fd 80       	ldd	r15, Y+5	; 0x05
    38f6:	0c 81       	ldd	r16, Y+4	; 0x04
    38f8:	1b 81       	ldd	r17, Y+3	; 0x03
    38fa:	aa 81       	ldd	r26, Y+2	; 0x02
    38fc:	b9 81       	ldd	r27, Y+1	; 0x01
    38fe:	ce 0f       	add	r28, r30
    3900:	d1 1d       	adc	r29, r1
    3902:	0f b6       	in	r0, 0x3f	; 63
    3904:	f8 94       	cli
    3906:	de bf       	out	0x3e, r29	; 62
    3908:	0f be       	out	0x3f, r0	; 63
    390a:	cd bf       	out	0x3d, r28	; 61
    390c:	ed 01       	movw	r28, r26
    390e:	08 95       	ret

00003910 <_exit>:
    3910:	f8 94       	cli

00003912 <__stop_program>:
    3912:	ff cf       	rjmp	.-2      	; 0x3912 <__stop_program>
